#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# 零碳园区数字孪生系统 - 增强预提交质量检查
echo "🔍 开始预提交质量检查..."
echo "=============================="

# 设置错误处理
set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 运行 lint-staged（原有功能）
echo -e "${BLUE}📋 运行 lint-staged...${NC}"
npx lint-staged

# 获取暂存的文件
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$' || true)

if [ -n "$STAGED_FILES" ]; then
    echo -e "${BLUE}🔒 安全检查...${NC}"
    SECURITY_ISSUES=0
    
    # 检查是否包含敏感信息
    for file in $STAGED_FILES; do
        if git show ":$file" | grep -iE '(password|secret|key|token)\s*=\s*["\'][^"\'
]{8,}["\']' > /dev/null; then
            echo -e "${RED}⚠️  警告: $file 可能包含硬编码的敏感信息${NC}"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
        fi
    done
    
    if [ $SECURITY_ISSUES -gt 0 ]; then
        echo -e "${RED}❌ 发现 $SECURITY_ISSUES 个潜在的安全问题${NC}"
        exit 1
    fi
    
    # TypeScript 类型检查
    TS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx)$' || true)
    if [ -n "$TS_FILES" ]; then
        echo -e "${BLUE}🔷 TypeScript 类型检查...${NC}"
        if ! npx tsc --noEmit; then
            echo -e "${RED}❌ TypeScript 类型检查失败${NC}"
            exit 1
        fi
    fi
    
    # 运行增强质量检查
    echo -e "${BLUE}🎯 运行增强质量检查...${NC}"
    if ! npm run quality:enhanced; then
        echo -e "${RED}❌ 质量检查失败${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}✅ 所有预提交检查通过！${NC}"