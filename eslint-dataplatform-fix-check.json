[{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/data/DataPlatform.js","messages":[{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":652,"column":33,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":652,"endColumn":43,"fix":{"range":[20764,20774],"text":"rule"}},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":653,"column":33,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":653,"endColumn":45,"fix":{"range":[20808,20820],"text":"score"}},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":795,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":795,"endColumn":31}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"/**\n * 数据中台核心平台\n * 实现零碳园区数字孪生系统的数据资产统一管理和服务化封装\n * 提供数据质量监控、治理体系和标准化数据API\n */\n\nimport { EventEmitter } from 'events';\nimport logger from '../../shared/utils/logger.js';\nimport { MATH_CONSTANTS } from '../../shared/constants/MathConstants.js';\n\nclass DataPlatform extends EventEmitter {\n    constructor() {\n        super();\n        \n        // 数据资产目录\n        this.dataAssets = new Map();\n        \n        // 数据源管理\n        this.dataSources = new Map();\n        \n        // 数据质量监控\n        this.qualityMetrics = new Map();\n        \n        // 数据血缘关系\n        this.lineageGraph = new Map();\n        \n        // 数据服务注册表\n        this.dataServices = new Map();\n        \n        // 数据缓存\n        this.dataCache = new Map();\n        \n        // 数据治理规则\n        this.governanceRules = new Map();\n        \n        // 数据访问日志\n        this.accessLogs = [];\n        \n        this.init();\n    }\n    \n    /**\n     * 初始化数据中台\n     */\n    async init() {\n        try {\n            logger.info('🚀 数据中台启动中...');\n            \n            // 初始化数据资产目录\n            await this.initializeDataAssets();\n            \n            // 初始化数据源\n            await this.initializeDataSources();\n            \n            // 初始化数据质量监控\n            await this.initializeQualityMonitoring();\n            \n            // 初始化数据治理规则\n            await this.initializeGovernanceRules();\n            \n            // 启动数据服务\n            await this.startDataServices();\n            \n            logger.info('✅ 数据中台启动完成');\n            this.emit('platform:ready');\n        } catch (error) {\n            logger.error('数据中台启动失败:', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * 初始化数据资产目录\n     */\n    async initializeDataAssets() {\n        // 能-碳-产-资源四要素数据资产定义\n        const assetDefinitions = [\n            {\n                id: 'energy_activity_data',\n                name: '能源活动数据',\n                category: 'energy',\n                description: '园区能源消费、生产活动相关数据',\n                schema: {\n                    park_id: 'string',\n                    activity_type: 'string',\n                    energy_type: 'string',\n                    consumption_amount: 'number',\n                    unit: 'string',\n                    timestamp: 'datetime',\n                    data_source: 'string'\n                },\n                quality_rules: ['completeness', 'accuracy', 'timeliness'],\n                retention_period: '5_years',\n                access_level: 'internal'\n            },\n            {\n                id: 'carbon_emission_data',\n                name: '碳排放数据',\n                category: 'carbon',\n                description: '园区碳排放核算相关数据',\n                schema: {\n                    park_id: 'string',\n                    emission_scope: 'string',\n                    emission_source: 'string',\n                    emission_amount: 'number',\n                    emission_factor: 'number',\n                    calculation_method: 'string',\n                    timestamp: 'datetime'\n                },\n                quality_rules: ['completeness', 'accuracy', 'consistency'],\n                retention_period: '10_years',\n                access_level: 'restricted'\n            },\n            {\n                id: 'production_data',\n                name: '生产数据',\n                category: 'production',\n                description: '园区企业生产活动数据',\n                schema: {\n                    enterprise_id: 'string',\n                    product_type: 'string',\n                    production_volume: 'number',\n                    production_value: 'number',\n                    energy_consumption: 'number',\n                    timestamp: 'datetime'\n                },\n                quality_rules: ['completeness', 'accuracy'],\n                retention_period: '7_years',\n                access_level: 'confidential'\n            },\n            {\n                id: 'resource_circulation_data',\n                name: '资源循环数据',\n                category: 'resource',\n                description: '园区资源循环利用相关数据',\n                schema: {\n                    park_id: 'string',\n                    resource_type: 'string',\n                    circulation_type: 'string',\n                    input_amount: 'number',\n                    output_amount: 'number',\n                    utilization_rate: 'number',\n                    timestamp: 'datetime'\n                },\n                quality_rules: ['completeness', 'accuracy'],\n                retention_period: '5_years',\n                access_level: 'internal'\n            },\n            {\n                id: 'national_indicator_data',\n                name: '国家指标数据',\n                category: 'indicator',\n                description: '国家级零碳园区建设指标体系数据',\n                schema: {\n                    park_id: 'string',\n                    indicator_type: 'string',\n                    indicator_value: 'number',\n                    target_value: 'number',\n                    compliance_status: 'string',\n                    calculation_period: 'string',\n                    timestamp: 'datetime'\n                },\n                quality_rules: ['completeness', 'accuracy', 'timeliness', 'consistency'],\n                retention_period: 'permanent',\n                access_level: 'public'\n            }\n        ];\n        \n        for (const asset of assetDefinitions) {\n            this.dataAssets.set(asset.id, {\n                ...asset,\n                created_at: new Date().toISOString(),\n                last_updated: new Date().toISOString(),\n                version: '1.0.0',\n                status: 'active'\n            });\n        }\n        \n        logger.info(`📋 已注册 ${this.dataAssets.size} 个数据资产`);\n    }\n    \n    /**\n     * 初始化数据源\n     */\n    async initializeDataSources() {\n        const dataSources = [\n            {\n                id: 'ems_system',\n                name: '能源管理系统',\n                type: 'database',\n                connection: {\n                    host: 'localhost',\n                    port: 5432,\n                    database: 'ems_db',\n                    schema: 'energy_data'\n                },\n                data_assets: ['energy_activity_data'],\n                sync_frequency: '5_minutes',\n                status: 'active'\n            },\n            {\n                id: 'mes_system',\n                name: '制造执行系统',\n                type: 'api',\n                connection: {\n                    base_url: 'http://mes-api.local',\n                    auth_type: 'bearer_token'\n                },\n                data_assets: ['production_data'],\n                sync_frequency: '10_minutes',\n                status: 'active'\n            },\n            {\n                id: 'carbon_calculator',\n                name: '碳排放计算引擎',\n                type: 'service',\n                connection: {\n                    service_name: 'carbon-accounting-engine'\n                },\n                data_assets: ['carbon_emission_data'],\n                sync_frequency: 'real_time',\n                status: 'active'\n            },\n            {\n                id: 'national_platform',\n                name: '国家监管平台',\n                type: 'external_api',\n                connection: {\n                    base_url: 'https://national-carbon-platform.gov.cn/api',\n                    auth_type: 'api_key'\n                },\n                data_assets: ['national_indicator_data'],\n                sync_frequency: 'daily',\n                status: 'active'\n            }\n        ];\n        \n        for (const source of dataSources) {\n            this.dataSources.set(source.id, {\n                ...source,\n                created_at: new Date().toISOString(),\n                last_sync: null,\n                sync_status: 'pending'\n            });\n        }\n        \n        logger.info(`🔗 已配置 ${this.dataSources.size} 个数据源`);\n    }\n    \n    /**\n     * 初始化数据质量监控\n     */\n    async initializeQualityMonitoring() {\n        // 数据质量规则定义\n        const qualityRules = {\n            completeness: {\n                name: '完整性检查',\n                description: '检查必填字段是否完整',\n                threshold: 95, // 95%完整性要求\n                check_function: this.checkCompleteness.bind(this)\n            },\n            accuracy: {\n                name: '准确性检查',\n                description: '检查数据值是否在合理范围内',\n                threshold: 98, // 98%准确性要求\n                check_function: this.checkAccuracy.bind(this)\n            },\n            timeliness: {\n                name: '时效性检查',\n                description: '检查数据是否及时更新',\n                threshold: 90, // 90%时效性要求\n                check_function: this.checkTimeliness.bind(this)\n            },\n            consistency: {\n                name: '一致性检查',\n                description: '检查数据在不同系统间的一致性',\n                threshold: 95, // 95%一致性要求\n                check_function: this.checkConsistency.bind(this)\n            }\n        };\n        \n        for (const [ruleId, rule] of Object.entries(qualityRules)) {\n            this.qualityMetrics.set(ruleId, {\n                ...rule,\n                last_check: null,\n                current_score: null,\n                history: []\n            });\n        }\n        \n        // 启动质量监控定时器\n        setInterval(async () => {\n            await this.performQualityCheck();\n        }, MATH_CONSTANTS.FIFTEEN * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND); // 每15分钟检查一次\n        \n        logger.info('📊 数据质量监控已启动');\n    }\n    \n    /**\n     * 初始化数据治理规则\n     */\n    async initializeGovernanceRules() {\n        const governanceRules = [\n            {\n                id: 'data_classification',\n                name: '数据分类规则',\n                type: 'classification',\n                rules: {\n                    public: ['national_indicator_data'],\n                    internal: ['energy_activity_data', 'resource_circulation_data'],\n                    confidential: ['production_data'],\n                    restricted: ['carbon_emission_data']\n                }\n            },\n            {\n                id: 'access_control',\n                name: '访问控制规则',\n                type: 'access',\n                rules: {\n                    admin: ['*'],\n                    operator: ['energy_activity_data', 'carbon_emission_data', 'national_indicator_data'],\n                    viewer: ['national_indicator_data']\n                }\n            },\n            {\n                id: 'retention_policy',\n                name: '数据保留策略',\n                type: 'retention',\n                rules: {\n                    '1_year': [],\n                    '5_years': ['energy_activity_data', 'resource_circulation_data'],\n                    '7_years': ['production_data'],\n                    '10_years': ['carbon_emission_data'],\n                    'permanent': ['national_indicator_data']\n                }\n            }\n        ];\n        \n        for (const rule of governanceRules) {\n            this.governanceRules.set(rule.id, {\n                ...rule,\n                created_at: new Date().toISOString(),\n                status: 'active'\n            });\n        }\n        \n        logger.info(`⚖️ 已配置 ${this.governanceRules.size} 个数据治理规则`);\n    }\n    \n    /**\n     * 启动数据服务\n     */\n    async startDataServices() {\n        // 注册标准化数据API服务\n        const dataServices = [\n            {\n                id: 'energy_data_api',\n                name: '能源数据API',\n                endpoint: '/api/data/energy',\n                data_assets: ['energy_activity_data'],\n                methods: ['GET', 'POST'],\n                rate_limit: 1000\n            },\n            {\n                id: 'carbon_data_api',\n                name: '碳排放数据API',\n                endpoint: '/api/data/carbon',\n                data_assets: ['carbon_emission_data'],\n                methods: ['GET', 'POST'],\n                rate_limit: 500\n            },\n            {\n                id: 'production_data_api',\n                name: '生产数据API',\n                endpoint: '/api/data/production',\n                data_assets: ['production_data'],\n                methods: ['GET'],\n                rate_limit: 200\n            },\n            {\n                id: 'indicator_data_api',\n                name: '国家指标数据API',\n                endpoint: '/api/data/indicators',\n                data_assets: ['national_indicator_data'],\n                methods: ['GET', 'POST'],\n                rate_limit: 2000\n            }\n        ];\n        \n        for (const service of dataServices) {\n            this.dataServices.set(service.id, {\n                ...service,\n                created_at: new Date().toISOString(),\n                status: 'active',\n                request_count: 0,\n                last_access: null\n            });\n        }\n        \n        logger.info(`🔌 已启动 ${this.dataServices.size} 个数据服务`);\n    }\n    \n    /**\n     * 获取数据资产\n     * @param {string} assetId 数据资产ID\n     * @param {Object} query 查询条件\n     * @param {Object} user 用户信息\n     */\n    async getDataAsset(assetId, query = {}, user = null) {\n        try {\n            // 检查数据资产是否存在\n            const asset = this.dataAssets.get(assetId);\n            if (!asset) {\n                throw new Error(`数据资产不存在: ${assetId}`);\n            }\n            \n            // 访问权限检查\n            if (!this.checkAccess(assetId, user)) {\n                throw new Error('访问权限不足');\n            }\n            \n            // 检查缓存\n            const cacheKey = this.generateCacheKey(assetId, query);\n            const cached = this.dataCache.get(cacheKey);\n            if (cached && this.isCacheValid(cached.timestamp)) {\n                this.logAccess(assetId, user, 'cache_hit');\n                return cached.data;\n            }\n            \n            // 从数据源获取数据\n            const data = await this.fetchDataFromSource(assetId, query);\n            \n            // 数据质量检查\n            const qualityScore = await this.checkDataQuality(assetId, data);\n            \n            // 缓存数据\n            this.dataCache.set(cacheKey, {\n                data: {\n                    ...data,\n                    quality_score: qualityScore,\n                    retrieved_at: new Date().toISOString()\n                },\n                timestamp: new Date().toISOString()\n            });\n            \n            // 记录访问日志\n            this.logAccess(assetId, user, 'success');\n            \n            return data;\n        } catch (error) {\n            this.logAccess(assetId, user, 'error', error.message);\n            throw error;\n        }\n    }\n    \n    /**\n     * 创建数据资产\n     * @param {Object} assetData 数据资产数据\n     * @param {Object} user 用户信息\n     */\n    async createDataAsset(assetData, user = null) {\n        try {\n            // 权限检查\n            if (!this.checkCreatePermission(user)) {\n                throw new Error('创建权限不足');\n            }\n            \n            // 数据验证\n            this.validateAssetData(assetData);\n            \n            // 生成资产ID\n            const assetId = this.generateAssetId(assetData);\n            \n            // 创建数据资产\n            const asset = {\n                id: assetId,\n                ...assetData,\n                created_at: new Date().toISOString(),\n                created_by: user?.username || 'system',\n                last_updated: new Date().toISOString(),\n                version: '1.0.0',\n                status: 'active'\n            };\n            \n            this.dataAssets.set(assetId, asset);\n            \n            // 建立数据血缘关系\n            if (assetData.source_assets) {\n                this.updateLineage(assetId, assetData.source_assets);\n            }\n            \n            logger.info(`📝 创建数据资产: ${assetId}`);\n            this.emit('asset:created', asset);\n            \n            return asset;\n        } catch (error) {\n            logger.error('创建数据资产失败:', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * 更新数据资产\n     * @param {string} assetId 数据资产ID\n     * @param {Object} updateData 更新数据\n     * @param {Object} user 用户信息\n     */\n    async updateDataAsset(assetId, updateData, user = null) {\n        try {\n            const asset = this.dataAssets.get(assetId);\n            if (!asset) {\n                throw new Error(`数据资产不存在: ${assetId}`);\n            }\n            \n            // 权限检查\n            if (!this.checkUpdatePermission(assetId, user)) {\n                throw new Error('更新权限不足');\n            }\n            \n            // 更新资产\n            const updatedAsset = {\n                ...asset,\n                ...updateData,\n                last_updated: new Date().toISOString(),\n                updated_by: user?.username || 'system',\n                version: this.incrementVersion(asset.version)\n            };\n            \n            this.dataAssets.set(assetId, updatedAsset);\n            \n            // 清理相关缓存\n            this.clearAssetCache(assetId);\n            \n            logger.info(`📝 更新数据资产: ${assetId}`);\n            this.emit('asset:updated', updatedAsset);\n            \n            return updatedAsset;\n        } catch (error) {\n            logger.error('更新数据资产失败:', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * 获取数据血缘关系\n     * @param {string} assetId 数据资产ID\n     */\n    getDataLineage(assetId) {\n        const lineage = {\n            asset_id: assetId,\n            upstream: [],\n            downstream: [],\n            depth: 3 // 默认追溯3层\n        };\n        \n        // 获取上游依赖\n        lineage.upstream = this.getUpstreamAssets(assetId, lineage.depth);\n        \n        // 获取下游依赖\n        lineage.downstream = this.getDownstreamAssets(assetId, lineage.depth);\n        \n        return lineage;\n    }\n    \n    /**\n     * 获取数据质量报告\n     * @param {string} assetId 数据资产ID\n     * @param {string} timeRange 时间范围\n     */\n    async getQualityReport(assetId, timeRange = '7d') {\n        const asset = this.dataAssets.get(assetId);\n        if (!asset) {\n            throw new Error(`数据资产不存在: ${assetId}`);\n        }\n        \n        const report = {\n            asset_id: assetId,\n            asset_name: asset.name,\n            time_range: timeRange,\n            generated_at: new Date().toISOString(),\n            quality_metrics: {},\n            overall_score: 0,\n            issues: [],\n            recommendations: []\n        };\n        \n        // 计算各项质量指标\n        let totalScore = 0;\n        let metricCount = 0;\n        \n        for (const rule of asset.quality_rules) {\n            const metric = this.qualityMetrics.get(rule);\n            if (metric) {\n                const score = await this.calculateQualityScore(assetId, rule, timeRange);\n                report.quality_metrics[rule] = {\n                    score,\n                    threshold: metric.threshold,\n                    status: score >= metric.threshold ? 'pass' : 'fail'\n                };\n                \n                totalScore += score;\n                metricCount++;\n                \n                if (score < metric.threshold) {\n                        report.issues.push({\n                            type: rule,\n                            severity: score < metric.threshold * MATH_CONSTANTS.POINT_EIGHT ? 'high' : 'medium',\n                            description: `${metric.name}不达标: ${score}% < ${metric.threshold}%`\n                        });\n                }\n            }\n        }\n        \n        report.overall_score = metricCount > 0 ? Math.round(totalScore / metricCount) : 0;\n        \n        // 生成改进建议\n        report.recommendations = this.generateQualityRecommendations(report);\n        \n        return report;\n    }\n    \n    /**\n     * 执行数据质量检查\n     */\n    async performQualityCheck() {\n        logger.info('🔍 开始数据质量检查...');\n        \n        for (const [assetId, asset] of this.dataAssets) {\n            try {\n                for (const rule of asset.quality_rules) {\n                    const metric = this.qualityMetrics.get(rule);\n                    if (metric) {\n                        const score = await metric.check_function(assetId);\n                        \n                        // 更新质量指标\n                        metric.current_score = score;\n                        metric.last_check = new Date().toISOString();\n                        metric.history.push({\n                            score,\n                            timestamp: new Date().toISOString()\n                        });\n                        \n                        // 保留最近100条历史记录\n                        if (metric.history.length > MATH_CONSTANTS.ONE_HUNDRED) {\n                            metric.history = metric.history.slice(-MATH_CONSTANTS.ONE_HUNDRED);\n                        }\n                        \n                        // 质量告警\n                        if (score < metric.threshold) {\n                            this.emit('quality:alert', {\n                                asset_id: assetId,\n                                rule: rule,\n                                score: score,\n                                threshold: metric.threshold,\n                                timestamp: new Date().toISOString()\n                            });\n                        }\n                    }\n                }\n            } catch (error) {\n                logger.error(`数据质量检查失败 (${assetId}):`, error);\n            }\n        }\n        \n        logger.info('✅ 数据质量检查完成');\n    }\n    \n    // 数据质量检查方法\n    async checkCompleteness(_assetId) {\n        // 模拟完整性检查\n        return Math.random() * MATH_CONSTANTS.TWENTY + MATH_CONSTANTS.EIGHTY; // 80-100%\n    }\n    \n    async checkAccuracy(_assetId) {\n        // 模拟准确性检查\n        return Math.random() * MATH_CONSTANTS.TEN + MATH_CONSTANTS.NINETY; // 90-100%\n    }\n    \n    async checkTimeliness(_assetId) {\n        // 模拟时效性检查\n        return Math.random() * MATH_CONSTANTS.THIRTY + MATH_CONSTANTS.SEVENTY; // 70-100%\n    }\n    \n    async checkConsistency(_assetId) {\n        // 模拟一致性检查\n        return Math.random() * MATH_CONSTANTS.FIFTEEN + MATH_CONSTANTS.EIGHTY_FIVE; // 85-100%\n    }\n    \n    // 辅助方法\n    checkAccess(assetId, user) {\n        if (!user) {\n            return false;\n        }\n        \n        const accessRule = this.governanceRules.get('access_control');\n        if (!accessRule) {\n            return true;\n        }\n        \n        const userRole = user.role || 'viewer';\n        const allowedAssets = accessRule.rules[userRole] || [];\n        \n        return allowedAssets.includes('*') || allowedAssets.includes(assetId);\n    }\n    \n    checkCreatePermission(user) {\n        return user && ['admin', 'operator'].includes(user.role);\n    }\n    \n    checkUpdatePermission(assetId, user) {\n        return user && ['admin', 'operator'].includes(user.role);\n    }\n    \n    generateCacheKey(assetId, query) {\n        return `${assetId}_${JSON.stringify(query)}`;\n    }\n    \n    isCacheValid(timestamp) {\n        const age = Date.now() - new Date(timestamp).getTime();\n        return age < MATH_CONSTANTS.FIVE * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND; // 5分钟缓存\n    }\n    \n    async fetchDataFromSource(assetId, query) {\n        // 模拟从数据源获取数据\n        return {\n            asset_id: assetId,\n            data: [\n                {\n                    id: MATH_CONSTANTS.ONE,\n                    value: Math.random() * MATH_CONSTANTS.ONE_HUNDRED,\n                    timestamp: new Date().toISOString()\n                }\n            ],\n            total_count: MATH_CONSTANTS.ONE,\n            query\n        };\n    }\n    \n    async checkDataQuality(_assetId, _data) {\n        // 简化的数据质量评分\n        return Math.round(Math.random() * MATH_CONSTANTS.TWENTY + MATH_CONSTANTS.EIGHTY); // 80-100分\n    }\n    \n    logAccess(assetId, user, status, error = null) {\n        const log = {\n            asset_id: assetId,\n            user: user?.username || 'anonymous',\n            status,\n            error,\n            timestamp: new Date().toISOString()\n        };\n        \n        this.accessLogs.push(log);\n        \n        // 保留最近1000条日志\n        if (this.accessLogs.length > MATH_CONSTANTS.ONE_THOUSAND) {\n            this.accessLogs = this.accessLogs.slice(-MATH_CONSTANTS.ONE_THOUSAND);\n        }\n    }\n    \n    validateAssetData(assetData) {\n        const required = ['name', 'category', 'description', 'schema'];\n        for (const field of required) {\n            if (!assetData[field]) {\n                throw new Error(`缺少必填字段: ${field}`);\n            }\n        }\n    }\n    \n    generateAssetId(assetData) {\n        return `${assetData.category}_${Date.now()}`;\n    }\n    \n    updateLineage(assetId, sourceAssets) {\n        if (!this.lineageGraph.has(assetId)) {\n            this.lineageGraph.set(assetId, { upstream: [], downstream: [] });\n        }\n        \n        const lineage = this.lineageGraph.get(assetId);\n        lineage.upstream = [...new Set([...lineage.upstream, ...sourceAssets])];\n        \n        // 更新源资产的下游关系\n        for (const sourceId of sourceAssets) {\n            if (!this.lineageGraph.has(sourceId)) {\n                this.lineageGraph.set(sourceId, { upstream: [], downstream: [] });\n            }\n            const sourceLineage = this.lineageGraph.get(sourceId);\n            if (!sourceLineage.downstream.includes(assetId)) {\n                sourceLineage.downstream.push(assetId);\n            }\n        }\n    }\n    \n    clearAssetCache(assetId) {\n        for (const [key, value] of this.dataCache) {\n            if (key.startsWith(assetId)) {\n                this.dataCache.delete(key);\n            }\n        }\n    }\n    \n    incrementVersion(version) {\n        const parts = version.split('.');\n        parts[2] = (parseInt(parts[2]) + 1).toString();\n        return parts.join('.');\n    }\n    \n    getUpstreamAssets(assetId, depth) {\n        const result = [];\n        const visited = new Set();\n        \n        const traverse = (id, currentDepth) => {\n            if (currentDepth >= depth || visited.has(id)) {\n                return;\n            }\n            visited.add(id);\n            \n            const lineage = this.lineageGraph.get(id);\n            if (lineage) {\n                for (const upstreamId of lineage.upstream) {\n                    result.push({ asset_id: upstreamId, depth: currentDepth + 1 });\n                    traverse(upstreamId, currentDepth + 1);\n                }\n            }\n        };\n        \n        traverse(assetId, 0);\n        return result;\n    }\n    \n    getDownstreamAssets(assetId, depth) {\n        const result = [];\n        const visited = new Set();\n        \n        const traverse = (id, currentDepth) => {\n            if (currentDepth >= depth || visited.has(id)) {\n                return;\n            }\n            visited.add(id);\n            \n            const lineage = this.lineageGraph.get(id);\n            if (lineage) {\n                for (const downstreamId of lineage.downstream) {\n                    result.push({ asset_id: downstreamId, depth: currentDepth + 1 });\n                    traverse(downstreamId, currentDepth + 1);\n                }\n            }\n        };\n        \n        traverse(assetId, 0);\n        return result;\n    }\n    \n    async calculateQualityScore(assetId, rule, timeRange) {\n        const metric = this.qualityMetrics.get(rule);\n        if (!metric || !metric.history.length) {\n            return 0;\n        }\n        \n        // 计算时间范围内的平均分数\n        const now = new Date();\n        const rangeMs = this.parseTimeRange(timeRange);\n        const cutoff = new Date(now.getTime() - rangeMs);\n        \n        const relevantScores = metric.history\n            .filter(record => new Date(record.timestamp) >= cutoff)\n            .map(record => record.score);\n            \n        if (relevantScores.length === 0) {\n            return metric.current_score || 0;\n        }\n        \n        return Math.round(relevantScores.reduce((sum, score) => sum + score, 0) / relevantScores.length);\n    }\n    \n    parseTimeRange(timeRange) {\n        const unit = timeRange.slice(-1);\n        const value = parseInt(timeRange.slice(0, -1));\n        \n        switch (unit) {\n            case 'h': return value * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND;\n            case 'd': return value * MATH_CONSTANTS.TWENTY_FOUR * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND;\n            case 'w': return value * MATH_CONSTANTS.SEVEN * MATH_CONSTANTS.TWENTY_FOUR * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND;\n            default: return MATH_CONSTANTS.SEVEN * MATH_CONSTANTS.TWENTY_FOUR * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND;\n        }\n    }\n    \n    generateQualityRecommendations(report) {\n        const recommendations = [];\n        \n        for (const [rule, metric] of Object.entries(report.quality_metrics)) {\n            if (metric.status === 'fail') {\n                switch (rule) {\n                    case 'completeness':\n                        recommendations.push('增强数据采集覆盖率，确保关键字段完整性');\n                        break;\n                    case 'accuracy':\n                        recommendations.push('加强数据验证规则，提高数据准确性');\n                        break;\n                    case 'timeliness':\n                        recommendations.push('优化数据同步频率，提升数据时效性');\n                        break;\n                    case 'consistency':\n                        recommendations.push('建立数据标准化流程，确保跨系统一致性');\n                        break;\n                }\n            }\n        }\n        \n        return recommendations;\n    }\n    \n    /**\n     * 获取平台统计信息\n     */\n    getPlatformStats() {\n        return {\n            data_assets: this.dataAssets.size,\n            data_sources: this.dataSources.size,\n            data_services: this.dataServices.size,\n            governance_rules: this.governanceRules.size,\n            cache_size: this.dataCache.size,\n            access_logs: this.accessLogs.length,\n            quality_metrics: this.qualityMetrics.size\n        };\n    }\n}\n\nexport default DataPlatform;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]