[{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/NationalIndicatorEngine.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":547,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":547,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 95.","line":735,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":735,"endColumn":14},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":745,"column":48,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":745,"endColumn":66,"fix":{"range":[25800,25818],"text":"{return 'platinum';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":746,"column":77,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":746,"endColumn":91,"fix":{"range":[25895,25909],"text":"{return 'gold';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":747,"column":56,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":747,"endColumn":72,"fix":{"range":[25965,25981],"text":"{return 'silver';}"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":3,"fixableWarningCount":0,"source":"/**\n * 国家核心指标计算引擎\n * 实现《通知》要求的核心指标计算：\n * 1. 单位能耗碳排放 (tCO2/万元)\n * 2. 清洁能源消费占比 (%)\n * 3. 园区总碳排放 (tCO2)\n */\n\nimport { EventEmitter } from 'events';\nimport logger from '../../shared/utils/logger.js';\nimport { ENERGY_CONSTANTS, MATH_CONSTANTS } from '../../shared/constants/MathConstants.js';\n\nclass NationalIndicatorEngine extends EventEmitter {\n  constructor() {\n    super();\n    this.isInitialized = false;\n    this.indicatorCache = new Map();\n    this.calculationHistory = new Map();\n    this.benchmarkData = new Map();\n    \n    // 国家标准排放因子 (根据《通知》要求)\n    this.emissionFactors = {\n      // 电力排放因子 (tCO2/MWh)\n      electricity: {\n        grid: 0.5703, // 全国电网平均排放因子\n        regional: {\n          north: 0.8843,   // 华北电网\n          northeast: 0.8825, // 东北电网\n          east: 0.7035,    // 华东电网\n          central: 0.8367,  // 华中电网\n          northwest: 0.8922, // 西北电网\n          south: 0.8042    // 南方电网\n        }\n      },\n      // 化石燃料排放因子 (tCO2/t或tCO2/万m³)\n      fossil_fuels: {\n        coal: 1.9003,        // 原煤 tCO2/t\n        coke: 2.8604,        // 焦炭 tCO2/t\n        crude_oil: 3.0202,   // 原油 tCO2/t\n        gasoline: 2.9251,    // 汽油 tCO2/t\n        diesel: 3.0959,      // 柴油 tCO2/t\n        fuel_oil: 3.1705,    // 燃料油 tCO2/t\n        natural_gas: 2.1622, // 天然气 tCO2/万m³\n        lpg: 3.0112         // 液化石油气 tCO2/t\n      },\n      // 工业过程排放因子\n      industrial_process: {\n        cement: 0.5383,      // 水泥生产 tCO2/t\n        steel: 2.07,         // 钢铁生产 tCO2/t\n        aluminum: 1.69,      // 电解铝 tCO2/t\n        glass: 0.1968,       // 平板玻璃 tCO2/重量箱\n        ammonia: 1.485,      // 合成氨 tCO2/t\n        nitric_acid: 0.3    // 硝酸 tCO2/t\n      }\n    };\n    \n    // 清洁能源类型定义\n    this.cleanEnergyTypes = {\n      renewable: ['solar', 'wind', 'hydro', 'biomass', 'geothermal'],\n      nuclear: ['nuclear'],\n      other_clean: ['hydrogen', 'clean_coal'] // 其他清洁能源\n    };\n    \n    // 国家目标基准值\n    this.nationalTargets = {\n      carbon_intensity_reduction: 18, // 单位GDP碳强度下降18%\n      clean_energy_ratio: 25,         // 清洁能源消费占比25%\n      renewable_ratio: 20,            // 可再生能源消费占比20%\n      energy_intensity_reduction: 13.5 // 单位GDP能耗下降13.5%\n    };\n    \n    this.init();\n  }\n\n  async init() {\n    try {\n      await this.loadBenchmarkData();\n      await this.setupCalculationScheduler();\n      this.isInitialized = true;\n      logger.info('国家核心指标计算引擎初始化完成');\n      this.emit('initialized');\n    } catch (error) {\n      logger.error('国家指标计算引擎初始化失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 加载基准数据\n   */\n  async loadBenchmarkData() {\n    try {\n      // 加载行业基准数据\n      const industryBenchmarks = await this.getIndustryBenchmarks();\n      industryBenchmarks.forEach(benchmark => {\n        this.benchmarkData.set(benchmark.industry_code, benchmark);\n      });\n      \n      logger.info(`已加载行业基准数据 ${this.benchmarkData.size} 个`);\n    } catch (error) {\n      logger.error('加载基准数据失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 设置计算调度器\n   */\n  async setupCalculationScheduler() {\n    // 每小时计算一次核心指标\n    setInterval(async () => {\n      try {\n        await this.calculateAllIndicators();\n        this.emit('indicators_updated', {\n          timestamp: new Date().toISOString(),\n          indicators: Array.from(this.indicatorCache.values())\n        });\n      } catch (error) {\n        logger.error('定时计算指标失败:', error);\n      }\n    }, MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n  }\n\n  /**\n   * 计算单位能耗碳排放 (tCO2/万元)\n   * 公式: E单位能耗 = (E能源活动 + E工业过程) / GDP\n   * @param {string} parkId - 园区ID\n   * @param {string} timeRange - 时间范围\n   * @returns {Object} 单位能耗碳排放数据\n   */\n  async calculateUnitEnergyCarbon(parkId, timeRange = '1M') {\n    try {\n      const startTime = this.getStartTime(timeRange);\n      const endTime = new Date();\n      \n      // 获取能源活动碳排放\n      const energyEmissions = await this.calculateEnergyActivityEmissions(parkId, startTime, endTime);\n      \n      // 获取工业过程碳排放\n      const processEmissions = await this.calculateIndustrialProcessEmissions(parkId, startTime, endTime);\n      \n      // 获取GDP数据\n      const gdpData = await this.getGDPData(parkId, startTime, endTime);\n      \n      // 计算总碳排放\n      const totalEmissions = energyEmissions.total + processEmissions.total;\n      \n      // 计算单位能耗碳排放 (tCO2/万元)\n      const unitEnergyCarbon = gdpData.total > 0 ? \n        (totalEmissions / (gdpData.total / MATH_CONSTANTS.TEN_THOUSAND)).toFixed(MATH_CONSTANTS.DECIMAL_PLACES) : 0;\n      \n      const result = {\n        park_id: parkId,\n        time_range: timeRange,\n        start_time: startTime.toISOString(),\n        end_time: endTime.toISOString(),\n        calculation_time: new Date().toISOString(),\n        unit_energy_carbon: parseFloat(unitEnergyCarbon),\n        unit: 'tCO2/万元',\n        components: {\n          energy_activity_emissions: energyEmissions,\n          industrial_process_emissions: processEmissions,\n          total_emissions: totalEmissions,\n          gdp_data: gdpData\n        },\n        breakdown: {\n          by_energy_type: energyEmissions.by_type,\n          by_process_type: processEmissions.by_type,\n          by_sector: await this.getEmissionsBySector(parkId, startTime, endTime)\n        },\n        benchmark_comparison: {\n          industry_average: await this.getIndustryAverage(parkId, 'unit_energy_carbon'),\n          national_target: this.nationalTargets.carbon_intensity_reduction,\n          performance_rating: this.calculatePerformanceRating(unitEnergyCarbon, 'unit_energy_carbon')\n        },\n        trend_analysis: await this.calculateTrendAnalysis(parkId, 'unit_energy_carbon', timeRange),\n        compliance_status: this.assessComplianceStatus(unitEnergyCarbon, 'unit_energy_carbon')\n      };\n      \n      // 缓存结果\n      this.indicatorCache.set(`unit_energy_carbon_${parkId}_${timeRange}`, result);\n      \n      logger.info(`计算单位能耗碳排放完成: ${parkId}, 值: ${unitEnergyCarbon} tCO2/万元`);\n      return result;\n    } catch (error) {\n      logger.error('计算单位能耗碳排放失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 计算清洁能源消费占比 (%)\n   * 公式: R清洁能源 = E清洁能源 / E总能源消费 × 100%\n   * @param {string} parkId - 园区ID\n   * @param {string} timeRange - 时间范围\n   * @returns {Object} 清洁能源消费占比数据\n   */\n  async calculateCleanEnergyRatio(parkId, timeRange = '1M') {\n    try {\n      const startTime = this.getStartTime(timeRange);\n      const endTime = new Date();\n      \n      // 获取总能源消费数据\n      const totalEnergyConsumption = await this.getTotalEnergyConsumption(parkId, startTime, endTime);\n      \n      // 获取清洁能源消费数据\n      const cleanEnergyConsumption = await this.getCleanEnergyConsumption(parkId, startTime, endTime);\n      \n      // 计算清洁能源消费占比\n      const cleanEnergyRatio = totalEnergyConsumption.total > 0 ? \n        (cleanEnergyConsumption.total / totalEnergyConsumption.total * MATH_CONSTANTS.ONE_HUNDRED).toFixed(MATH_CONSTANTS.DECIMAL_PLACES) : 0;\n      \n      // 分类统计\n      const renewableRatio = totalEnergyConsumption.total > 0 ? \n        (cleanEnergyConsumption.renewable / totalEnergyConsumption.total * MATH_CONSTANTS.ONE_HUNDRED).toFixed(MATH_CONSTANTS.DECIMAL_PLACES) : 0;\n      \n      const nuclearRatio = totalEnergyConsumption.total > 0 ? \n        (cleanEnergyConsumption.nuclear / totalEnergyConsumption.total * MATH_CONSTANTS.ONE_HUNDRED).toFixed(MATH_CONSTANTS.DECIMAL_PLACES) : 0;\n      \n      const result = {\n        park_id: parkId,\n        time_range: timeRange,\n        start_time: startTime.toISOString(),\n        end_time: endTime.toISOString(),\n        calculation_time: new Date().toISOString(),\n        clean_energy_ratio: parseFloat(cleanEnergyRatio),\n        renewable_ratio: parseFloat(renewableRatio),\n        nuclear_ratio: parseFloat(nuclearRatio),\n        unit: '%',\n        energy_consumption: {\n          total: totalEnergyConsumption,\n          clean: cleanEnergyConsumption,\n          fossil: {\n            total: totalEnergyConsumption.total - cleanEnergyConsumption.total,\n            by_type: totalEnergyConsumption.by_type.fossil || {}\n          }\n        },\n        breakdown: {\n          by_clean_type: {\n            solar: this.calculateTypeRatio(cleanEnergyConsumption.by_type.solar, totalEnergyConsumption.total),\n            wind: this.calculateTypeRatio(cleanEnergyConsumption.by_type.wind, totalEnergyConsumption.total),\n            hydro: this.calculateTypeRatio(cleanEnergyConsumption.by_type.hydro, totalEnergyConsumption.total),\n            biomass: this.calculateTypeRatio(cleanEnergyConsumption.by_type.biomass, totalEnergyConsumption.total),\n            nuclear: this.calculateTypeRatio(cleanEnergyConsumption.by_type.nuclear, totalEnergyConsumption.total),\n            other: this.calculateTypeRatio(cleanEnergyConsumption.by_type.other, totalEnergyConsumption.total)\n          },\n          by_sector: await this.getCleanEnergyBySector(parkId, startTime, endTime),\n          by_time: await this.getCleanEnergyByTime(parkId, startTime, endTime, timeRange)\n        },\n        benchmark_comparison: {\n          national_target: this.nationalTargets.clean_energy_ratio,\n          renewable_target: this.nationalTargets.renewable_ratio,\n          industry_average: await this.getIndustryAverage(parkId, 'clean_energy_ratio'),\n          performance_rating: this.calculatePerformanceRating(cleanEnergyRatio, 'clean_energy_ratio')\n        },\n        trend_analysis: await this.calculateTrendAnalysis(parkId, 'clean_energy_ratio', timeRange),\n        compliance_status: this.assessComplianceStatus(cleanEnergyRatio, 'clean_energy_ratio'),\n        carbon_reduction_impact: {\n          avoided_emissions: this.calculateAvoidedEmissions(cleanEnergyConsumption.total),\n          equivalent_trees: Math.floor(this.calculateAvoidedEmissions(cleanEnergyConsumption.total) / ENERGY_CONSTANTS.TREE_CARBON_ABSORPTION),\n          economic_value: this.calculateCarbonEconomicValue(this.calculateAvoidedEmissions(cleanEnergyConsumption.total))\n        }\n      };\n      \n      // 缓存结果\n      this.indicatorCache.set(`clean_energy_ratio_${parkId}_${timeRange}`, result);\n      \n      logger.info(`计算清洁能源消费占比完成: ${parkId}, 值: ${cleanEnergyRatio}%`);\n      return result;\n    } catch (error) {\n      logger.error('计算清洁能源消费占比失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 计算园区总碳排放 (tCO2)\n   * 公式: E园区 = E能源活动 + E工业过程 + E其他\n   * @param {string} parkId - 园区ID\n   * @param {string} timeRange - 时间范围\n   * @returns {Object} 园区总碳排放数据\n   */\n  async calculateTotalParkEmissions(parkId, timeRange = '1M') {\n    try {\n      const startTime = this.getStartTime(timeRange);\n      const endTime = new Date();\n      \n      // 获取各类碳排放\n      const energyEmissions = await this.calculateEnergyActivityEmissions(parkId, startTime, endTime);\n      const processEmissions = await this.calculateIndustrialProcessEmissions(parkId, startTime, endTime);\n      const otherEmissions = await this.calculateOtherEmissions(parkId, startTime, endTime);\n      \n      // 计算总排放\n      const totalEmissions = energyEmissions.total + processEmissions.total + otherEmissions.total;\n      \n      const result = {\n        park_id: parkId,\n        time_range: timeRange,\n        start_time: startTime.toISOString(),\n        end_time: endTime.toISOString(),\n        calculation_time: new Date().toISOString(),\n        total_emissions: totalEmissions,\n        unit: 'tCO2',\n        components: {\n          energy_activity: energyEmissions,\n          industrial_process: processEmissions,\n          other_sources: otherEmissions\n        },\n        breakdown: {\n          by_scope: {\n            scope1: energyEmissions.scope1 + processEmissions.total + otherEmissions.total, // 直接排放\n            scope2: energyEmissions.scope2, // 间接排放(电力)\n            scope3: 0 // 其他间接排放(暂不计算)\n          },\n          by_source: {\n            electricity: energyEmissions.by_type.electricity || 0,\n            fossil_fuels: energyEmissions.by_type.fossil_fuels || 0,\n            industrial_process: processEmissions.total,\n            transportation: otherEmissions.by_type.transportation || 0,\n            waste: otherEmissions.by_type.waste || 0,\n            other: otherEmissions.by_type.other || 0\n          },\n          by_sector: await this.getEmissionsBySector(parkId, startTime, endTime),\n          by_time: await this.getEmissionsByTime(parkId, startTime, endTime, timeRange)\n        },\n        intensity_indicators: {\n          per_gdp: await this.calculateEmissionIntensity(totalEmissions, 'gdp', parkId, startTime, endTime),\n          per_area: await this.calculateEmissionIntensity(totalEmissions, 'area', parkId, startTime, endTime),\n          per_employee: await this.calculateEmissionIntensity(totalEmissions, 'employee', parkId, startTime, endTime),\n          per_output: await this.calculateEmissionIntensity(totalEmissions, 'output', parkId, startTime, endTime)\n        },\n        benchmark_comparison: {\n          industry_average: await this.getIndustryAverage(parkId, 'total_emissions'),\n          similar_parks: await this.getSimilarParksComparison(parkId, totalEmissions),\n          performance_rating: this.calculatePerformanceRating(totalEmissions, 'total_emissions')\n        },\n        trend_analysis: await this.calculateTrendAnalysis(parkId, 'total_emissions', timeRange),\n        reduction_potential: await this.calculateReductionPotential(parkId, totalEmissions),\n        compliance_status: this.assessComplianceStatus(totalEmissions, 'total_emissions')\n      };\n      \n      // 缓存结果\n      this.indicatorCache.set(`total_emissions_${parkId}_${timeRange}`, result);\n      \n      logger.info(`计算园区总碳排放完成: ${parkId}, 值: ${totalEmissions} tCO2`);\n      return result;\n    } catch (error) {\n      logger.error('计算园区总碳排放失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 生成国家标准指标报告\n   * @param {string} parkId - 园区ID\n   * @param {string} timeRange - 时间范围\n   * @returns {Object} 国家标准指标报告\n   */\n  async generateNationalIndicatorReport(parkId, timeRange = '1M') {\n    try {\n      // 计算所有核心指标\n      const unitEnergyCarbon = await this.calculateUnitEnergyCarbon(parkId, timeRange);\n      const cleanEnergyRatio = await this.calculateCleanEnergyRatio(parkId, timeRange);\n      const totalEmissions = await this.calculateTotalParkEmissions(parkId, timeRange);\n      \n      // 生成综合报告\n      const report = {\n        report_id: this.generateReportId(parkId, timeRange),\n        park_id: parkId,\n        report_period: {\n          time_range: timeRange,\n          start_time: unitEnergyCarbon.start_time,\n          end_time: unitEnergyCarbon.end_time\n        },\n        generation_time: new Date().toISOString(),\n        core_indicators: {\n          unit_energy_carbon: {\n            value: unitEnergyCarbon.unit_energy_carbon,\n            unit: unitEnergyCarbon.unit,\n            target_compliance: unitEnergyCarbon.compliance_status,\n            performance_rating: unitEnergyCarbon.benchmark_comparison.performance_rating\n          },\n          clean_energy_ratio: {\n            value: cleanEnergyRatio.clean_energy_ratio,\n            unit: cleanEnergyRatio.unit,\n            renewable_ratio: cleanEnergyRatio.renewable_ratio,\n            target_compliance: cleanEnergyRatio.compliance_status,\n            performance_rating: cleanEnergyRatio.benchmark_comparison.performance_rating\n          },\n          total_emissions: {\n            value: totalEmissions.total_emissions,\n            unit: totalEmissions.unit,\n            scope1: totalEmissions.breakdown.by_scope.scope1,\n            scope2: totalEmissions.breakdown.by_scope.scope2,\n            target_compliance: totalEmissions.compliance_status,\n            performance_rating: totalEmissions.benchmark_comparison.performance_rating\n          }\n        },\n        comprehensive_assessment: {\n          overall_score: this.calculateOverallScore(unitEnergyCarbon, cleanEnergyRatio, totalEmissions),\n          compliance_level: this.assessOverallCompliance(unitEnergyCarbon, cleanEnergyRatio, totalEmissions),\n          improvement_areas: this.identifyImprovementAreas(unitEnergyCarbon, cleanEnergyRatio, totalEmissions),\n          achievement_highlights: this.identifyAchievements(unitEnergyCarbon, cleanEnergyRatio, totalEmissions)\n        },\n        detailed_analysis: {\n          unit_energy_carbon: unitEnergyCarbon,\n          clean_energy_ratio: cleanEnergyRatio,\n          total_emissions: totalEmissions\n        },\n        recommendations: await this.generateRecommendations(parkId, unitEnergyCarbon, cleanEnergyRatio, totalEmissions),\n        certification_info: {\n          calculation_standard: '《通知》国家标准',\n          verification_method: 'Automated Calculation Engine',\n          data_quality_score: await this.assessDataQuality(parkId, timeRange),\n          certification_level: this.determineCertificationLevel(unitEnergyCarbon, cleanEnergyRatio, totalEmissions)\n        }\n      };\n      \n      // 保存报告历史\n      this.calculationHistory.set(report.report_id, report);\n      \n      logger.info(`生成国家标准指标报告完成: ${report.report_id}`);\n      this.emit('report_generated', report);\n      \n      return report;\n    } catch (error) {\n      logger.error('生成国家标准指标报告失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 计算所有指标\n   */\n  async calculateAllIndicators() {\n    try {\n      const parks = await this.getAllParks();\n      const timeRanges = ['1d', '1w', '1M', '3M', '1Y'];\n      \n      for (const park of parks) {\n        for (const timeRange of timeRanges) {\n          await this.calculateUnitEnergyCarbon(park.id, timeRange);\n          await this.calculateCleanEnergyRatio(park.id, timeRange);\n          await this.calculateTotalParkEmissions(park.id, timeRange);\n        }\n      }\n    } catch (error) {\n      logger.error('计算所有指标失败:', error);\n    }\n  }\n\n  // 辅助计算方法\n  getStartTime(timeRange) {\n    const now = new Date();\n    const unit = timeRange.slice(-1);\n    const value = parseInt(timeRange.slice(0, -1));\n    \n    switch (unit) {\n      case 'd': return new Date(now.getTime() - value * MATH_CONSTANTS.TWENTY_FOUR * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n      case 'w': return new Date(now.getTime() - value * MATH_CONSTANTS.SEVEN * MATH_CONSTANTS.TWENTY_FOUR * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n      case 'M': return new Date(now.getTime() - value * MATH_CONSTANTS.THIRTY * MATH_CONSTANTS.TWENTY_FOUR * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n      case 'Y': return new Date(now.getTime() - value * MATH_CONSTANTS.THREE_HUNDRED_SIXTY_FIVE * MATH_CONSTANTS.TWENTY_FOUR * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n      default: return new Date(now.getTime() - MATH_CONSTANTS.TWENTY_FOUR * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n    }\n  }\n\n  calculateTypeRatio(value, total) {\n    return total > 0 ? ((value || 0) / total * MATH_CONSTANTS.ONE_HUNDRED).toFixed(MATH_CONSTANTS.DECIMAL_PLACES) : 0;\n  }\n\n  calculateAvoidedEmissions(cleanEnergyAmount) {\n    return cleanEnergyAmount * this.emissionFactors.electricity.grid;\n  }\n\n  calculateCarbonEconomicValue(avoidedEmissions) {\n    const carbonPrice = 50; // 假设碳价 50元/tCO2\n    return (avoidedEmissions * carbonPrice).toFixed(MATH_CONSTANTS.DECIMAL_PLACES);\n  }\n\n  calculatePerformanceRating(value, indicatorType) {\n    // 简化的评级逻辑，实际应根据行业基准\n    const thresholds = {\n      unit_energy_carbon: { excellent: 0.5, good: 1.0, average: 1.5, poor: 2.0 },\n      clean_energy_ratio: { excellent: 50, good: 30, average: 20, poor: 10 },\n      total_emissions: { excellent: 1000, good: 5000, average: 10000, poor: 20000 }\n    };\n    \n    const threshold = thresholds[indicatorType];\n    if (!threshold) {\n      return 'unknown';\n    }\n    \n    if (indicatorType === 'unit_energy_carbon' || indicatorType === 'total_emissions') {\n      if (value <= threshold.excellent) {\n        return 'excellent';\n      }\n      if (value <= threshold.good) {\n        return 'good';\n      }\n      if (value <= threshold.average) {\n        return 'average';\n      }\n      return 'poor';\n    }\n    if (value >= threshold.excellent) {\n      return 'excellent';\n    }\n    if (value >= threshold.good) {\n      return 'good';\n    }\n    if (value >= threshold.average) {\n      return 'average';\n    }\n    return 'poor';\n  }\n\n  assessComplianceStatus(value, indicatorType) {\n    const targets = {\n      unit_energy_carbon: 1.0, // 示例目标值\n      clean_energy_ratio: this.nationalTargets.clean_energy_ratio,\n      total_emissions: 10000 // 示例目标值\n    };\n    \n    const target = targets[indicatorType];\n    if (!target) {\n      return 'unknown';\n    }\n    \n    if (indicatorType === 'clean_energy_ratio') {\n      return value >= target ? 'compliant' : 'non_compliant';\n    }\n    return value <= target ? 'compliant' : 'non_compliant';\n  }\n\n  calculateOverallScore(unitEnergyCarbon, cleanEnergyRatio, totalEmissions) {\n    const scores = {\n      excellent: 100,\n      good: 80,\n      average: 60,\n      poor: 40\n    };\n    \n    const score1 = scores[unitEnergyCarbon.benchmark_comparison.performance_rating] || 0;\n    const score2 = scores[cleanEnergyRatio.benchmark_comparison.performance_rating] || 0;\n    const score3 = scores[totalEmissions.benchmark_comparison.performance_rating] || 0;\n    \n    return Math.round((score1 + score2 + score3) / 3);\n  }\n\n  assessOverallCompliance(unitEnergyCarbon, cleanEnergyRatio, totalEmissions) {\n    const compliantCount = [\n      unitEnergyCarbon.compliance_status === 'compliant',\n      cleanEnergyRatio.compliance_status === 'compliant',\n      totalEmissions.compliance_status === 'compliant'\n    ].filter(Boolean).length;\n    \n    if (compliantCount === MATH_CONSTANTS.THREE) {\n      return 'fully_compliant';\n    }\n    if (compliantCount >= MATH_CONSTANTS.TWO) {\n      return 'mostly_compliant';\n    }\n    if (compliantCount >= MATH_CONSTANTS.ONE) {\n      return 'partially_compliant';\n    }\n    return 'non_compliant';\n  }\n\n  generateReportId(parkId, timeRange) {\n    return `NI_${parkId}_${timeRange}_${Date.now()}`;\n  }\n\n  // 模拟数据获取方法\n  async calculateEnergyActivityEmissions(_parkId, _startTime, _endTime) {\n    return {\n      total: 1500.5,\n      scope1: 800.3,\n      scope2: 700.2,\n      by_type: {\n        electricity: 700.2,\n        natural_gas: 500.1,\n        coal: 200.1,\n        oil: 100.1\n      }\n    };\n  }\n\n  async calculateIndustrialProcessEmissions(_parkId, _startTime, _endTime) {\n    return {\n      total: 300.5,\n      by_type: {\n        cement: 150.2,\n        steel: 100.1,\n        chemical: 50.2\n      }\n    };\n  }\n\n  async calculateOtherEmissions(_parkId, _startTime, _endTime) {\n    return {\n      total: 100.2,\n      by_type: {\n        transportation: 60.1,\n        waste: 30.1,\n        other: 10.0\n      }\n    };\n  }\n\n  async getGDPData(_parkId, _startTime, _endTime) {\n    return {\n      total: 50000, // 万元\n      by_sector: {\n        manufacturing: 30000,\n        services: 15000,\n        other: 5000\n      }\n    };\n  }\n\n  async getTotalEnergyConsumption(_parkId, _startTime, _endTime) {\n    return {\n      total: 10000, // MWh\n      by_type: {\n        electricity: 6000,\n        natural_gas: 2000,\n        coal: 1500,\n        oil: 500\n      }\n    };\n  }\n\n  async getCleanEnergyConsumption(_parkId, _startTime, _endTime) {\n    return {\n      total: 3000,\n      renewable: 2500,\n      nuclear: 500,\n      by_type: {\n        solar: 1000,\n        wind: 800,\n        hydro: 500,\n        biomass: 200,\n        nuclear: 500\n      }\n    };\n  }\n\n  async getIndustryBenchmarks() {\n    return [\n      {\n        industry_code: 'manufacturing',\n        unit_energy_carbon: 1.2,\n        clean_energy_ratio: 20,\n        total_emissions: 8000\n      }\n    ];\n  }\n\n  async getAllParks() {\n    return [{ id: 'park_001', name: '示例园区' }];\n  }\n\n  async getIndustryAverage(_parkId, indicator) {\n    const averages = {\n      unit_energy_carbon: 1.5,\n      clean_energy_ratio: 18,\n      total_emissions: 12000\n    };\n    return averages[indicator] || 0;\n  }\n\n  async calculateTrendAnalysis(_parkId, _indicator, _timeRange) {\n    return {\n      trend: 'improving',\n      change_rate: -5.2,\n      historical_data: []\n    };\n  }\n\n  async getEmissionsBySector(_parkId, _startTime, _endTime) {\n    return {\n      manufacturing: 1200,\n      commercial: 400,\n      residential: 200,\n      transportation: 100\n    };\n  }\n\n  async calculateEmissionIntensity(emissions, type, _parkId, _startTime, _endTime) {\n    const denominators = {\n      gdp: 50000,\n      area: 100,\n      employee: 1000,\n      output: 80000\n    };\n    \n    const denominator = denominators[type] || 1;\n    return (emissions / denominator).toFixed(MATH_CONSTANTS.DECIMAL_PLACES);\n  }\n\n  async getSimilarParksComparison(_parkId, _emissions) {\n    return {\n      average: 1800,\n      percentile: 75,\n      ranking: 'top_25%'\n    };\n  }\n\n  async calculateReductionPotential(_parkId, _emissions) {\n    return {\n      technical_potential: 300,\n      economic_potential: 200,\n      recommended_actions: ['提高能效', '增加清洁能源', '优化工艺']\n    };\n  }\n\n  async generateRecommendations(_parkId, _unitEnergyCarbon, _cleanEnergyRatio, _totalEmissions) {\n    return [\n      {\n        category: 'energy_efficiency',\n        priority: 'high',\n        description: '提升设备能效，降低单位能耗',\n        potential_impact: '减排200tCO2/年'\n      },\n      {\n        category: 'clean_energy',\n        priority: 'medium',\n        description: '增加可再生能源装机容量',\n        potential_impact: '提升清洁能源占比至30%'\n      }\n    ];\n  }\n\n  async assessDataQuality(_parkId, _timeRange) {\n    return 95; // 数据质量评分\n  }\n\n  determineCertificationLevel(unitEnergyCarbon, cleanEnergyRatio, totalEmissions) {\n    const ratings = [\n      unitEnergyCarbon.benchmark_comparison.performance_rating,\n      cleanEnergyRatio.benchmark_comparison.performance_rating,\n      totalEmissions.benchmark_comparison.performance_rating\n    ];\n    \n    if (ratings.every(r => r === 'excellent')) return 'platinum';\n    if (ratings.filter(r => r === 'excellent' || r === 'good').length >= 2) return 'gold';\n    if (ratings.filter(r => r !== 'poor').length >= 2) return 'silver';\n    return 'bronze';\n  }\n\n  identifyImprovementAreas(unitEnergyCarbon, cleanEnergyRatio, totalEmissions) {\n    const areas = [];\n    \n    if (unitEnergyCarbon.benchmark_comparison.performance_rating === 'poor') {\n      areas.push('单位能耗碳排放过高，需要提升能源效率');\n    }\n    \n    if (cleanEnergyRatio.benchmark_comparison.performance_rating === 'poor') {\n      areas.push('清洁能源占比偏低，需要增加可再生能源使用');\n    }\n    \n    if (totalEmissions.benchmark_comparison.performance_rating === 'poor') {\n      areas.push('总碳排放量过高，需要全面减排措施');\n    }\n    \n    return areas;\n  }\n\n  identifyAchievements(unitEnergyCarbon, cleanEnergyRatio, totalEmissions) {\n    const achievements = [];\n    \n    if (unitEnergyCarbon.benchmark_comparison.performance_rating === 'excellent') {\n      achievements.push('单位能耗碳排放达到优秀水平');\n    }\n    \n    if (cleanEnergyRatio.benchmark_comparison.performance_rating === 'excellent') {\n      achievements.push('清洁能源消费占比表现优异');\n    }\n    \n    if (totalEmissions.benchmark_comparison.performance_rating === 'excellent') {\n      achievements.push('总碳排放控制效果显著');\n    }\n    \n    return achievements;\n  }\n}\n\nexport default NationalIndicatorEngine;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]