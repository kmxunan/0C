[{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/DataLineageService.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":619,"column":60,"nodeType":"Literal","messageId":"noMagic","endLine":619,"endColumn":61},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":627,"column":13,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":627,"endColumn":33,"fix":{"range":[22713,22733],"text":"direction"}},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":688,"column":17,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":688,"endColumn":43,"fix":{"range":[24691,24717],"text":"relationship"}},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":722,"column":17,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":722,"endColumn":43,"fix":{"range":[25764,25790],"text":"relationship"}},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":844,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":844,"endColumn":22},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":855,"column":13,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":855,"endColumn":27,"fix":{"range":[30024,30038],"text":"layout"}},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":866,"column":17,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":866,"endColumn":23,"fix":{"range":[30435,30441],"text":"id"}},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":948,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":948,"endColumn":23},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":971,"column":25,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":971,"endColumn":45,"fix":{"range":[34280,34300],"text":"direction"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1009,"column":23,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1009,"endColumn":30,"fix":{"range":[35691,35698],"text":"{return;}"}},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":1034,"column":70,"nodeType":"Literal","messageId":"noMagic","endLine":1034,"endColumn":71},{"ruleId":"no-unused-vars","severity":2,"message":"'nodeId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1037,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":1037,"endColumn":31},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":1042,"column":25,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":1042,"endColumn":37,"fix":{"range":[37137,37149],"text":"depth"}},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":1061,"column":13,"nodeType":"Literal","messageId":"noMagic","endLine":1061,"endColumn":16},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":1096,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":1096,"endColumn":65},{"ruleId":"no-unused-vars","severity":2,"message":"'nodeId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1219,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1219,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'relId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1234,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1234,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 36.","line":1256,"column":60,"nodeType":"Literal","messageId":"noMagic","endLine":1256,"endColumn":62},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9.","line":1256,"column":74,"nodeType":"Literal","messageId":"noMagic","endLine":1256,"endColumn":75},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 36.","line":1260,"column":60,"nodeType":"Literal","messageId":"noMagic","endLine":1260,"endColumn":62},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9.","line":1260,"column":74,"nodeType":"Literal","messageId":"noMagic","endLine":1260,"endColumn":75},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 36.","line":1264,"column":78,"nodeType":"Literal","messageId":"noMagic","endLine":1264,"endColumn":80},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9.","line":1264,"column":92,"nodeType":"Literal","messageId":"noMagic","endLine":1264,"endColumn":93},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":1273,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":1273,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":1274,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":1274,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":1275,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":1275,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":1283,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":1283,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":1284,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":1284,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":1293,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":1293,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":1293,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":1293,"endColumn":41},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1293,"column":43,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1293,"endColumn":57,"fix":{"range":[45864,45878],"text":"{return 'high';}"}},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":1294,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":1294,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":1294,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":1294,"endColumn":40},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1294,"column":42,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1294,"endColumn":58,"fix":{"range":[45920,45936],"text":"{return 'medium';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1308,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1308,"endColumn":72,"fix":{"range":[46380,46412],"text":"{extractNodes(nodeData.upstream);}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1309,"column":42,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1309,"endColumn":76,"fix":{"range":[46454,46488],"text":"{extractNodes(nodeData.downstream);}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1313,"column":45,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1313,"endColumn":90,"fix":{"range":[46567,46612],"text":"{extractNodes(lineageResult.upstream_lineage);}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1314,"column":47,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1314,"endColumn":94,"fix":{"range":[46659,46706],"text":"{extractNodes(lineageResult.downstream_lineage);}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'nodeId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1323,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":1323,"endColumn":31},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1327,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1327,"endColumn":80,"fix":{"range":[47134,47174],"text":"{extractRelationships(nodeData.upstream);}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1328,"column":42,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1328,"endColumn":84,"fix":{"range":[47216,47258],"text":"{extractRelationships(nodeData.downstream);}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1332,"column":45,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1332,"endColumn":98,"fix":{"range":[47337,47390],"text":"{extractRelationships(lineageResult.upstream_lineage);}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1333,"column":47,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1333,"endColumn":102,"fix":{"range":[47437,47492],"text":"{extractRelationships(lineageResult.downstream_lineage);}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'nodeId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1343,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":1343,"endColumn":31},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1344,"column":40,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1344,"endColumn":92,"fix":{"range":[47857,47909],"text":"{calculateDepth(nodeData.upstream, currentDepth + 1);}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1345,"column":42,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1345,"endColumn":96,"fix":{"range":[47951,48005],"text":"{calculateDepth(nodeData.downstream, currentDepth + 1);}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1349,"column":45,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1349,"endColumn":92,"fix":{"range":[48084,48131],"text":"{calculateDepth(lineageResult.upstream_lineage);}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1350,"column":47,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1350,"endColumn":96,"fix":{"range":[48178,48227],"text":"{calculateDepth(lineageResult.downstream_lineage);}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'nodeId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1357,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1357,"endColumn":27},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1373,"column":58,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1373,"endColumn":73,"fix":{"range":[48861,48876],"text":"{return 'large';}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":1374,"column":67,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":1374,"endColumn":83,"fix":{"range":[48943,48959],"text":"{return 'medium';}"}},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":1400,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":1400,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":1401,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":1401,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":1471,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":1471,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":1503,"column":19,"nodeType":"Literal","messageId":"noMagic","endLine":1503,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":1503,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":1503,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":1503,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":1503,"endColumn":31},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":1503,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":1503,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":1504,"column":19,"nodeType":"Literal","messageId":"noMagic","endLine":1504,"endColumn":20},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":1504,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":1504,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":1504,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":1504,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":1504,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":1504,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":1504,"column":38,"nodeType":"Literal","messageId":"noMagic","endLine":1504,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 30.","line":1505,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":1505,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":1505,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":1505,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":1505,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":1505,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":1505,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":1505,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":1505,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":1505,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 90.","line":1506,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":1506,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":1506,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":1506,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":1506,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":1506,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":1506,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":1506,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":1506,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":1506,"endColumn":44}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":42,"fixableErrorCount":24,"fixableWarningCount":0,"source":"/**\n * 数据血缘追踪服务\n * 实现数据血缘关系追踪、影响分析和数据流向可视化\n * 为零碳园区数字孪生系统提供完整的数据流向追踪能力\n */\n\nimport { EventEmitter } from 'events';\nimport logger from '../../shared/utils/logger.js';\nimport { MATH_CONSTANTS } from '../../shared/constants/MathConstants.js';\n\nclass DataLineageService extends EventEmitter {\n    constructor() {\n        super();\n        \n        // 数据血缘图\n        this.lineageGraph = new Map();\n        \n        // 数据节点信息\n        this.dataNodes = new Map();\n        \n        // 数据关系映射\n        this.relationships = new Map();\n        \n        // 影响分析缓存\n        this.impactAnalysisCache = new Map();\n        \n        // 血缘追踪任务\n        this.trackingTasks = new Map();\n        \n        // 变更历史记录\n        this.changeHistory = new Map();\n        \n        // 数据流向统计\n        this.flowStatistics = new Map();\n        \n        // 血缘报告\n        this.lineageReports = new Map();\n        \n        this.init();\n    }\n    \n    /**\n     * 初始化数据血缘服务\n     */\n    async init() {\n        try {\n            logger.info('🔗 数据血缘追踪服务启动中...');\n            \n            // 初始化数据节点\n            await this.initializeDataNodes();\n            \n            // 构建血缘关系\n            await this.buildLineageRelationships();\n            \n            // 启动血缘追踪任务\n            await this.startTrackingTasks();\n            \n            // 初始化影响分析引擎\n            await this.initializeImpactAnalysis();\n            \n            logger.info('✅ 数据血缘追踪服务启动完成');\n            this.emit('lineage:ready');\n        } catch (error) {\n            logger.error('数据血缘追踪服务启动失败:', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * 初始化数据节点\n     */\n    async initializeDataNodes() {\n        const nodes = [\n            // 数据源节点\n            {\n                id: 'source_ems_energy',\n                name: 'EMS能源数据',\n                type: 'source',\n                category: 'energy',\n                description: '能源管理系统原始数据',\n                location: 'database.energy_consumption',\n                schema: {\n                    meter_id: 'string',\n                    energy_type: 'string',\n                    consumption_amount: 'number',\n                    measurement_time: 'datetime',\n                    quality_flag: 'string'\n                },\n                update_frequency: 'real_time',\n                data_volume: '10GB',\n                owner: 'energy_team',\n                steward: 'energy_analyst',\n                tags: ['energy', 'real_time', 'critical']\n            },\n            {\n                id: 'source_mes_production',\n                name: 'MES生产数据',\n                type: 'source',\n                category: 'production',\n                description: '制造执行系统生产数据',\n                location: 'database.production_records',\n                schema: {\n                    enterprise_id: 'string',\n                    product_code: 'string',\n                    production_volume: 'number',\n                    production_date: 'date',\n                    process_parameters: 'json'\n                },\n                update_frequency: 'hourly',\n                data_volume: '5GB',\n                owner: 'production_team',\n                steward: 'production_manager',\n                tags: ['production', 'hourly', 'business_critical']\n            },\n            {\n                id: 'source_carbon_factors',\n                name: '国家碳排放因子',\n                type: 'reference',\n                category: 'carbon',\n                description: '国家标准碳排放因子数据',\n                location: 'constants.CARBON_CONSTANTS',\n                schema: {\n                    factor_type: 'string',\n                    emission_factor: 'number',\n                    unit: 'string',\n                    region: 'string',\n                    year: 'number'\n                },\n                update_frequency: 'yearly',\n                data_volume: '1MB',\n                owner: 'carbon_team',\n                steward: 'carbon_analyst',\n                tags: ['carbon', 'reference', 'national_standard']\n            },\n            \n            // 处理节点\n            {\n                id: 'process_carbon_calculation',\n                name: '碳排放计算引擎',\n                type: 'process',\n                category: 'carbon',\n                description: '碳排放量计算处理',\n                location: 'services.CarbonCalculationEngine',\n                processing_logic: {\n                    input_sources: ['source_ems_energy', 'source_carbon_factors'],\n                    calculation_method: 'emission_factor_method',\n                    output_format: 'carbon_emission_record'\n                },\n                update_frequency: 'real_time',\n                owner: 'carbon_team',\n                steward: 'carbon_engineer',\n                tags: ['carbon', 'calculation', 'real_time']\n            },\n            {\n                id: 'process_national_indicators',\n                name: '国家指标计算',\n                type: 'process',\n                category: 'indicators',\n                description: '国家核心指标计算处理',\n                location: 'services.NationalIndicatorEngine',\n                processing_logic: {\n                    input_sources: ['source_ems_energy', 'source_mes_production', 'process_carbon_calculation'],\n                    calculation_method: 'national_standard_method',\n                    output_format: 'national_indicator_record'\n                },\n                update_frequency: 'daily',\n                owner: 'indicator_team',\n                steward: 'indicator_analyst',\n                tags: ['indicators', 'national_standard', 'daily']\n            },\n            {\n                id: 'process_energy_optimization',\n                name: '用能优化调度',\n                type: 'process',\n                category: 'optimization',\n                description: '能源优化调度处理',\n                location: 'services.EnergyOptimizationScheduler',\n                processing_logic: {\n                    input_sources: ['source_ems_energy', 'process_carbon_calculation'],\n                    optimization_method: 'multi_objective_optimization',\n                    output_format: 'optimization_schedule'\n                },\n                update_frequency: 'hourly',\n                owner: 'optimization_team',\n                steward: 'optimization_engineer',\n                tags: ['optimization', 'energy', 'scheduling']\n            },\n            \n            // 存储节点\n            {\n                id: 'storage_carbon_emissions',\n                name: '碳排放数据存储',\n                type: 'storage',\n                category: 'carbon',\n                description: '碳排放计算结果存储',\n                location: 'database.carbon_emissions',\n                schema: {\n                    emission_id: 'string',\n                    emission_scope: 'string',\n                    emission_source: 'string',\n                    emission_amount: 'number',\n                    calculation_time: 'datetime',\n                    data_quality_score: 'number'\n                },\n                retention_policy: '10_years',\n                backup_frequency: 'daily',\n                owner: 'carbon_team',\n                steward: 'data_manager',\n                tags: ['carbon', 'storage', 'long_term']\n            },\n            {\n                id: 'storage_national_indicators',\n                name: '国家指标数据存储',\n                type: 'storage',\n                category: 'indicators',\n                description: '国家核心指标存储',\n                location: 'database.national_indicators',\n                schema: {\n                    indicator_id: 'string',\n                    indicator_type: 'string',\n                    indicator_value: 'number',\n                    target_value: 'number',\n                    calculation_date: 'date',\n                    compliance_status: 'string'\n                },\n                retention_policy: 'permanent',\n                backup_frequency: 'daily',\n                owner: 'indicator_team',\n                steward: 'data_manager',\n                tags: ['indicators', 'storage', 'permanent']\n            },\n            \n            // 输出节点\n            {\n                id: 'output_dashboard',\n                name: '监测仪表盘',\n                type: 'output',\n                category: 'visualization',\n                description: '实时监测仪表盘展示',\n                location: 'ui.NationalIndicatorDashboard',\n                data_sources: ['storage_carbon_emissions', 'storage_national_indicators'],\n                update_frequency: 'real_time',\n                owner: 'ui_team',\n                steward: 'dashboard_admin',\n                tags: ['visualization', 'dashboard', 'real_time']\n            },\n            {\n                id: 'output_reports',\n                name: '申报验收报告',\n                type: 'output',\n                category: 'reporting',\n                description: '自动生成申报验收材料',\n                location: 'services.ReportGenerator',\n                data_sources: ['storage_carbon_emissions', 'storage_national_indicators'],\n                update_frequency: 'on_demand',\n                owner: 'report_team',\n                steward: 'report_manager',\n                tags: ['reporting', 'compliance', 'on_demand']\n            },\n            {\n                id: 'output_api',\n                name: '数据API接口',\n                type: 'output',\n                category: 'api',\n                description: '标准化数据API服务',\n                location: 'api.DataPlatform',\n                data_sources: ['storage_carbon_emissions', 'storage_national_indicators'],\n                update_frequency: 'real_time',\n                owner: 'api_team',\n                steward: 'api_manager',\n                tags: ['api', 'integration', 'real_time']\n            }\n        ];\n        \n        for (const node of nodes) {\n            this.dataNodes.set(node.id, {\n                ...node,\n                created_at: new Date().toISOString(),\n                last_updated: new Date().toISOString(),\n                status: 'active',\n                lineage_version: '1.0.0'\n            });\n        }\n        \n        logger.info(`📊 已初始化 ${this.dataNodes.size} 个数据节点`);\n    }\n    \n    /**\n     * 构建血缘关系\n     */\n    async buildLineageRelationships() {\n        const relationships = [\n            // 能源数据流向\n            {\n                id: 'rel_energy_to_carbon',\n                source_id: 'source_ems_energy',\n                target_id: 'process_carbon_calculation',\n                relationship_type: 'data_flow',\n                transformation: {\n                    type: 'calculation',\n                    description: '能源消费数据转换为碳排放量',\n                    fields_mapping: {\n                        'consumption_amount': 'activity_data',\n                        'energy_type': 'emission_source_type',\n                        'measurement_time': 'calculation_time'\n                    },\n                    business_rules: [\n                        '使用国家标准排放因子',\n                        '按能源类型分类计算',\n                        '实时计算更新'\n                    ]\n                },\n                data_quality_impact: 'high',\n                criticality: 'critical'\n            },\n            {\n                id: 'rel_carbon_factors_to_calculation',\n                source_id: 'source_carbon_factors',\n                target_id: 'process_carbon_calculation',\n                relationship_type: 'reference',\n                transformation: {\n                    type: 'lookup',\n                    description: '碳排放因子查找匹配',\n                    fields_mapping: {\n                        'emission_factor': 'calculation_factor',\n                        'factor_type': 'energy_type_mapping'\n                    },\n                    business_rules: [\n                        '按能源类型匹配因子',\n                        '使用最新年度因子',\n                        '区域因子优先'\n                    ]\n                },\n                data_quality_impact: 'high',\n                criticality: 'critical'\n            },\n            {\n                id: 'rel_carbon_calculation_to_storage',\n                source_id: 'process_carbon_calculation',\n                target_id: 'storage_carbon_emissions',\n                relationship_type: 'data_flow',\n                transformation: {\n                    type: 'storage',\n                    description: '碳排放计算结果存储',\n                    fields_mapping: {\n                        'calculated_emissions': 'emission_amount',\n                        'calculation_metadata': 'calculation_details'\n                    },\n                    business_rules: [\n                        '包含数据质量评分',\n                        '记录计算方法',\n                        '保留审计轨迹'\n                    ]\n                },\n                data_quality_impact: 'medium',\n                criticality: 'high'\n            },\n            \n            // 生产数据流向\n            {\n                id: 'rel_production_to_indicators',\n                source_id: 'source_mes_production',\n                target_id: 'process_national_indicators',\n                relationship_type: 'data_flow',\n                transformation: {\n                    type: 'aggregation',\n                    description: '生产数据聚合计算国家指标',\n                    fields_mapping: {\n                        'production_volume': 'total_production',\n                        'enterprise_id': 'enterprise_grouping'\n                    },\n                    business_rules: [\n                        '按企业分组统计',\n                        '按产品类型分类',\n                        '日度数据聚合'\n                    ]\n                },\n                data_quality_impact: 'high',\n                criticality: 'high'\n            },\n            \n            // 国家指标计算流向\n            {\n                id: 'rel_carbon_to_indicators',\n                source_id: 'process_carbon_calculation',\n                target_id: 'process_national_indicators',\n                relationship_type: 'data_flow',\n                transformation: {\n                    type: 'calculation',\n                    description: '碳排放数据用于国家指标计算',\n                    fields_mapping: {\n                        'emission_amount': 'carbon_intensity_input',\n                        'emission_scope': 'scope_classification'\n                    },\n                    business_rules: [\n                        '计算单位能耗碳排放',\n                        '按范围分类统计',\n                        '符合国家标准'\n                    ]\n                },\n                data_quality_impact: 'high',\n                criticality: 'critical'\n            },\n            {\n                id: 'rel_indicators_to_storage',\n                source_id: 'process_national_indicators',\n                target_id: 'storage_national_indicators',\n                relationship_type: 'data_flow',\n                transformation: {\n                    type: 'storage',\n                    description: '国家指标计算结果存储',\n                    fields_mapping: {\n                        'calculated_indicators': 'indicator_value',\n                        'compliance_check': 'compliance_status'\n                    },\n                    business_rules: [\n                        '永久保存',\n                        '版本控制',\n                        '合规性标记'\n                    ]\n                },\n                data_quality_impact: 'medium',\n                criticality: 'high'\n            },\n            \n            // 优化调度流向\n            {\n                id: 'rel_energy_to_optimization',\n                source_id: 'source_ems_energy',\n                target_id: 'process_energy_optimization',\n                relationship_type: 'data_flow',\n                transformation: {\n                    type: 'optimization_input',\n                    description: '能源数据用于优化调度',\n                    fields_mapping: {\n                        'consumption_amount': 'current_load',\n                        'energy_type': 'energy_category'\n                    },\n                    business_rules: [\n                        '实时负荷分析',\n                        '多目标优化',\n                        '约束条件检查'\n                    ]\n                },\n                data_quality_impact: 'high',\n                criticality: 'high'\n            },\n            \n            // 输出流向\n            {\n                id: 'rel_storage_to_dashboard',\n                source_id: 'storage_carbon_emissions',\n                target_id: 'output_dashboard',\n                relationship_type: 'data_consumption',\n                transformation: {\n                    type: 'visualization',\n                    description: '碳排放数据可视化展示',\n                    fields_mapping: {\n                        'emission_amount': 'chart_data',\n                        'calculation_time': 'time_axis'\n                    },\n                    business_rules: [\n                        '实时更新显示',\n                        '多维度展示',\n                        '告警阈值检查'\n                    ]\n                },\n                data_quality_impact: 'low',\n                criticality: 'medium'\n            },\n            {\n                id: 'rel_indicators_to_dashboard',\n                source_id: 'storage_national_indicators',\n                target_id: 'output_dashboard',\n                relationship_type: 'data_consumption',\n                transformation: {\n                    type: 'visualization',\n                    description: '国家指标数据可视化展示',\n                    fields_mapping: {\n                        'indicator_value': 'kpi_display',\n                        'target_value': 'target_comparison'\n                    },\n                    business_rules: [\n                        '目标对比显示',\n                        '趋势分析',\n                        '预警提示'\n                    ]\n                },\n                data_quality_impact: 'low',\n                criticality: 'medium'\n            },\n            {\n                id: 'rel_storage_to_reports',\n                source_id: 'storage_carbon_emissions',\n                target_id: 'output_reports',\n                relationship_type: 'data_consumption',\n                transformation: {\n                    type: 'reporting',\n                    description: '碳排放数据用于报告生成',\n                    fields_mapping: {\n                        'emission_amount': 'report_data',\n                        'data_quality_score': 'data_reliability'\n                    },\n                    business_rules: [\n                        '按模板格式化',\n                        '数据验证检查',\n                        '合规性确认'\n                    ]\n                },\n                data_quality_impact: 'medium',\n                criticality: 'high'\n            },\n            {\n                id: 'rel_indicators_to_api',\n                source_id: 'storage_national_indicators',\n                target_id: 'output_api',\n                relationship_type: 'data_consumption',\n                transformation: {\n                    type: 'api_service',\n                    description: '国家指标数据API服务',\n                    fields_mapping: {\n                        'indicator_value': 'api_response',\n                        'calculation_date': 'data_timestamp'\n                    },\n                    business_rules: [\n                        'RESTful API标准',\n                        '访问权限控制',\n                        '数据格式标准化'\n                    ]\n                },\n                data_quality_impact: 'medium',\n                criticality: 'medium'\n            }\n        ];\n        \n        for (const relationship of relationships) {\n            this.relationships.set(relationship.id, {\n                ...relationship,\n                created_at: new Date().toISOString(),\n                last_updated: new Date().toISOString(),\n                status: 'active',\n                lineage_version: '1.0.0'\n            });\n            \n            // 构建血缘图\n            if (!this.lineageGraph.has(relationship.source_id)) {\n                this.lineageGraph.set(relationship.source_id, {\n                    downstream: new Set(),\n                    upstream: new Set()\n                });\n            }\n            if (!this.lineageGraph.has(relationship.target_id)) {\n                this.lineageGraph.set(relationship.target_id, {\n                    downstream: new Set(),\n                    upstream: new Set()\n                });\n            }\n            \n            this.lineageGraph.get(relationship.source_id).downstream.add(relationship.target_id);\n            this.lineageGraph.get(relationship.target_id).upstream.add(relationship.source_id);\n        }\n        \n        logger.info(`🔗 已构建 ${this.relationships.size} 个血缘关系`);\n    }\n    \n    /**\n     * 启动血缘追踪任务\n     */\n    async startTrackingTasks() {\n        // 血缘关系监控任务\n        const lineageMonitoringTask = setInterval(async () => {\n            await this.monitorLineageHealth();\n        }, MATH_CONSTANTS.TEN * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND); // 每10分钟\n        \n        // 影响分析更新任务\n        const impactAnalysisTask = setInterval(async () => {\n            await this.updateImpactAnalysis();\n        }, MATH_CONSTANTS.THIRTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND); // 每30分钟\n        \n        // 血缘统计任务\n        const statisticsTask = setInterval(async () => {\n            await this.updateFlowStatistics();\n        }, MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND); // 每小时\n        \n        this.trackingTasks.set('lineage_monitoring', lineageMonitoringTask);\n        this.trackingTasks.set('impact_analysis', impactAnalysisTask);\n        this.trackingTasks.set('statistics', statisticsTask);\n        \n        logger.info('🔄 血缘追踪任务已启动');\n    }\n    \n    /**\n     * 初始化影响分析引擎\n     */\n    async initializeImpactAnalysis() {\n        // 预计算常用的影响分析路径\n        const criticalNodes = Array.from(this.dataNodes.values())\n            .filter(node => node.tags && node.tags.includes('critical'));\n            \n        for (const node of criticalNodes) {\n            const impactAnalysis = await this.calculateImpactAnalysis(node.id);\n            this.impactAnalysisCache.set(node.id, {\n                ...impactAnalysis,\n                cached_at: new Date().toISOString(),\n                cache_ttl: 3600000 // 1小时\n            });\n        }\n        \n        logger.info(`🎯 已预计算 ${criticalNodes.length} 个关键节点的影响分析`);\n    }\n    \n    /**\n     * 追踪数据血缘\n     * @param {string} nodeId 数据节点ID\n     * @param {string} direction 追踪方向 (upstream/downstream/both)\n     * @param {number} depth 追踪深度\n     * @returns {Object} 血缘追踪结果\n     */\n    async traceLineage(nodeId, direction = 'both', depth = 5) {\n        const node = this.dataNodes.get(nodeId);\n        if (!node) {\n            throw new Error(`数据节点不存在: ${nodeId}`);\n        }\n        \n        const lineageResult = {\n            root_node: node,\n            direction: direction,\n            max_depth: depth,\n            traced_at: new Date().toISOString(),\n            upstream_lineage: {},\n            downstream_lineage: {},\n            lineage_paths: [],\n            statistics: {\n                total_nodes: 0,\n                total_relationships: 0,\n                max_depth_reached: 0\n            }\n        };\n        \n        // 上游血缘追踪\n        if (direction === 'upstream' || direction === 'both') {\n            lineageResult.upstream_lineage = await this.traceUpstream(nodeId, depth);\n        }\n        \n        // 下游血缘追踪\n        if (direction === 'downstream' || direction === 'both') {\n            lineageResult.downstream_lineage = await this.traceDownstream(nodeId, depth);\n        }\n        \n        // 生成血缘路径\n        lineageResult.lineage_paths = this.generateLineagePaths(nodeId, lineageResult);\n        \n        // 计算统计信息\n        lineageResult.statistics = this.calculateLineageStatistics(lineageResult);\n        \n        logger.info(`🔍 完成节点 ${nodeId} 的血缘追踪`);\n        this.emit('lineage:traced', lineageResult);\n        \n        return lineageResult;\n    }\n    \n    /**\n     * 上游血缘追踪\n     * @param {string} nodeId 节点ID\n     * @param {number} depth 剩余深度\n     * @param {Set} visited 已访问节点\n     * @returns {Object} 上游血缘\n     */\n    async traceUpstream(nodeId, depth, visited = new Set()) {\n        if (depth <= 0 || visited.has(nodeId)) {\n            return {};\n        }\n        \n        visited.add(nodeId);\n        const lineage = this.lineageGraph.get(nodeId);\n        if (!lineage || !lineage.upstream.size) {\n            return {};\n        }\n        \n        const upstreamNodes = {};\n        \n        for (const upstreamNodeId of lineage.upstream) {\n            const upstreamNode = this.dataNodes.get(upstreamNodeId);\n            const relationship = this.findRelationship(upstreamNodeId, nodeId);\n            \n            upstreamNodes[upstreamNodeId] = {\n                node: upstreamNode,\n                relationship: relationship,\n                upstream: await this.traceUpstream(upstreamNodeId, depth - 1, new Set(visited))\n            };\n        }\n        \n        return upstreamNodes;\n    }\n    \n    /**\n     * 下游血缘追踪\n     * @param {string} nodeId 节点ID\n     * @param {number} depth 剩余深度\n     * @param {Set} visited 已访问节点\n     * @returns {Object} 下游血缘\n     */\n    async traceDownstream(nodeId, depth, visited = new Set()) {\n        if (depth <= 0 || visited.has(nodeId)) {\n            return {};\n        }\n        \n        visited.add(nodeId);\n        const lineage = this.lineageGraph.get(nodeId);\n        if (!lineage || !lineage.downstream.size) {\n            return {};\n        }\n        \n        const downstreamNodes = {};\n        \n        for (const downstreamNodeId of lineage.downstream) {\n            const downstreamNode = this.dataNodes.get(downstreamNodeId);\n            const relationship = this.findRelationship(nodeId, downstreamNodeId);\n            \n            downstreamNodes[downstreamNodeId] = {\n                node: downstreamNode,\n                relationship: relationship,\n                downstream: await this.traceDownstream(downstreamNodeId, depth - 1, new Set(visited))\n            };\n        }\n        \n        return downstreamNodes;\n    }\n    \n    /**\n     * 计算影响分析\n     * @param {string} nodeId 节点ID\n     * @param {string} changeType 变更类型\n     * @returns {Object} 影响分析结果\n     */\n    async calculateImpactAnalysis(nodeId, changeType = 'data_change') {\n        // 检查缓存\n        const cacheKey = `${nodeId}_${changeType}`;\n        const cached = this.impactAnalysisCache.get(cacheKey);\n        if (cached && Date.now() - new Date(cached.cached_at).getTime() < cached.cache_ttl) {\n            return cached;\n        }\n        \n        const node = this.dataNodes.get(nodeId);\n        if (!node) {\n            throw new Error(`数据节点不存在: ${nodeId}`);\n        }\n        \n        const impactAnalysis = {\n            source_node: node,\n            change_type: changeType,\n            analyzed_at: new Date().toISOString(),\n            direct_impact: {\n                affected_nodes: [],\n                affected_relationships: [],\n                impact_score: 0\n            },\n            indirect_impact: {\n                affected_nodes: [],\n                affected_relationships: [],\n                impact_score: 0\n            },\n            total_impact: {\n                total_affected_nodes: 0,\n                total_affected_relationships: 0,\n                overall_impact_score: 0,\n                criticality_level: 'low'\n            },\n            mitigation_strategies: [],\n            rollback_plan: {}\n        };\n        \n        // 直接影响分析\n        await this.analyzeDirectImpact(nodeId, impactAnalysis);\n        \n        // 间接影响分析\n        await this.analyzeIndirectImpact(nodeId, impactAnalysis);\n        \n        // 计算总体影响\n        this.calculateTotalImpact(impactAnalysis);\n        \n        // 生成缓解策略\n        this.generateMitigationStrategies(impactAnalysis);\n        \n        // 生成回滚计划\n        this.generateRollbackPlan(impactAnalysis);\n        \n        // 更新缓存\n        this.impactAnalysisCache.set(cacheKey, {\n            ...impactAnalysis,\n            cached_at: new Date().toISOString(),\n            cache_ttl: 3600000\n        });\n        \n        logger.info(`🎯 完成节点 ${nodeId} 的影响分析`);\n        this.emit('impact:analyzed', impactAnalysis);\n        \n        return impactAnalysis;\n    }\n    \n    /**\n     * 记录数据变更\n     * @param {string} nodeId 节点ID\n     * @param {Object} changeDetails 变更详情\n     */\n    async recordDataChange(nodeId, changeDetails) {\n        const changeId = this.generateChangeId();\n        const changeRecord = {\n            change_id: changeId,\n            node_id: nodeId,\n            change_type: changeDetails.type,\n            change_description: changeDetails.description,\n            changed_fields: changeDetails.fields || [],\n            change_impact: changeDetails.impact || 'unknown',\n            changed_by: changeDetails.user || 'system',\n            change_reason: changeDetails.reason || '',\n            timestamp: new Date().toISOString(),\n            before_state: changeDetails.before || {},\n            after_state: changeDetails.after || {},\n            validation_status: 'pending'\n        };\n        \n        this.changeHistory.set(changeId, changeRecord);\n        \n        // 触发影响分析\n        const impactAnalysis = await this.calculateImpactAnalysis(nodeId, changeDetails.type);\n        changeRecord.impact_analysis = impactAnalysis;\n        changeRecord.validation_status = 'completed';\n        \n        logger.info(`📝 记录数据变更: ${changeId}`);\n        this.emit('change:recorded', changeRecord);\n        \n        return changeRecord;\n    }\n    \n    /**\n     * 生成血缘可视化图\n     * @param {string} nodeId 中心节点ID\n     * @param {Object} options 可视化选项\n     * @returns {Object} 可视化图数据\n     */\n    async generateLineageVisualization(nodeId, options = {}) {\n        const {\n            depth = 3,\n            direction = 'both',\n            includeMetadata = true,\n            layout = 'hierarchical'\n        } = options;\n        \n        const lineageData = await this.traceLineage(nodeId, direction, depth);\n        \n        const visualization = {\n            graph_id: this.generateVisualizationId(),\n            center_node: nodeId,\n            layout: layout,\n            generated_at: new Date().toISOString(),\n            nodes: [],\n            edges: [],\n            metadata: includeMetadata ? this.generateVisualizationMetadata(lineageData) : null\n        };\n        \n        // 生成节点数据\n        const allNodes = this.extractAllNodes(lineageData);\n        for (const [id, nodeData] of allNodes) {\n            visualization.nodes.push({\n                id: id,\n                label: nodeData.name,\n                type: nodeData.type,\n                category: nodeData.category,\n                size: this.calculateNodeSize(nodeData),\n                color: this.getNodeColor(nodeData.type),\n                metadata: includeMetadata ? nodeData : null\n            });\n        }\n        \n        // 生成边数据\n        const allRelationships = this.extractAllRelationships(lineageData);\n        for (const relationship of allRelationships) {\n            visualization.edges.push({\n                id: relationship.id,\n                source: relationship.source_id,\n                target: relationship.target_id,\n                label: relationship.relationship_type,\n                weight: this.calculateEdgeWeight(relationship),\n                color: this.getEdgeColor(relationship.relationship_type),\n                metadata: includeMetadata ? relationship : null\n            });\n        }\n        \n        logger.info(`🎨 生成血缘可视化图: ${visualization.graph_id}`);\n        this.emit('visualization:generated', visualization);\n        \n        return visualization;\n    }\n    \n    /**\n     * 生成血缘报告\n     * @param {string} reportType 报告类型\n     * @param {Object} options 报告选项\n     * @returns {Object} 血缘报告\n     */\n    async generateLineageReport(reportType = 'comprehensive', options = {}) {\n        const reportId = this.generateReportId(reportType);\n        \n        const report = {\n            report_id: reportId,\n            type: reportType,\n            generated_at: new Date().toISOString(),\n            time_range: options.timeRange || '30d',\n            sections: {}\n        };\n        \n        // 血缘概览\n        if (reportType === 'comprehensive' || reportType === 'overview') {\n            report.sections.overview = await this.generateOverviewSection();\n        }\n        \n        // 数据流分析\n        if (reportType === 'comprehensive' || reportType === 'flow_analysis') {\n            report.sections.flow_analysis = await this.generateFlowAnalysisSection();\n        }\n        \n        // 影响分析汇总\n        if (reportType === 'comprehensive' || reportType === 'impact_summary') {\n            report.sections.impact_summary = await this.generateImpactSummarySection();\n        }\n        \n        // 变更历史\n        if (reportType === 'comprehensive' || reportType === 'change_history') {\n            report.sections.change_history = await this.generateChangeHistorySection(options.timeRange);\n        }\n        \n        // 优化建议\n        if (reportType === 'comprehensive' || reportType === 'optimization') {\n            report.sections.optimization = await this.generateOptimizationSection();\n        }\n        \n        this.lineageReports.set(reportId, report);\n        \n        logger.info(`📊 生成血缘报告: ${reportId}`);\n        this.emit('report:generated', report);\n        \n        return report;\n    }\n    \n    // 辅助方法实现\n    findRelationship(sourceId, targetId) {\n        for (const [id, relationship] of this.relationships) {\n            if (relationship.source_id === sourceId && relationship.target_id === targetId) {\n                return relationship;\n            }\n        }\n        return null;\n    }\n    \n    generateLineagePaths(nodeId, lineageResult) {\n        const paths = [];\n        \n        // 生成从源到目标的完整路径\n        const generatePaths = (current, path, direction, lineageData) => {\n            if (direction === 'downstream') {\n                for (const [nextNodeId, nextData] of Object.entries(lineageData)) {\n                    const newPath = [...path, {\n                        node_id: nextNodeId,\n                        node_name: nextData.node.name,\n                        relationship: nextData.relationship\n                    }];\n                    \n                    paths.push({\n                        path_id: `path_${paths.length + 1}`,\n                        direction: direction,\n                        nodes: newPath,\n                        length: newPath.length\n                    });\n                    \n                    if (nextData.downstream && Object.keys(nextData.downstream).length > 0) {\n                        generatePaths(nextNodeId, newPath, direction, nextData.downstream);\n                    }\n                }\n            }\n        };\n        \n        if (lineageResult.downstream_lineage) {\n            generatePaths(nodeId, [{\n                node_id: nodeId,\n                node_name: lineageResult.root_node.name,\n                relationship: null\n            }], 'downstream', lineageResult.downstream_lineage);\n        }\n        \n        return paths;\n    }\n    \n    calculateLineageStatistics(lineageResult) {\n        const allNodes = this.extractAllNodes(lineageResult);\n        const allRelationships = this.extractAllRelationships(lineageResult);\n        \n        return {\n            total_nodes: allNodes.size,\n            total_relationships: allRelationships.length,\n            max_depth_reached: this.calculateMaxDepth(lineageResult),\n            node_types: this.countNodeTypes(allNodes),\n            relationship_types: this.countRelationshipTypes(allRelationships)\n        };\n    }\n    \n    async analyzeDirectImpact(nodeId, impactAnalysis) {\n        const lineage = this.lineageGraph.get(nodeId);\n        if (!lineage) return;\n        \n        // 直接下游节点\n        for (const downstreamNodeId of lineage.downstream) {\n            const downstreamNode = this.dataNodes.get(downstreamNodeId);\n            const relationship = this.findRelationship(nodeId, downstreamNodeId);\n            \n            impactAnalysis.direct_impact.affected_nodes.push({\n                node: downstreamNode,\n                impact_type: 'direct_downstream',\n                criticality: relationship.criticality,\n                data_quality_impact: relationship.data_quality_impact\n            });\n            \n            impactAnalysis.direct_impact.affected_relationships.push(relationship);\n        }\n        \n        // 计算直接影响分数\n        impactAnalysis.direct_impact.impact_score = this.calculateImpactScore(\n            impactAnalysis.direct_impact.affected_nodes,\n            impactAnalysis.direct_impact.affected_relationships\n        );\n    }\n    \n    async analyzeIndirectImpact(nodeId, impactAnalysis) {\n        const downstreamLineage = await this.traceDownstream(nodeId, 5);\n        \n        const collectIndirectNodes = (lineageData, depth = 1) => {\n            for (const [nodeId, nodeData] of Object.entries(lineageData)) {\n                if (depth > 1) { // 间接影响从第二层开始\n                    impactAnalysis.indirect_impact.affected_nodes.push({\n                        node: nodeData.node,\n                        impact_type: 'indirect_downstream',\n                        depth: depth,\n                        criticality: nodeData.relationship.criticality\n                    });\n                    \n                    impactAnalysis.indirect_impact.affected_relationships.push(nodeData.relationship);\n                }\n                \n                if (nodeData.downstream) {\n                    collectIndirectNodes(nodeData.downstream, depth + 1);\n                }\n            }\n        };\n        \n        collectIndirectNodes(downstreamLineage);\n        \n        // 计算间接影响分数\n        impactAnalysis.indirect_impact.impact_score = this.calculateImpactScore(\n            impactAnalysis.indirect_impact.affected_nodes,\n            impactAnalysis.indirect_impact.affected_relationships\n        ) * 0.5; // 间接影响权重降低\n    }\n    \n    calculateTotalImpact(impactAnalysis) {\n        const totalNodes = impactAnalysis.direct_impact.affected_nodes.length + \n                          impactAnalysis.indirect_impact.affected_nodes.length;\n        const totalRelationships = impactAnalysis.direct_impact.affected_relationships.length + \n                                  impactAnalysis.indirect_impact.affected_relationships.length;\n        const overallScore = impactAnalysis.direct_impact.impact_score + \n                           impactAnalysis.indirect_impact.impact_score;\n        \n        impactAnalysis.total_impact = {\n            total_affected_nodes: totalNodes,\n            total_affected_relationships: totalRelationships,\n            overall_impact_score: Math.round(overallScore),\n            criticality_level: this.determineCriticalityLevel(overallScore, totalNodes)\n        };\n    }\n    \n    generateMitigationStrategies(impactAnalysis) {\n        const strategies = [];\n        \n        if (impactAnalysis.total_impact.criticality_level === 'high') {\n            strategies.push({\n                strategy: 'staged_rollout',\n                description: '分阶段部署变更，逐步验证影响',\n                priority: 'high'\n            });\n            strategies.push({\n                strategy: 'backup_verification',\n                description: '确保所有受影响数据有完整备份',\n                priority: 'high'\n            });\n        }\n        \n        if (impactAnalysis.total_impact.total_affected_nodes > 5) {\n            strategies.push({\n                strategy: 'parallel_testing',\n                description: '在测试环境并行验证所有受影响节点',\n                priority: 'medium'\n            });\n        }\n        \n        strategies.push({\n            strategy: 'monitoring_enhancement',\n            description: '加强变更期间的监控和告警',\n            priority: 'medium'\n        });\n        \n        impactAnalysis.mitigation_strategies = strategies;\n    }\n    \n    generateRollbackPlan(impactAnalysis) {\n        impactAnalysis.rollback_plan = {\n            rollback_strategy: 'automated_rollback',\n            estimated_rollback_time: '15_minutes',\n            rollback_steps: [\n                '停止受影响的数据处理流程',\n                '恢复数据到变更前状态',\n                '重启相关服务',\n                '验证数据一致性',\n                '恢复正常监控'\n            ],\n            rollback_validation: [\n                '数据完整性检查',\n                '业务流程验证',\n                '性能指标确认'\n            ]\n        };\n    }\n    \n    // 监控和统计方法\n    async monitorLineageHealth() {\n        logger.info('🔍 开始血缘健康监控...');\n        \n        const healthReport = {\n            timestamp: new Date().toISOString(),\n            total_nodes: this.dataNodes.size,\n            total_relationships: this.relationships.size,\n            healthy_nodes: 0,\n            unhealthy_nodes: 0,\n            broken_relationships: 0,\n            issues: []\n        };\n        \n        // 检查节点健康状态\n        for (const [nodeId, node] of this.dataNodes) {\n            if (node.status === 'active') {\n                healthReport.healthy_nodes++;\n            } else {\n                healthReport.unhealthy_nodes++;\n                healthReport.issues.push({\n                    type: 'unhealthy_node',\n                    node_id: nodeId,\n                    issue: `节点状态异常: ${node.status}`\n                });\n            }\n        }\n        \n        // 检查关系完整性\n        for (const [relId, relationship] of this.relationships) {\n            const sourceExists = this.dataNodes.has(relationship.source_id);\n            const targetExists = this.dataNodes.has(relationship.target_id);\n            \n            if (!sourceExists || !targetExists) {\n                healthReport.broken_relationships++;\n                healthReport.issues.push({\n                    type: 'broken_relationship',\n                    relationship_id: relId,\n                    issue: `关系引用的节点不存在`\n                });\n            }\n        }\n        \n        if (healthReport.issues.length > 0) {\n            this.emit('lineage:health_issues', healthReport);\n        }\n        \n        logger.info(`✅ 血缘健康监控完成，发现 ${healthReport.issues.length} 个问题`);\n    }\n    \n    async updateImpactAnalysis() {\n        logger.info('🎯 更新影响分析缓存...');\n        \n        // 清理过期缓存\n        const now = Date.now();\n        for (const [key, cached] of this.impactAnalysisCache) {\n            if (now - new Date(cached.cached_at).getTime() > cached.cache_ttl) {\n                this.impactAnalysisCache.delete(key);\n            }\n        }\n        \n        logger.info(`🗑️ 清理了过期的影响分析缓存`);\n    }\n    \n    async updateFlowStatistics() {\n        logger.info('📊 更新数据流向统计...');\n        \n        const statistics = {\n            timestamp: new Date().toISOString(),\n            node_statistics: {\n                by_type: {},\n                by_category: {},\n                by_owner: {}\n            },\n            relationship_statistics: {\n                by_type: {},\n                by_criticality: {},\n                by_data_quality_impact: {}\n            },\n            flow_patterns: {\n                most_connected_nodes: [],\n                critical_paths: [],\n                bottleneck_nodes: []\n            }\n        };\n        \n        // 节点统计\n        for (const [nodeId, node] of this.dataNodes) {\n            // 按类型统计\n            statistics.node_statistics.by_type[node.type] = \n                (statistics.node_statistics.by_type[node.type] || 0) + 1;\n            \n            // 按分类统计\n            statistics.node_statistics.by_category[node.category] = \n                (statistics.node_statistics.by_category[node.category] || 0) + 1;\n            \n            // 按所有者统计\n            statistics.node_statistics.by_owner[node.owner] = \n                (statistics.node_statistics.by_owner[node.owner] || 0) + 1;\n        }\n        \n        // 关系统计\n        for (const [relId, relationship] of this.relationships) {\n            // 按类型统计\n            statistics.relationship_statistics.by_type[relationship.relationship_type] = \n                (statistics.relationship_statistics.by_type[relationship.relationship_type] || 0) + 1;\n            \n            // 按关键性统计\n            statistics.relationship_statistics.by_criticality[relationship.criticality] = \n                (statistics.relationship_statistics.by_criticality[relationship.criticality] || 0) + 1;\n            \n            // 按数据质量影响统计\n            statistics.relationship_statistics.by_data_quality_impact[relationship.data_quality_impact] = \n                (statistics.relationship_statistics.by_data_quality_impact[relationship.data_quality_impact] || 0) + 1;\n        }\n        \n        this.flowStatistics.set('current', statistics);\n        \n        logger.info('📈 数据流向统计更新完成');\n        this.emit('statistics:updated', statistics);\n    }\n    \n    // 辅助方法\n    generateChangeId() {\n        return `CHG_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    generateVisualizationId() {\n        return `VIZ_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    generateReportId(type) {\n        return `${type.toUpperCase()}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    calculateImpactScore(nodes, relationships) {\n        let score = 0;\n        \n        // 节点影响分数\n        for (const nodeData of nodes) {\n            switch (nodeData.criticality) {\n                case 'critical': score += 10; break;\n                case 'high': score += 7; break;\n                case 'medium': score += 4; break;\n                case 'low': score += 1; break;\n            }\n        }\n        \n        // 关系影响分数\n        for (const relationship of relationships) {\n            switch (relationship.data_quality_impact) {\n                case 'high': score += 5; break;\n                case 'medium': score += 3; break;\n                case 'low': score += 1; break;\n            }\n        }\n        \n        return score;\n    }\n    \n    determineCriticalityLevel(score, nodeCount) {\n        if (score > 50 || nodeCount > 10) return 'high';\n        if (score > 20 || nodeCount > 5) return 'medium';\n        return 'low';\n    }\n    \n    extractAllNodes(lineageResult) {\n        const nodes = new Map();\n        \n        // 添加根节点\n        nodes.set(lineageResult.root_node.id, lineageResult.root_node);\n        \n        // 递归提取所有节点\n        const extractNodes = (lineageData) => {\n            for (const [nodeId, nodeData] of Object.entries(lineageData)) {\n                nodes.set(nodeId, nodeData.node);\n                if (nodeData.upstream) extractNodes(nodeData.upstream);\n                if (nodeData.downstream) extractNodes(nodeData.downstream);\n            }\n        };\n        \n        if (lineageResult.upstream_lineage) extractNodes(lineageResult.upstream_lineage);\n        if (lineageResult.downstream_lineage) extractNodes(lineageResult.downstream_lineage);\n        \n        return nodes;\n    }\n    \n    extractAllRelationships(lineageResult) {\n        const relationships = [];\n        \n        const extractRelationships = (lineageData) => {\n            for (const [nodeId, nodeData] of Object.entries(lineageData)) {\n                if (nodeData.relationship) {\n                    relationships.push(nodeData.relationship);\n                }\n                if (nodeData.upstream) extractRelationships(nodeData.upstream);\n                if (nodeData.downstream) extractRelationships(nodeData.downstream);\n            }\n        };\n        \n        if (lineageResult.upstream_lineage) extractRelationships(lineageResult.upstream_lineage);\n        if (lineageResult.downstream_lineage) extractRelationships(lineageResult.downstream_lineage);\n        \n        return relationships;\n    }\n    \n    calculateMaxDepth(lineageResult) {\n        let maxDepth = 0;\n        \n        const calculateDepth = (lineageData, currentDepth = 1) => {\n            maxDepth = Math.max(maxDepth, currentDepth);\n            for (const [nodeId, nodeData] of Object.entries(lineageData)) {\n                if (nodeData.upstream) calculateDepth(nodeData.upstream, currentDepth + 1);\n                if (nodeData.downstream) calculateDepth(nodeData.downstream, currentDepth + 1);\n            }\n        };\n        \n        if (lineageResult.upstream_lineage) calculateDepth(lineageResult.upstream_lineage);\n        if (lineageResult.downstream_lineage) calculateDepth(lineageResult.downstream_lineage);\n        \n        return maxDepth;\n    }\n    \n    countNodeTypes(nodes) {\n        const counts = {};\n        for (const [nodeId, node] of nodes) {\n            counts[node.type] = (counts[node.type] || 0) + 1;\n        }\n        return counts;\n    }\n    \n    countRelationshipTypes(relationships) {\n        const counts = {};\n        for (const relationship of relationships) {\n            counts[relationship.relationship_type] = (counts[relationship.relationship_type] || 0) + 1;\n        }\n        return counts;\n    }\n    \n    calculateNodeSize(node) {\n        // 根据节点重要性计算大小\n        if (node.tags && node.tags.includes('critical')) return 'large';\n        if (node.tags && node.tags.includes('business_critical')) return 'medium';\n        return 'small';\n    }\n    \n    getNodeColor(nodeType) {\n        const colors = {\n            'source': '#4CAF50',\n            'process': '#2196F3',\n            'storage': '#FF9800',\n            'output': '#9C27B0',\n            'reference': '#607D8B'\n        };\n        return colors[nodeType] || '#9E9E9E';\n    }\n    \n    getEdgeColor(relationshipType) {\n        const colors = {\n            'data_flow': '#2196F3',\n            'reference': '#4CAF50',\n            'data_consumption': '#FF5722'\n        };\n        return colors[relationshipType] || '#9E9E9E';\n    }\n    \n    calculateEdgeWeight(relationship) {\n        switch (relationship.criticality) {\n            case 'critical': return 5;\n            case 'high': return 3;\n            case 'medium': return 2;\n            case 'low': return 1;\n            default: return 1;\n        }\n    }\n    \n    generateVisualizationMetadata(lineageData) {\n        return {\n            total_nodes: this.extractAllNodes(lineageData).size,\n            total_edges: this.extractAllRelationships(lineageData).length,\n            max_depth: this.calculateMaxDepth(lineageData),\n            generation_time: new Date().toISOString()\n        };\n    }\n    \n    // 报告生成方法\n    async generateOverviewSection() {\n        return {\n            total_nodes: this.dataNodes.size,\n            total_relationships: this.relationships.size,\n            node_distribution: {\n                sources: Array.from(this.dataNodes.values()).filter(n => n.type === 'source').length,\n                processes: Array.from(this.dataNodes.values()).filter(n => n.type === 'process').length,\n                storage: Array.from(this.dataNodes.values()).filter(n => n.type === 'storage').length,\n                outputs: Array.from(this.dataNodes.values()).filter(n => n.type === 'output').length\n            },\n            health_status: 'healthy'\n        };\n    }\n    \n    async generateFlowAnalysisSection() {\n        return {\n            critical_flows: [\n                '能源数据 → 碳排放计算 → 国家指标',\n                '生产数据 → 国家指标计算',\n                '碳排放数据 → 申报报告'\n            ],\n            flow_efficiency: 95,\n            bottlenecks: [],\n            optimization_opportunities: [\n                '优化碳排放计算频率',\n                '增加数据缓存机制'\n            ]\n        };\n    }\n    \n    async generateImpactSummarySection() {\n        return {\n            high_impact_nodes: [\n                'source_ems_energy',\n                'process_carbon_calculation',\n                'storage_carbon_emissions'\n            ],\n            recent_changes: this.changeHistory.size,\n            impact_trends: 'stable'\n        };\n    }\n    \n    async generateChangeHistorySection(timeRange) {\n        const changes = Array.from(this.changeHistory.values())\n            .filter(change => {\n                const changeTime = new Date(change.timestamp);\n                const cutoffTime = new Date(Date.now() - this.parseTimeRange(timeRange));\n                return changeTime >= cutoffTime;\n            });\n        \n        return {\n            total_changes: changes.length,\n            changes_by_type: this.groupChangesByType(changes),\n            recent_changes: changes.slice(0, 10)\n        };\n    }\n    \n    async generateOptimizationSection() {\n        return {\n            recommendations: [\n                {\n                    type: 'performance',\n                    description: '优化数据血缘追踪性能',\n                    priority: 'medium',\n                    estimated_impact: 'high'\n                },\n                {\n                    type: 'monitoring',\n                    description: '增强血缘健康监控',\n                    priority: 'high',\n                    estimated_impact: 'medium'\n                },\n                {\n                    type: 'automation',\n                    description: '自动化影响分析流程',\n                    priority: 'low',\n                    estimated_impact: 'medium'\n                }\n            ],\n            optimization_score: 85\n        };\n    }\n    \n    parseTimeRange(timeRange) {\n        const ranges = {\n            '1d': 24 * 60 * 60 * 1000,\n            '7d': 7 * 24 * 60 * 60 * 1000,\n            '30d': 30 * 24 * 60 * 60 * 1000,\n            '90d': 90 * 24 * 60 * 60 * 1000\n        };\n        return ranges[timeRange] || ranges['30d'];\n    }\n    \n    groupChangesByType(changes) {\n        const groups = {};\n        for (const change of changes) {\n            groups[change.change_type] = (groups[change.change_type] || 0) + 1;\n        }\n        return groups;\n    }\n    \n    /**\n     * 停止血缘追踪服务\n     */\n    async stop() {\n        logger.info('🛑 停止数据血缘追踪服务...');\n        \n        // 停止所有追踪任务\n        for (const [taskName, taskId] of this.trackingTasks) {\n            clearInterval(taskId);\n            logger.info(`⏹️ 已停止任务: ${taskName}`);\n        }\n        \n        this.trackingTasks.clear();\n        \n        logger.info('✅ 数据血缘追踪服务已停止');\n        this.emit('lineage:stopped');\n    }\n    \n    /**\n     * 获取服务状态\n     * @returns {Object} 服务状态信息\n     */\n    getStatus() {\n        return {\n            service_name: 'DataLineageService',\n            status: 'running',\n            uptime: Date.now() - this.startTime,\n            statistics: {\n                total_nodes: this.dataNodes.size,\n                total_relationships: this.relationships.size,\n                cached_impact_analyses: this.impactAnalysisCache.size,\n                change_records: this.changeHistory.size,\n                active_tasks: this.trackingTasks.size\n            },\n            last_health_check: new Date().toISOString()\n        };\n    }\n}\n\nexport default DataLineageService;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]