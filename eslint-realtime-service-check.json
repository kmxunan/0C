[{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/RealTimeDataQualityService.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token }","line":80,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 实时数据质量监控与预警服务\n * 实现数据质量的实时监控、异常检测、自动预警和质量评分\n * 为零碳园区数字孪生系统提供全面的数据质量保障\n */\n\nimport { EventEmitter } from 'events';\nimport logger from '../../shared/utils/logger.js';\nimport { MATH_CONSTANTS } from '../../shared/constants/MathConstants.js';\n\nclass RealTimeDataQualityService extends EventEmitter {\n    constructor() {\n        super();\n        \n        // 数据质量规则\n        this.qualityRules = new Map();\n        \n        // 监控任务\n        this.monitoringTasks = new Map();\n        \n        // 质量指标\n        this.qualityMetrics = new Map();\n        \n        // 异常检测器\n        this.anomalyDetectors = new Map();\n        \n        // 预警配置\n        this.alertConfigs = new Map();\n        \n        // 质量报告\n        this.qualityReports = new Map();\n        \n        // 实时质量状态\n        this.realTimeStatus = new Map();\n        \n        // 质量趋势数据\n        this.qualityTrends = new Map();\n        \n        // 修复建议\n        this.repairSuggestions = new Map();\n        \n        this.startTime = Date.now();\n        this.init();\n    }\n    \n    /**\n     * 初始化数据质量监控服务\n     */\n    async init() {\n        try {\n            logger.info('📊 实时数据质量监控服务启动中...');\n            \n            // 初始化质量规则\n            await this.initializeQualityRules();\n            \n            // 初始化异常检测器\n            await this.initializeAnomalyDetectors();\n            \n            // 初始化预警配置\n            await this.initializeAlertConfigs();\n            \n            // 启动实时监控\n            await this.startRealTimeMonitoring();\n            \n            // 初始化质量指标\n            await this.initializeQualityMetrics();\n            \n            logger.info('✅ 实时数据质量监控服务启动完成');\n            this.emit('quality:ready');\n        } catch (error) {\n            return false;\n        }\n    }\n}\n\nexport default RealTimeDataQualityService; {\n            logger.error('实时数据质量监控服务启动失败:', error);\n            throw error;\n        }\n    }\n    \n    async getDetectionData(detector) {\n        // 模拟获取异常检测数据\n        const baseData = await this.getTestData('ems_energy_data');\n        return baseData.map(record => ({\n            ...record,\n            timestamp: record.measurement_time,\n            value: record.consumption_amount\n        }));\n    }\n    \n    detectZScoreAnomalies(data, parameters) {\n        const anomalies = [];\n        if (data.length < parameters.min_samples) return anomalies;\n        \n        const values = data.map(d => d.value || 0);\n        const mean = values.reduce((a, b) => a + b, 0) / values.length;\n        const variance = values.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / values.length;\n        const stdDev = Math.sqrt(variance);\n        \n        data.forEach((record, index) => {\n            const zScore = Math.abs((record.value - mean) / stdDev);\n            if (zScore > parameters.threshold) {\n                anomalies.push({\n                    type: 'statistical_outlier',\n                    record_id: record.meter_id || index,\n                    value: record.value,\n                    z_score: zScore,\n                    threshold: parameters.threshold,\n                    severity: zScore > parameters.threshold * 1.5 ? 'high' : 'medium',\n                    description: `统计异常值检测: Z-Score ${zScore.toFixed(2)} 超过阈值 ${parameters.threshold}`\n                });\n            }\n        });\n        \n        return anomalies;\n    }\n    \n    detectTrendAnomalies(data, parameters) {\n        const anomalies = [];\n        if (data.length < parameters.window_size) return anomalies;\n        \n        for (let i = parameters.window_size; i < data.length; i++) {\n            const window = data.slice(i - parameters.window_size, i);\n            const windowMean = window.reduce((sum, d) => sum + d.value, 0) / window.length;\n            const currentValue = data[i].value;\n            \n            const deviation = Math.abs(currentValue - windowMean) / windowMean;\n            if (deviation > parameters.deviation_threshold) {\n                anomalies.push({\n                    type: 'trend_anomaly',\n                    record_id: data[i].meter_id || i,\n                    value: currentValue,\n                    expected_value: windowMean,\n                    deviation: deviation,\n                    threshold: parameters.deviation_threshold,\n                    severity: deviation > parameters.deviation_threshold * 2 ? 'high' : 'medium',\n                    description: `趋势异常检测: 偏差 ${(deviation * 100).toFixed(2)}% 超过阈值 ${(parameters.deviation_threshold * 100).toFixed(2)}%`\n                });\n            }\n        }\n        \n        return anomalies;\n    }\n    \n    detectPatternAnomalies(data, parameters) {\n        const anomalies = [];\n        // 简化的模式异常检测\n        const values = data.map(d => d.value || 0);\n        const mean = values.reduce((a, b) => a + b, 0) / values.length;\n        const threshold = mean * 2; // 简化阈值\n        \n        data.forEach((record, index) => {\n            if (record.value > threshold) {\n                anomalies.push({\n                    type: 'pattern_anomaly',\n                    record_id: record.meter_id || index,\n                    value: record.value,\n                    threshold: threshold,\n                    severity: 'medium',\n                    description: `模式异常检测: 值 ${record.value} 超过模式阈值 ${threshold.toFixed(2)}`\n                });\n            }\n        });\n        \n        return anomalies;\n    }\n    \n    detectRuleViolations(data, parameters) {\n        const anomalies = [];\n        \n        data.forEach((record, index) => {\n            // 检查业务规则违反\n            if (record.value <= 0) {\n                anomalies.push({\n                    type: 'rule_violation',\n                    record_id: record.meter_id || index,\n                    value: record.value,\n                    rule: 'value_must_be_positive',\n                    severity: 'high',\n                    description: `业务规则违反: 值必须大于0，当前值为 ${record.value}`\n                });\n            }\n            \n            // 检查时间规则\n            const recordTime = new Date(record.timestamp).getTime();\n            const currentTime = Date.now();\n            if (recordTime > currentTime + 300000) { // 5分钟未来时间容错\n                anomalies.push({\n                    type: 'rule_violation',\n                    record_id: record.meter_id || index,\n                    timestamp: record.timestamp,\n                    rule: 'timestamp_cannot_be_future',\n                    severity: 'medium',\n                    description: `业务规则违反: 时间戳不能是未来时间`\n                });\n            }\n        });\n        \n        return anomalies;\n    }\n    \n    async evaluateAlertConditions(alertConfig) {\n        const conditions = alertConfig.trigger_conditions;\n        \n        // 检查质量分数条件\n        if (conditions.quality_score) {\n            const latestCheck = this.realTimeStatus.get('latest_check');\n            if (latestCheck && latestCheck.quality_scores) {\n                for (const category of conditions.category || []) {\n                    const categoryScore = latestCheck.quality_scores[category];\n                    if (categoryScore && this.evaluateCondition(categoryScore.final_score, conditions.quality_score)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    evaluateCondition(value, condition) {\n        switch (condition.operator) {\n            case '<':\n                return value < condition.value;\n            case '<=':\n                return value <= condition.value;\n            case '>':\n                return value > condition.value;\n            case '>=':\n                return value >= condition.value;\n            case '==':\n                return value === condition.value;\n            case '!=':\n                return value !== condition.value;\n            default:\n                return false;\n        }\n    }\n    \n    async triggerAlert(alertConfig) {\n        const alert = {\n            id: `alert_${Date.now()}`,\n            config_id: alertConfig.id,\n            name: alertConfig.name,\n            severity: alertConfig.severity,\n            triggered_at: new Date().toISOString(),\n            status: 'active',\n            description: alertConfig.description\n        };\n        \n        logger.warn(`🚨 触发预警: ${alert.name} (${alert.severity})`);\n        \n        // 更新触发统计\n        alertConfig.trigger_count++;\n        alertConfig.last_triggered = alert.triggered_at;\n        \n        this.emit('alert:triggered', alert);\n        \n        return alert;\n    }\n    \n    calculateOverallQualityScore(qualityScores) {\n        const categoryWeights = {\n            energy: 0.25,\n            carbon: 0.30,\n            production: 0.20,\n            indicators: 0.25\n        };\n        \n        let totalWeight = 0;\n        let weightedSum = 0;\n        \n        for (const [category, scoreData] of Object.entries(qualityScores)) {\n            const weight = categoryWeights[category] || 0;\n            if (weight > 0 && scoreData.final_score !== undefined) {\n                totalWeight += weight;\n                weightedSum += scoreData.final_score * weight;\n            }\n        }\n        \n        return totalWeight > 0 ? weightedSum / totalWeight : 0;\n    }\n    \n    calculateAnomalyDetectionRate() {\n        // 模拟异常检测率计算\n        const totalDetections = Array.from(this.anomalyDetectors.values())\n            .reduce((sum, detector) => sum + detector.detection_count, 0);\n        const totalRecords = 10000; // 模拟总记录数\n        return totalRecords > 0 ? totalDetections / totalRecords : 0;\n    }\n    \n    calculateDataFreshnessScore() {\n        // 模拟数据时效性评分计算\n        return 0.95;\n    }\n    \n    /**\n     * 生成质量报告\n     */\n    async generateQualityReport() {\n        const report = {\n            id: `quality_report_${Date.now()}`,\n            generated_at: new Date().toISOString(),\n            period: {\n                start: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n                end: new Date().toISOString()\n            },\n            summary: {\n                overall_quality_score: this.qualityMetrics.get('overall_quality_score')?.current_value || 0,\n                total_rules_executed: Array.from(this.qualityRules.values())\n                    .reduce((sum, rule) => sum + rule.execution_count, 0),\n                total_anomalies_detected: Array.from(this.anomalyDetectors.values())\n                    .reduce((sum, detector) => sum + detector.detection_count, 0),\n                alerts_triggered: Array.from(this.alertConfigs.values())\n                    .reduce((sum, config) => sum + config.trigger_count, 0)\n            },\n            quality_metrics: Object.fromEntries(\n                Array.from(this.qualityMetrics.entries()).map(([id, metric]) => [\n                    id,\n                    {\n                        current_value: metric.current_value,\n                        target_value: metric.target_value,\n                        trend: metric.trend,\n                        achievement_rate: metric.target_value > 0 ? \n                            (metric.current_value / metric.target_value) : 0\n                    }\n                ])\n            ),\n            recommendations: this.generateQualityRecommendations()\n        };\n        \n        this.qualityReports.set(report.id, report);\n        logger.info(`📊 质量报告已生成: ${report.id}`);\n        \n        return report;\n    }\n    \n    generateQualityRecommendations() {\n        const recommendations = [];\n        \n        // 基于质量指标生成建议\n        for (const [metricId, metric] of this.qualityMetrics) {\n            if (metric.current_value < metric.target_value * 0.9) {\n                recommendations.push({\n                    type: 'quality_improvement',\n                    metric: metricId,\n                    priority: 'high',\n                    description: `${metric.name}低于目标值90%，建议加强数据质量管控`,\n                    suggested_actions: [\n                        '增加数据验证规则',\n                        '提高数据采集频率',\n                        '加强数据源监控'\n                    ]\n                });\n            }\n        }\n        \n        return recommendations;\n    }\n    \n    /**\n     * 获取服务状态\n     */\n    getServiceStatus() {\n        return {\n            service_name: 'RealTimeDataQualityService',\n            status: 'running',\n            uptime: Date.now() - this.startTime,\n            statistics: {\n                quality_rules: this.qualityRules.size,\n                anomaly_detectors: this.anomalyDetectors.size,\n                alert_configs: this.alertConfigs.size,\n                quality_metrics: this.qualityMetrics.size,\n                monitoring_tasks: this.monitoringTasks.size\n            },\n            latest_metrics: Object.fromEntries(\n                Array.from(this.qualityMetrics.entries()).map(([id, metric]) => [\n                    id,\n                    {\n                        value: metric.current_value,\n                        trend: metric.trend,\n                        last_updated: metric.last_updated\n                    }\n                ])\n            )\n        };\n    }\n    \n    /**\n     * 停止服务\n     */\n    async stop() {\n        logger.info('🛑 停止实时数据质量监控服务...');\n        \n        // 清理监控任务\n        for (const [taskName, task] of this.monitoringTasks) {\n            clearInterval(task);\n            logger.info(`✅ 已停止监控任务: ${taskName}`);\n        }\n        \n        this.monitoringTasks.clear();\n        this.emit('quality:stopped');\n        \n        logger.info('✅ 实时数据质量监控服务已停止');\n    }\n}\n    \n    /**\n     * 初始化数据质量规则\n     */\n    async initializeQualityRules() {\n        const rules = [\n            // 能源数据质量规则\n            {\n                id: 'energy_completeness',\n                name: '能源数据完整性',\n                category: 'energy',\n                data_source: 'ems_energy_data',\n                rule_type: 'completeness',\n                description: '检查能源消费数据的完整性',\n                validation_logic: {\n                    required_fields: ['meter_id', 'energy_type', 'consumption_amount', 'measurement_time'],\n                    null_tolerance: 0,\n                    missing_tolerance: 0.05 // 5%容错率\n                },\n                thresholds: {\n                    excellent: 0.98,\n                    good: 0.95,\n                    acceptable: 0.90,\n                    poor: 0.85\n                },\n                weight: 0.25,\n                enabled: true\n            },\n            {\n                id: 'energy_accuracy',\n                name: '能源数据准确性',\n                category: 'energy',\n                data_source: 'ems_energy_data',\n                rule_type: 'accuracy',\n                description: '检查能源消费数据的准确性',\n                validation_logic: {\n                    range_checks: {\n                        'consumption_amount': { min: 0, max: 10000 },\n                        'measurement_time': { format: 'ISO8601', future_tolerance: 300 }\n                    },\n                    business_rules: [\n                        'consumption_amount > 0',\n                        'measurement_time <= current_time + 5_minutes'\n                    ],\n                    outlier_detection: {\n                        method: 'z_score',\n                        threshold: 3,\n                        window_size: 100\n                    }\n                },\n                thresholds: {\n                    excellent: 0.99,\n                    good: 0.97,\n                    acceptable: 0.93,\n                    poor: 0.90\n                },\n                weight: 0.30,\n                enabled: true\n            },\n            {\n                id: 'energy_timeliness',\n                name: '能源数据时效性',\n                category: 'energy',\n                data_source: 'ems_energy_data',\n                rule_type: 'timeliness',\n                description: '检查能源数据的时效性',\n                validation_logic: {\n                    max_delay: 300, // 5分钟\n                    expected_frequency: 60, // 每分钟\n                    delay_calculation: 'current_time - measurement_time'\n                },\n                thresholds: {\n                    excellent: 0.98,\n                    good: 0.95,\n                    acceptable: 0.90,\n                    poor: 0.85\n                },\n                weight: 0.20,\n                enabled: true\n            },\n            {\n                id: 'energy_consistency',\n                name: '能源数据一致性',\n                category: 'energy',\n                data_source: 'ems_energy_data',\n                rule_type: 'consistency',\n                description: '检查能源数据的一致性',\n                validation_logic: {\n                    cross_validation: [\n                        'sum(sub_meters) == total_meter',\n                        'energy_type matches meter_type'\n                    ],\n                    temporal_consistency: {\n                        check_period: '1_hour',\n                        variance_threshold: 0.2\n                    }\n                },\n                thresholds: {\n                    excellent: 0.97,\n                    good: 0.94,\n                    acceptable: 0.90,\n                    poor: 0.85\n                },\n                weight: 0.25,\n                enabled: true\n            },\n            \n            // 碳排放数据质量规则\n            {\n                id: 'carbon_completeness',\n                name: '碳排放数据完整性',\n                category: 'carbon',\n                data_source: 'carbon_emissions',\n                rule_type: 'completeness',\n                description: '检查碳排放计算数据的完整性',\n                validation_logic: {\n                    required_fields: ['emission_id', 'emission_scope', 'emission_source', 'emission_amount', 'calculation_time'],\n                    null_tolerance: 0,\n                    missing_tolerance: 0.02\n                },\n                thresholds: {\n                    excellent: 0.99,\n                    good: 0.97,\n                    acceptable: 0.93,\n                    poor: 0.90\n                },\n                weight: 0.30,\n                enabled: true\n            },\n            {\n                id: 'carbon_accuracy',\n                name: '碳排放数据准确性',\n                category: 'carbon',\n                data_source: 'carbon_emissions',\n                rule_type: 'accuracy',\n                description: '检查碳排放计算结果的准确性',\n                validation_logic: {\n                    calculation_verification: {\n                        recalculate_sample: 0.1, // 重新计算10%样本\n                        tolerance: 0.01 // 1%误差容忍\n                    },\n                    factor_validation: {\n                        check_emission_factors: true,\n                        validate_calculation_method: true\n                    }\n                },\n                thresholds: {\n                    excellent: 0.99,\n                    good: 0.97,\n                    acceptable: 0.94,\n                    poor: 0.90\n                },\n                weight: 0.35,\n                enabled: true\n            },\n            {\n                id: 'carbon_validity',\n                name: '碳排放数据有效性',\n                category: 'carbon',\n                data_source: 'carbon_emissions',\n                rule_type: 'validity',\n                description: '检查碳排放数据的有效性',\n                validation_logic: {\n                    scope_validation: {\n                        valid_scopes: ['scope1', 'scope2', 'scope3'],\n                        scope_completeness: true\n                    },\n                    source_validation: {\n                        valid_sources: ['electricity', 'natural_gas', 'coal', 'diesel', 'gasoline'],\n                        source_mapping: true\n                    }\n                },\n                thresholds: {\n                    excellent: 0.98,\n                    good: 0.95,\n                    acceptable: 0.92,\n                    poor: 0.88\n                },\n                weight: 0.20,\n                enabled: true\n            },\n            {\n                id: 'carbon_traceability',\n                name: '碳排放数据可追溯性',\n                category: 'carbon',\n                data_source: 'carbon_emissions',\n                rule_type: 'traceability',\n                description: '检查碳排放数据的可追溯性',\n                validation_logic: {\n                    audit_trail: {\n                        required_metadata: ['calculation_method', 'emission_factor_source', 'data_source'],\n                        version_control: true\n                    },\n                    lineage_validation: {\n                        source_data_linkage: true,\n                        calculation_steps: true\n                    }\n                },\n                thresholds: {\n                    excellent: 0.96,\n                    good: 0.93,\n                    acceptable: 0.88,\n                    poor: 0.83\n                },\n                weight: 0.15,\n                enabled: true\n            },\n            \n            // 生产数据质量规则\n            {\n                id: 'production_completeness',\n                name: '生产数据完整性',\n                category: 'production',\n                data_source: 'mes_production_data',\n                rule_type: 'completeness',\n                description: '检查生产数据的完整性',\n                validation_logic: {\n                    required_fields: ['enterprise_id', 'product_code', 'production_volume', 'production_date'],\n                    null_tolerance: 0,\n                    missing_tolerance: 0.03\n                },\n                thresholds: {\n                    excellent: 0.98,\n                    good: 0.95,\n                    acceptable: 0.91,\n                    poor: 0.87\n                },\n                weight: 0.25,\n                enabled: true\n            },\n            {\n                id: 'production_consistency',\n                name: '生产数据一致性',\n                category: 'production',\n                data_source: 'mes_production_data',\n                rule_type: 'consistency',\n                description: '检查生产数据的一致性',\n                validation_logic: {\n                    cross_system_validation: [\n                        'production_volume matches inventory_change',\n                        'enterprise_id exists in enterprise_registry'\n                    ],\n                    temporal_consistency: {\n                        check_period: '1_day',\n                        variance_threshold: 0.15\n                    }\n                },\n                thresholds: {\n                    excellent: 0.96,\n                    good: 0.93,\n                    acceptable: 0.89,\n                    poor: 0.84\n                },\n                weight: 0.30,\n                enabled: true\n            },\n            \n            // 国家指标数据质量规则\n            {\n                id: 'indicator_accuracy',\n                name: '国家指标准确性',\n                category: 'indicators',\n                data_source: 'national_indicators',\n                rule_type: 'accuracy',\n                description: '检查国家指标计算的准确性',\n                validation_logic: {\n                    calculation_verification: {\n                        recalculate_sample: 0.2,\n                        tolerance: 0.005\n                    },\n                    benchmark_comparison: {\n                        compare_with_targets: true,\n                        historical_trend_check: true\n                    }\n                },\n                thresholds: {\n                    excellent: 0.995,\n                    good: 0.99,\n                    acceptable: 0.98,\n                    poor: 0.95\n                },\n                weight: 0.40,\n                enabled: true\n            },\n            {\n                id: 'indicator_compliance',\n                name: '国家指标合规性',\n                category: 'indicators',\n                data_source: 'national_indicators',\n                rule_type: 'compliance',\n                description: '检查国家指标的合规性',\n                validation_logic: {\n                    standard_compliance: {\n                        check_calculation_method: true,\n                        validate_data_sources: true,\n                        verify_reporting_format: true\n                    },\n                    regulatory_requirements: [\n                        'calculation_follows_national_standard',\n                        'data_retention_compliant',\n                        'audit_trail_complete'\n                    ]\n                },\n                thresholds: {\n                    excellent: 1.0,\n                    good: 0.98,\n                    acceptable: 0.95,\n                    poor: 0.90\n                },\n                weight: 0.35,\n                enabled: true\n            }\n        ];\n        \n        for (const rule of rules) {\n            this.qualityRules.set(rule.id, {\n                ...rule,\n                created_at: new Date().toISOString(),\n                last_updated: new Date().toISOString(),\n                execution_count: 0,\n                last_execution: null,\n                status: 'active'\n            });\n        }\n        \n        logger.info(`📋 已初始化 ${this.qualityRules.size} 个数据质量规则`);\n    }\n    \n    /**\n     * 初始化异常检测器\n     */\n    async initializeAnomalyDetectors() {\n        const detectors = [\n            {\n                id: 'statistical_outlier',\n                name: '统计异常检测',\n                type: 'statistical',\n                description: '基于统计方法检测数据异常',\n                algorithm: 'z_score',\n                parameters: {\n                    threshold: 3,\n                    window_size: 100,\n                    min_samples: 30\n                },\n                applicable_data_types: ['numeric'],\n                sensitivity: 'medium'\n            },\n            {\n                id: 'trend_anomaly',\n                name: '趋势异常检测',\n                type: 'trend',\n                description: '检测数据趋势异常',\n                algorithm: 'moving_average_deviation',\n                parameters: {\n                    window_size: 24,\n                    deviation_threshold: 0.3,\n                    trend_sensitivity: 0.1\n                },\n                applicable_data_types: ['time_series'],\n                sensitivity: 'high'\n            },\n            {\n                id: 'pattern_anomaly',\n                name: '模式异常检测',\n                type: 'pattern',\n                description: '检测数据模式异常',\n                algorithm: 'isolation_forest',\n                parameters: {\n                    contamination: 0.1,\n                    n_estimators: 100,\n                    max_samples: 256\n                },\n                applicable_data_types: ['multivariate'],\n                sensitivity: 'medium'\n            },\n            {\n                id: 'business_rule_violation',\n                name: '业务规则违反检测',\n                type: 'rule_based',\n                description: '检测违反业务规则的数据',\n                algorithm: 'rule_engine',\n                parameters: {\n                    rule_evaluation: 'strict',\n                    violation_tolerance: 0\n                },\n                applicable_data_types: ['all'],\n                sensitivity: 'high'\n            }\n        ];\n        \n        for (const detector of detectors) {\n            this.anomalyDetectors.set(detector.id, {\n                ...detector,\n                created_at: new Date().toISOString(),\n                detection_count: 0,\n                last_detection: null,\n                status: 'active'\n            });\n        }\n        \n        logger.info(`🔍 已初始化 ${this.anomalyDetectors.size} 个异常检测器`);\n    }\n    \n    /**\n     * 初始化预警配置\n     */\n    async initializeAlertConfigs() {\n        const configs = [\n            {\n                id: 'critical_quality_degradation',\n                name: '关键质量下降预警',\n                severity: 'critical',\n                description: '数据质量严重下降时触发',\n                trigger_conditions: {\n                    quality_score: { operator: '<', value: 0.85 },\n                    category: ['energy', 'carbon', 'indicators'],\n                    duration: 300 // 5分钟\n                },\n                notification_channels: ['email', 'sms', 'dashboard'],\n                escalation_rules: {\n                    level_1: { delay: 0, recipients: ['quality_team'] },\n                    level_2: { delay: 600, recipients: ['quality_manager'] },\n                    level_3: { delay: 1800, recipients: ['system_admin'] }\n                },\n                auto_actions: [\n                    'increase_monitoring_frequency',\n                    'trigger_data_validation',\n                    'generate_quality_report'\n                ]\n            },\n            {\n                id: 'anomaly_detection_alert',\n                name: '异常检测预警',\n                severity: 'high',\n                description: '检测到数据异常时触发',\n                trigger_conditions: {\n                    anomaly_count: { operator: '>=', value: 5 },\n                    time_window: 600, // 10分钟\n                    anomaly_types: ['statistical_outlier', 'trend_anomaly']\n                },\n                notification_channels: ['email', 'dashboard'],\n                escalation_rules: {\n                    level_1: { delay: 0, recipients: ['data_analyst'] },\n                    level_2: { delay: 900, recipients: ['quality_team'] }\n                },\n                auto_actions: [\n                    'detailed_anomaly_analysis',\n                    'data_source_health_check'\n                ]\n            },\n            {\n                id: 'compliance_violation',\n                name: '合规性违反预警',\n                severity: 'high',\n                description: '检测到合规性违反时触发',\n                trigger_conditions: {\n                    compliance_score: { operator: '<', value: 0.95 },\n                    category: ['indicators'],\n                    violation_type: ['calculation_method', 'data_retention']\n                },\n                notification_channels: ['email', 'sms'],\n                escalation_rules: {\n                    level_1: { delay: 0, recipients: ['compliance_officer'] },\n                    level_2: { delay: 300, recipients: ['legal_team'] }\n                },\n                auto_actions: [\n                    'compliance_audit_trigger',\n                    'violation_documentation'\n                ]\n            },\n            {\n                id: 'data_freshness_warning',\n                name: '数据时效性预警',\n                severity: 'medium',\n                description: '数据更新延迟时触发',\n                trigger_conditions: {\n                    data_delay: { operator: '>', value: 600 }, // 10分钟\n                    data_sources: ['ems_energy_data', 'mes_production_data']\n                },\n                notification_channels: ['dashboard'],\n                escalation_rules: {\n                    level_1: { delay: 0, recipients: ['data_team'] }\n                },\n                auto_actions: [\n                    'data_source_connectivity_check',\n                    'retry_data_collection'\n                ]\n            }\n        ];\n        \n        for (const config of configs) {\n            this.alertConfigs.set(config.id, {\n                ...config,\n                created_at: new Date().toISOString(),\n                trigger_count: 0,\n                last_triggered: null,\n                status: 'active'\n            });\n        }\n        \n        logger.info(`🚨 已初始化 ${this.alertConfigs.size} 个预警配置`);\n    }\n    \n    /**\n     * 启动实时监控\n     */\n    async startRealTimeMonitoring() {\n        // 实时质量检查任务\n        const realTimeQualityTask = setInterval(async () => {\n            await this.performRealTimeQualityCheck();\n        }, MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND); // 每分钟\n        \n        // 异常检测任务\n        const anomalyDetectionTask = setInterval(async () => {\n            await this.performAnomalyDetection();\n        }, MATH_CONSTANTS.FIVE * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND); // 每5分钟\n        \n        // 质量趋势分析任务\n        const trendAnalysisTask = setInterval(async () => {\n            await this.performTrendAnalysis();\n        }, MATH_CONSTANTS.FIFTEEN * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND); // 每15分钟\n        \n        // 预警检查任务\n        const alertCheckTask = setInterval(async () => {\n            await this.checkAlertConditions();\n        }, MATH_CONSTANTS.THIRTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND); // 每30秒\n        \n        this.monitoringTasks.set('real_time_quality', realTimeQualityTask);\n        this.monitoringTasks.set('anomaly_detection', anomalyDetectionTask);\n        this.monitoringTasks.set('trend_analysis', trendAnalysisTask);\n        this.monitoringTasks.set('alert_check', alertCheckTask);\n        \n        logger.info('🔄 实时数据质量监控任务已启动');\n    }\n    \n    /**\n     * 初始化质量指标\n     */\n    async initializeQualityMetrics() {\n        const metrics = [\n            {\n                id: 'overall_quality_score',\n                name: '整体质量评分',\n                description: '系统整体数据质量评分',\n                calculation_method: 'weighted_average',\n                target_value: 0.95,\n                unit: 'score',\n                category: 'overall'\n            },\n            {\n                id: 'energy_data_quality',\n                name: '能源数据质量',\n                description: '能源数据质量评分',\n                calculation_method: 'category_average',\n                target_value: 0.96,\n                unit: 'score',\n                category: 'energy'\n            },\n            {\n                id: 'carbon_data_quality',\n                name: '碳排放数据质量',\n                description: '碳排放数据质量评分',\n                calculation_method: 'category_average',\n                target_value: 0.98,\n                unit: 'score',\n                category: 'carbon'\n            },\n            {\n                id: 'production_data_quality',\n                name: '生产数据质量',\n                description: '生产数据质量评分',\n                calculation_method: 'category_average',\n                target_value: 0.94,\n                unit: 'score',\n                category: 'production'\n            },\n            {\n                id: 'indicator_data_quality',\n                name: '国家指标数据质量',\n                description: '国家指标数据质量评分',\n                calculation_method: 'category_average',\n                target_value: 0.99,\n                unit: 'score',\n                category: 'indicators'\n            },\n            {\n                id: 'anomaly_detection_rate',\n                name: '异常检测率',\n                description: '数据异常检测率',\n                calculation_method: 'percentage',\n                target_value: 0.02,\n                unit: 'percentage',\n                category: 'monitoring'\n            },\n            {\n                id: 'data_freshness_score',\n                name: '数据时效性评分',\n                description: '数据时效性评分',\n                calculation_method: 'timeliness_average',\n                target_value: 0.97,\n                unit: 'score',\n                category: 'timeliness'\n            }\n        ];\n        \n        for (const metric of metrics) {\n            this.qualityMetrics.set(metric.id, {\n                ...metric,\n                current_value: 0,\n                last_updated: new Date().toISOString(),\n                trend: 'stable',\n                history: []\n            });\n        }\n        \n        logger.info(`📈 已初始化 ${this.qualityMetrics.size} 个质量指标`);\n    }\n    \n    /**\n     * 执行实时质量检查\n     */\n    async performRealTimeQualityCheck() {\n        logger.info('🔍 开始实时质量检查...');\n        \n        const checkResults = {\n            timestamp: new Date().toISOString(),\n            total_rules_checked: 0,\n            passed_rules: 0,\n            failed_rules: 0,\n            quality_scores: {},\n            issues_found: []\n        };\n        \n        // 执行所有启用的质量规则\n        for (const [ruleId, rule] of this.qualityRules) {\n            if (!rule.enabled) continue;\n            \n            try {\n                const ruleResult = await this.executeQualityRule(rule);\n                checkResults.total_rules_checked++;\n                \n                if (ruleResult.passed) {\n                    checkResults.passed_rules++;\n                } else {\n                    checkResults.failed_rules++;\n                    checkResults.issues_found.push({\n                        rule_id: ruleId,\n                        rule_name: rule.name,\n                        issue_type: ruleResult.issue_type,\n                        severity: ruleResult.severity,\n                        description: ruleResult.description,\n                        affected_records: ruleResult.affected_records\n                    });\n                }\n                \n                // 更新质量分数\n                if (!checkResults.quality_scores[rule.category]) {\n                    checkResults.quality_scores[rule.category] = {\n                        total_weight: 0,\n                        weighted_score: 0,\n                        rule_count: 0\n                    };\n                }\n                \n                checkResults.quality_scores[rule.category].total_weight += rule.weight;\n                checkResults.quality_scores[rule.category].weighted_score += ruleResult.score * rule.weight;\n                checkResults.quality_scores[rule.category].rule_count++;\n                \n                // 更新规则执行统计\n                rule.execution_count++;\n                rule.last_execution = new Date().toISOString();\n                \n            } catch (error) {\n                logger.error(`质量规则执行失败 ${ruleId}:`, error);\n                checkResults.issues_found.push({\n                    rule_id: ruleId,\n                    rule_name: rule.name,\n                    issue_type: 'execution_error',\n                    severity: 'high',\n                    description: `规则执行失败: ${error.message}`,\n                    affected_records: 0\n                });\n            }\n        }\n        \n        // 计算分类质量分数\n        for (const [category, scoreData] of Object.entries(checkResults.quality_scores)) {\n            if (scoreData.total_weight > 0) {\n                scoreData.final_score = scoreData.weighted_score / scoreData.total_weight;\n            } else {\n                scoreData.final_score = 0;\n            }\n        }\n        \n        // 更新实时状态\n        this.realTimeStatus.set('latest_check', checkResults);\n        \n        // 更新质量指标\n        await this.updateQualityMetrics(checkResults);\n        \n        logger.info(`✅ 实时质量检查完成，检查了 ${checkResults.total_rules_checked} 个规则，发现 ${checkResults.issues_found.length} 个问题`);\n        this.emit('quality:check_completed', checkResults);\n        \n        return checkResults;\n    }\n    \n    /**\n     * 执行质量规则\n     * @param {Object} rule 质量规则\n     * @returns {Object} 规则执行结果\n     */\n    async executeQualityRule(rule) {\n        const result = {\n            rule_id: rule.id,\n            executed_at: new Date().toISOString(),\n            passed: false,\n            score: 0,\n            issue_type: null,\n            severity: 'low',\n            description: '',\n            affected_records: 0,\n            details: {}\n        };\n        \n        try {\n            // 获取测试数据（模拟）\n            const testData = await this.getTestData(rule.data_source);\n            \n            switch (rule.rule_type) {\n                case 'completeness':\n                    result = await this.checkCompleteness(rule, testData, result);\n                    break;\n                case 'accuracy':\n                    result = await this.checkAccuracy(rule, testData, result);\n                    break;\n                case 'timeliness':\n                    result = await this.checkTimeliness(rule, testData, result);\n                    break;\n                case 'consistency':\n                    result = await this.checkConsistency(rule, testData, result);\n                    break;\n                case 'validity':\n                    result = await this.checkValidity(rule, testData, result);\n                    break;\n                case 'traceability':\n                    result = await this.checkTraceability(rule, testData, result);\n                    break;\n                case 'compliance':\n                    result = await this.checkCompliance(rule, testData, result);\n                    break;\n                default:\n                    throw new Error(`不支持的规则类型: ${rule.rule_type}`);\n            }\n            \n            // 根据分数确定是否通过\n            result.passed = result.score >= rule.thresholds.acceptable;\n            \n            // 确定严重程度\n            if (result.score >= rule.thresholds.excellent) {\n                result.severity = 'info';\n            } else if (result.score >= rule.thresholds.good) {\n                result.severity = 'low';\n            } else if (result.score >= rule.thresholds.acceptable) {\n                result.severity = 'medium';\n            } else {\n                result.severity = 'high';\n            }\n            \n        } catch (error) {\n            result.passed = false;\n            result.score = 0;\n            result.issue_type = 'execution_error';\n            result.severity = 'high';\n            result.description = `规则执行错误: ${error.message}`;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * 检查数据完整性\n     */\n    async checkCompleteness(rule, testData, result) {\n        const validation = rule.validation_logic;\n        const totalRecords = testData.length;\n        let completeRecords = 0;\n        let missingFields = {};\n        \n        for (const record of testData) {\n            let recordComplete = true;\n            \n            for (const field of validation.required_fields) {\n                if (!record[field] || record[field] === null || record[field] === undefined) {\n                    recordComplete = false;\n                    missingFields[field] = (missingFields[field] || 0) + 1;\n                }\n            }\n            \n            if (recordComplete) {\n                completeRecords++;\n            }\n        }\n        \n        const completenessRate = totalRecords > 0 ? completeRecords / totalRecords : 0;\n        \n        result.score = completenessRate;\n        result.affected_records = totalRecords - completeRecords;\n        result.details = {\n            total_records: totalRecords,\n            complete_records: completeRecords,\n            completeness_rate: completenessRate,\n            missing_fields: missingFields\n        };\n        \n        if (completenessRate < validation.missing_tolerance) {\n            result.issue_type = 'completeness_violation';\n            result.description = `数据完整性不足: ${(completenessRate * 100).toFixed(2)}%，低于要求的 ${((1 - validation.missing_tolerance) * 100).toFixed(2)}%`;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * 检查数据准确性\n     */\n    async checkAccuracy(rule, testData, result) {\n        const validation = rule.validation_logic;\n        let accurateRecords = 0;\n        let rangeViolations = 0;\n        let businessRuleViolations = 0;\n        let outliers = 0;\n        \n        for (const record of testData) {\n            let recordAccurate = true;\n            \n            // 范围检查\n            if (validation.range_checks) {\n                for (const [field, range] of Object.entries(validation.range_checks)) {\n                    const value = record[field];\n                    if (value !== null && value !== undefined) {\n                        if ((range.min !== undefined && value < range.min) ||\n                            (range.max !== undefined && value > range.max)) {\n                            recordAccurate = false;\n                            rangeViolations++;\n                        }\n                    }\n                }\n            }\n            \n            // 业务规则检查\n            if (validation.business_rules) {\n                for (const rule of validation.business_rules) {\n                    if (!this.evaluateBusinessRule(rule, record)) {\n                        recordAccurate = false;\n                        businessRuleViolations++;\n                    }\n                }\n            }\n            \n            if (recordAccurate) {\n                accurateRecords++;\n            }\n        }\n        \n        // 异常值检测\n        if (validation.outlier_detection) {\n            outliers = await this.detectOutliers(testData, validation.outlier_detection);\n        }\n        \n        const accuracyRate = testData.length > 0 ? accurateRecords / testData.length : 0;\n        \n        result.score = accuracyRate;\n        result.affected_records = testData.length - accurateRecords;\n        result.details = {\n            total_records: testData.length,\n            accurate_records: accurateRecords,\n            accuracy_rate: accuracyRate,\n            range_violations: rangeViolations,\n            business_rule_violations: businessRuleViolations,\n            outliers: outliers\n        };\n        \n        if (accuracyRate < rule.thresholds.acceptable) {\n            result.issue_type = 'accuracy_violation';\n            result.description = `数据准确性不足: ${(accuracyRate * 100).toFixed(2)}%`;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * 检查数据时效性\n     */\n    async checkTimeliness(rule, testData, result) {\n        const validation = rule.validation_logic;\n        const currentTime = Date.now();\n        let timelyRecords = 0;\n        let totalDelay = 0;\n        let maxDelay = 0;\n        \n        for (const record of testData) {\n            const measurementTime = new Date(record.measurement_time || record.timestamp).getTime();\n            const delay = (currentTime - measurementTime) / 1000; // 秒\n            \n            totalDelay += delay;\n            maxDelay = Math.max(maxDelay, delay);\n            \n            if (delay <= validation.max_delay) {\n                timelyRecords++;\n            }\n        }\n        \n        const timelinessRate = testData.length > 0 ? timelyRecords / testData.length : 0;\n        const avgDelay = testData.length > 0 ? totalDelay / testData.length : 0;\n        \n        result.score = timelinessRate;\n        result.affected_records = testData.length - timelyRecords;\n        result.details = {\n            total_records: testData.length,\n            timely_records: timelyRecords,\n            timeliness_rate: timelinessRate,\n            average_delay: avgDelay,\n            max_delay: maxDelay,\n            max_allowed_delay: validation.max_delay\n        };\n        \n        if (timelinessRate < rule.thresholds.acceptable) {\n            result.issue_type = 'timeliness_violation';\n            result.description = `数据时效性不足: ${(timelinessRate * 100).toFixed(2)}%，平均延迟 ${avgDelay.toFixed(2)} 秒`;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * 检查数据一致性\n     */\n    async checkConsistency(rule, testData, result) {\n        const validation = rule.validation_logic;\n        let consistentRecords = 0;\n        let crossValidationFailures = 0;\n        let temporalInconsistencies = 0;\n        \n        for (const record of testData) {\n            let recordConsistent = true;\n            \n            // 交叉验证\n            if (validation.cross_validation) {\n                for (const validationRule of validation.cross_validation) {\n                    if (!this.evaluateConsistencyRule(validationRule, record)) {\n                        recordConsistent = false;\n                        crossValidationFailures++;\n                    }\n                }\n            }\n            \n            if (recordConsistent) {\n                consistentRecords++;\n            }\n        }\n        \n        // 时间一致性检查\n        if (validation.temporal_consistency) {\n            temporalInconsistencies = await this.checkTemporalConsistency(\n                testData, \n                validation.temporal_consistency\n            );\n        }\n        \n        const consistencyRate = testData.length > 0 ? consistentRecords / testData.length : 0;\n        \n        result.score = consistencyRate;\n        result.affected_records = testData.length - consistentRecords;\n        result.details = {\n            total_records: testData.length,\n            consistent_records: consistentRecords,\n            consistency_rate: consistencyRate,\n            cross_validation_failures: crossValidationFailures,\n            temporal_inconsistencies: temporalInconsistencies\n        };\n        \n        if (consistencyRate < rule.thresholds.acceptable) {\n            result.issue_type = 'consistency_violation';\n            result.description = `数据一致性不足: ${(consistencyRate * 100).toFixed(2)}%`;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * 检查数据有效性\n     */\n    async checkValidity(rule, testData, result) {\n        const validation = rule.validation_logic;\n        let validRecords = 0;\n        let scopeViolations = 0;\n        let sourceViolations = 0;\n        \n        for (const record of testData) {\n            let recordValid = true;\n            \n            // 范围验证\n            if (validation.scope_validation) {\n                const scope = record.emission_scope || record.scope;\n                if (scope && !validation.scope_validation.valid_scopes.includes(scope)) {\n                    recordValid = false;\n                    scopeViolations++;\n                }\n            }\n            \n            // 来源验证\n            if (validation.source_validation) {\n                const source = record.emission_source || record.source;\n                if (source && !validation.source_validation.valid_sources.includes(source)) {\n                    recordValid = false;\n                    sourceViolations++;\n                }\n            }\n            \n            if (recordValid) {\n                validRecords++;\n            }\n        }\n        \n        const validityRate = testData.length > 0 ? validRecords / testData.length : 0;\n        \n        result.score = validityRate;\n        result.affected_records = testData.length - validRecords;\n        result.details = {\n            total_records: testData.length,\n            valid_records: validRecords,\n            validity_rate: validityRate,\n            scope_violations: scopeViolations,\n            source_violations: sourceViolations\n        };\n        \n        if (validityRate < rule.thresholds.acceptable) {\n            result.issue_type = 'validity_violation';\n            result.description = `数据有效性不足: ${(validityRate * 100).toFixed(2)}%`;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * 检查数据可追溯性\n     */\n    async checkTraceability(rule, testData, result) {\n        const validation = rule.validation_logic;\n        let traceableRecords = 0;\n        let missingMetadata = 0;\n        let missingLineage = 0;\n        \n        for (const record of testData) {\n            let recordTraceable = true;\n            \n            // 审计轨迹检查\n            if (validation.audit_trail) {\n                for (const field of validation.audit_trail.required_metadata) {\n                    if (!record[field]) {\n                        recordTraceable = false;\n                        missingMetadata++;\n                        break;\n                    }\n                }\n            }\n            \n            // 血缘验证\n            if (validation.lineage_validation) {\n                if (!record.source_data_id || !record.calculation_steps) {\n                    recordTraceable = false;\n                    missingLineage++;\n                }\n            }\n            \n            if (recordTraceable) {\n                traceableRecords++;\n            }\n        }\n        \n        const traceabilityRate = testData.length > 0 ? traceableRecords / testData.length : 0;\n        \n        result.score = traceabilityRate;\n        result.affected_records = testData.length - traceableRecords;\n        result.details = {\n            total_records: testData.length,\n            traceable_records: traceableRecords,\n            traceability_rate: traceabilityRate,\n            missing_metadata: missingMetadata,\n            missing_lineage: missingLineage\n        };\n        \n        if (traceabilityRate < rule.thresholds.acceptable) {\n            result.issue_type = 'traceability_violation';\n            result.description = `数据可追溯性不足: ${(traceabilityRate * 100).toFixed(2)}%`;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * 检查合规性\n     */\n    async checkCompliance(rule, testData, result) {\n        const validation = rule.validation_logic;\n        let compliantRecords = 0;\n        let standardViolations = 0;\n        let regulatoryViolations = 0;\n        \n        for (const record of testData) {\n            let recordCompliant = true;\n            \n            // 标准合规检查\n            if (validation.standard_compliance) {\n                if (validation.standard_compliance.check_calculation_method) {\n                    if (!record.calculation_method || \n                        !this.isValidCalculationMethod(record.calculation_method)) {\n                        recordCompliant = false;\n                        standardViolations++;\n                    }\n                }\n            }\n            \n            // 监管要求检查\n            if (validation.regulatory_requirements) {\n                for (const requirement of validation.regulatory_requirements) {\n                    if (!this.evaluateRegulatoryRequirement(requirement, record)) {\n                        recordCompliant = false;\n                        regulatoryViolations++;\n                        break;\n                    }\n                }\n            }\n            \n            if (recordCompliant) {\n                compliantRecords++;\n            }\n        }\n        \n        const complianceRate = testData.length > 0 ? compliantRecords / testData.length : 0;\n        \n        result.score = complianceRate;\n        result.affected_records = testData.length - compliantRecords;\n        result.details = {\n            total_records: testData.length,\n            compliant_records: compliantRecords,\n            compliance_rate: complianceRate,\n            standard_violations: standardViolations,\n            regulatory_violations: regulatoryViolations\n        };\n        \n        if (complianceRate < rule.thresholds.acceptable) {\n            result.issue_type = 'compliance_violation';\n            result.description = `合规性不足: ${(complianceRate * 100).toFixed(2)}%`;\n        }\n        \n        return result;\n    }\n    \n    /**\n     * 执行异常检测\n     */\n    async performAnomalyDetection() {\n        logger.info('🔍 开始异常检测...');\n        \n        const detectionResults = {\n            timestamp: new Date().toISOString(),\n            total_detectors: this.anomalyDetectors.size,\n            anomalies_found: [],\n            detection_summary: {}\n        };\n        \n        for (const [detectorId, detector] of this.anomalyDetectors) {\n            if (detector.status !== 'active') continue;\n            \n            try {\n                const anomalies = await this.runAnomalyDetector(detector);\n                \n                detectionResults.anomalies_found.push(...anomalies);\n                detectionResults.detection_summary[detectorId] = {\n                    detector_name: detector.name,\n                    anomalies_count: anomalies.length,\n                    execution_time: new Date().toISOString()\n                };\n                \n                detector.detection_count += anomalies.length;\n                if (anomalies.length > 0) {\n                    detector.last_detection = new Date().toISOString();\n                }\n                \n            } catch (error) {\n                logger.error(`异常检测器执行失败 ${detectorId}:`, error);\n                detectionResults.detection_summary[detectorId] = {\n                    detector_name: detector.name,\n                    error: error.message,\n                    execution_time: new Date().toISOString()\n                };\n            }\n        }\n        \n        logger.info(`✅ 异常检测完成，发现 ${detectionResults.anomalies_found.length} 个异常`);\n        this.emit('anomaly:detection_completed', detectionResults);\n        \n        return detectionResults;\n    }\n    \n    /**\n     * 运行异常检测器\n     */\n    async runAnomalyDetector(detector) {\n        const anomalies = [];\n        \n        // 获取检测数据\n        const detectionData = await this.getDetectionData(detector);\n        \n        switch (detector.algorithm) {\n            case 'z_score':\n                anomalies.push(...this.detectZScoreAnomalies(detectionData, detector.parameters));\n                break;\n            case 'moving_average_deviation':\n                anomalies.push(...this.detectTrendAnomalies(detectionData, detector.parameters));\n                break;\n            case 'isolation_forest':\n                anomalies.push(...this.detectPatternAnomalies(detectionData, detector.parameters));\n                break;\n            case 'rule_engine':\n                anomalies.push(...this.detectRuleViolations(detectionData, detector.parameters));\n                break;\n        }\n        \n        return anomalies.map(anomaly => ({\n            ...anomaly,\n            detector_id: detector.id,\n            detector_name: detector.name,\n            detected_at: new Date().toISOString()\n        }));\n    }\n    \n    /**\n     * 检查预警条件\n     */\n    async checkAlertConditions() {\n        for (const [alertId, alertConfig] of this.alertConfigs) {\n            if (alertConfig.status !== 'active') continue;\n            \n            try {\n                const shouldTrigger = await this.evaluateAlertConditions(alertConfig);\n                \n                if (shouldTrigger) {\n                    await this.triggerAlert(alertConfig);\n                }\n                \n            } catch (error) {\n                logger.error(`预警条件检查失败 ${alertId}:`, error);\n            }\n        }\n    }\n    \n    /**\n     * 更新质量指标\n     */\n    async updateQualityMetrics(checkResults) {\n        const timestamp = new Date().toISOString();\n        \n        // 更新整体质量评分\n        const overallScore = this.calculateOverallQualityScore(checkResults.quality_scores);\n        this.updateMetric('overall_quality_score', overallScore, timestamp);\n        \n        // 更新分类质量评分\n        for (const [category, scoreData] of Object.entries(checkResults.quality_scores)) {\n            const metricId = `${category}_data_quality`;\n            if (this.qualityMetrics.has(metricId)) {\n                this.updateMetric(metricId, scoreData.final_score, timestamp);\n            }\n        }\n        \n        // 更新异常检测率\n        const anomalyRate = this.calculateAnomalyDetectionRate();\n        this.updateMetric('anomaly_detection_rate', anomalyRate, timestamp);\n        \n        // 更新数据时效性评分\n        const freshnessScore = this.calculateDataFreshnessScore();\n        this.updateMetric('data_freshness_score', freshnessScore, timestamp);\n    }\n    \n    /**\n     * 更新单个指标\n     */\n    updateMetric(metricId, value, timestamp) {\n        const metric = this.qualityMetrics.get(metricId);\n        if (!metric) return;\n        \n        const previousValue = metric.current_value;\n        metric.current_value = value;\n        metric.last_updated = timestamp;\n        \n        // 计算趋势\n        if (previousValue !== null && previousValue !== undefined) {\n            const change = value - previousValue;\n            if (Math.abs(change) < 0.01) {\n                metric.trend = 'stable';\n            } else if (change > 0) {\n                metric.trend = 'improving';\n            } else {\n                metric.trend = 'declining';\n            }\n        }\n        \n        // 保存历史记录\n        metric.history.push({\n            value: value,\n            timestamp: timestamp\n        });\n        \n        // 保持历史记录在合理范围内\n        if (metric.history.length > 1000) {\n            metric.history = metric.history.slice(-1000);\n        }\n    }\n    \n    // 辅助方法实现\n    async getTestData(dataSource) {\n        // 模拟获取测试数据\n        const sampleData = {\n            'ems_energy_data': [\n                {\n                    meter_id: 'M001',\n                    energy_type: 'electricity',\n                    consumption_amount: 1250.5,\n                    measurement_time: new Date(Date.now() - 60000).toISOString(),\n                    quality_flag: 'good'\n                },\n                {\n                    meter_id: 'M002',\n                    energy_type: 'natural_gas',\n                    consumption_amount: 850.2,\n                    measurement_time: new Date(Date.now() - 120000).toISOString(),\n                    quality_flag: 'good'\n                }\n            ],\n            'carbon_emissions': [\n                {\n                    emission_id: 'E001',\n                    emission_scope: 'scope1',\n                    emission_source: 'natural_gas',\n                    emission_amount: 125.8,\n                    calculation_time: new Date().toISOString(),\n                    calculation_method: 'emission_factor_method',\n                    data_quality_score: 0.95\n                }\n            ],\n            'mes_production_data': [\n                {\n                    enterprise_id: 'ENT001',\n                    product_code: 'PROD001',\n                    production_volume: 1000,\n                    production_date: new Date().toISOString().split('T')[0]\n                }\n            ],\n            'national_indicators': [\n                {\n                    indicator_id: 'IND001',\n                    indicator_type: 'carbon_intensity',\n                    indicator_value: 0.85,\n                    target_value: 0.90,\n                    calculation_date: new Date().toISOString().split('T')[0],\n                    compliance_status: 'compliant'\n                }\n            ]\n        };\n        \n        return sampleData[dataSource] || [];\n    }\n    \n    evaluateBusinessRule(rule, record) {\n        // 简化的业务规则评估\n        try {\n            if (rule.includes('consumption_amount > 0')) {\n                return record.consumption_amount > 0;\n            }\n            if (rule.includes('measurement_time <= current_time')) {\n                const measurementTime = new Date(record.measurement_time).getTime();\n                const currentTime = Date.now();\n                return measurementTime <= currentTime + 300000; // 5分钟容错\n            }\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n    \n    async detectOutliers(data, config) {\n        // 简化的异常值检测\n        if (data.length < config.min_samples) return 0;\n        \n        const values = data.map(d => d.consumption_amount || d.emission_amount || d.production_volume || 0);\n        const mean = values.reduce((a, b) => a + b, 0) / values.length;\n        const variance = values.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / values.length;\n        const stdDev = Math.sqrt(variance);\n        \n        let outliers = 0;\n        for (const value of values) {\n            const zScore = Math.abs((value - mean) / stdDev);\n            if (zScore > config.threshold) {\n                outliers++;\n            }\n        }\n        \n        return outliers;\n    }\n    \n    evaluateConsistencyRule(rule, record) {\n        // 简化的一致性规则评估\n        try {\n            if (rule.includes('sum(sub_meters) == total_meter')) {\n                // 模拟子表求和检查\n                return true;\n            }\n            if (rule.includes('energy_type matches meter_type')) {\n                // 模拟能源类型匹配检查\n                return true;\n            }\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n    \n    async checkTemporalConsistency(data, config) {\n        // 简化的时间一致性检查\n        let inconsistencies = 0;\n        \n        for (let i = 1; i < data.length; i++) {\n            const current = data[i].consumption_amount || data[i].emission_amount || 0;\n            const previous = data[i-1].consumption_amount || data[i-1].emission_amount || 0;\n            \n            if (previous > 0) {\n                const variance = Math.abs(current - previous) / previous;\n                if (variance > config.variance_threshold) {\n                    inconsistencies++;\n                }\n            }\n        }\n        \n        return inconsistencies;\n    }\n    \n    isValidCalculationMethod(method) {\n        const validMethods = [\n            'emission_factor_method',\n            'mass_balance_method',\n            'continuous_monitoring_method'\n        ];\n        return validMethods.includes(method);\n    }\n    \n    evaluateRegulatoryRequirement(requirement, record) {\n        // 简化的监管要求评估\n        try {\n            if (requirement.includes('calculation_follows_national_standard')) {\n                return record.calculation_method === 'emission_factor_method';\n            }\n            if (requirement.includes('audit_trail_complete')) {\n                return record.calculation_method && record.data_source;\n            }\n            return true;\n        } catch (error)","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]