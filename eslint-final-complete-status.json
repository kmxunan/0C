[{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/architecture/ApiGateway.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/architecture/ServiceRegistry.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/controllers/EnergyCarbonIntegrationController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/data/DataPlatform.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/entities/Device.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/entities/DeviceHistory.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/entities/DeviceType.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/entities/NotificationPreferences.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/entities/recommendation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/entities/storageDevice.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/AlertManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/CarbonAccountingEngine.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/CarbonManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/CarbonMonitor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/CarbonMonitorConstants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/DataAssetManagementCenter.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/DataCollector.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/DataGovernanceService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/DataLineageService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/DataManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/DeclarationSupportSystem.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/EnergyAnalytics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/EnergyFlowVisualization.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/EnergyManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/EnergyOptimizationScheduler.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/GreenElectricityTracing.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/MaintenanceManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/NationalIndicatorDashboard.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/NationalIndicatorEngine.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/NotificationService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/RealTimeDataQualityService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/ReportGenerator.js","messages":[{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":672,"column":34,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":672,"endColumn":43,"fix":{"range":[18504,18513],"text":"{return 0;}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'carbonData' is defined but never used. Allowed unused args must match /^_/u.","line":678,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":678,"endColumn":45},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":703,"column":22,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":703,"endColumn":32,"fix":{"range":[19487,19497],"text":"{return [];}"}},{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":715,"column":60,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","endLine":715,"endColumn":87,"fix":{"range":[20102,20129],"text":"{return MATH_CONSTANTS.ZERO;}"}},{"ruleId":"no-unused-vars","severity":2,"message":"'parkId' is defined but never used. Allowed unused args must match /^_/u.","line":743,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":743,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'timeRange' is defined but never used. Allowed unused args must match /^_/u.","line":743,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":743,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'parkId' is defined but never used. Allowed unused args must match /^_/u.","line":752,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":752,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'timeRange' is defined but never used. Allowed unused args must match /^_/u.","line":752,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":752,"endColumn":48}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"/**\n * 智能申报验收材料生成器\n * 自动生成符合国家标准的零碳园区申报验收材料\n * 支持多种格式输出和模板定制\n */\n\nimport { EventEmitter } from 'events';\nimport logger from '../../shared/utils/logger.js';\nimport { MATH_CONSTANTS } from '../../shared/constants/MathConstants.js';\nimport NationalIndicatorDashboard from './NationalIndicatorDashboard.js';\nimport CarbonAccountingEngine from './CarbonAccountingEngine.js';\nimport EnergyFlowVisualization from './EnergyFlowVisualization.js';\n\nclass ReportGenerator extends EventEmitter {\n  constructor() {\n    super();\n    this.indicatorDashboard = new NationalIndicatorDashboard();\n    this.carbonEngine = new CarbonAccountingEngine();\n    this.energyFlowViz = new EnergyFlowVisualization();\n    this.reportTemplates = new Map();\n    this.generationQueue = [];\n    this.isProcessing = false;\n    \n    // 报告模板配置\n    this.templateConfig = {\n      // 申报材料模板\n      application: {\n        name: '零碳园区申报材料',\n        sections: [\n          'basic_info',\n          'energy_system',\n          'carbon_accounting',\n          'indicator_analysis',\n          'technology_innovation',\n          'management_system',\n          'supporting_documents'\n        ],\n        format: ['pdf', 'docx', 'html']\n      },\n      \n      // 验收材料模板\n      acceptance: {\n        name: '零碳园区验收材料',\n        sections: [\n          'implementation_summary',\n          'indicator_achievement',\n          'carbon_neutrality_proof',\n          'energy_flow_analysis',\n          'performance_evaluation',\n          'continuous_improvement',\n          'certification_evidence'\n        ],\n        format: ['pdf', 'docx', 'html']\n      },\n      \n      // 监测报告模板\n      monitoring: {\n        name: '零碳园区监测报告',\n        sections: [\n          'monitoring_overview',\n          'real_time_indicators',\n          'trend_analysis',\n          'alert_summary',\n          'recommendations',\n          'data_quality_report'\n        ],\n        format: ['pdf', 'html', 'excel']\n      }\n    };\n    \n    this.init();\n  }\n\n  async init() {\n    try {\n      await this.loadReportTemplates();\n      this.startProcessingQueue();\n      logger.info('智能申报验收材料生成器初始化完成');\n      this.emit('generator_initialized');\n    } catch (error) {\n      logger.error('申报验收材料生成器初始化失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 加载报告模板\n   */\n  async loadReportTemplates() {\n    try {\n      // 加载申报材料模板\n      this.reportTemplates.set('application', {\n        ...this.templateConfig.application,\n        template_content: await this.getApplicationTemplate()\n      });\n      \n      // 加载验收材料模板\n      this.reportTemplates.set('acceptance', {\n        ...this.templateConfig.acceptance,\n        template_content: await this.getAcceptanceTemplate()\n      });\n      \n      // 加载监测报告模板\n      this.reportTemplates.set('monitoring', {\n        ...this.templateConfig.monitoring,\n        template_content: await this.getMonitoringTemplate()\n      });\n      \n      logger.info('报告模板加载完成');\n    } catch (error) {\n      logger.error('加载报告模板失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 生成申报验收材料\n   * @param {string} parkId - 园区ID\n   * @param {string} reportType - 报告类型 (application/acceptance/monitoring)\n   * @param {Object} options - 生成选项\n   * @returns {Promise<Object>} 生成结果\n   */\n  async generateReport(parkId, reportType, options = {}) {\n    try {\n      const reportId = this.generateReportId();\n      \n      // 添加到生成队列\n      const reportTask = {\n        id: reportId,\n        park_id: parkId,\n        type: reportType,\n        options: {\n          format: options.format || 'pdf',\n          language: options.language || 'zh-CN',\n          include_charts: options.include_charts !== false,\n          include_raw_data: options.include_raw_data || false,\n          time_range: options.time_range || '1y',\n          ...options\n        },\n        status: 'queued',\n        created_at: new Date().toISOString()\n      };\n      \n      this.generationQueue.push(reportTask);\n      \n      // 发送任务创建事件\n      this.emit('report_task_created', {\n        report_id: reportId,\n        park_id: parkId,\n        type: reportType\n      });\n      \n      logger.info(`报告生成任务已创建: ${reportId}`);\n      \n      return {\n        report_id: reportId,\n        status: 'queued',\n        estimated_completion: this.estimateCompletionTime(reportType)\n      };\n    } catch (error) {\n      logger.error('创建报告生成任务失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 处理生成队列\n   */\n  startProcessingQueue() {\n    setInterval(async () => {\n      if (!this.isProcessing && this.generationQueue.length > 0) {\n        await this.processNextReport();\n      }\n    }, MATH_CONSTANTS.FIVE * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n  }\n\n  /**\n   * 处理下一个报告\n   */\n  async processNextReport() {\n    if (this.generationQueue.length === 0) {\n      return;\n    }\n    \n    this.isProcessing = true;\n    const task = this.generationQueue.shift();\n    \n    try {\n      task.status = 'processing';\n      task.started_at = new Date().toISOString();\n      \n      this.emit('report_generation_started', {\n        report_id: task.id,\n        park_id: task.park_id\n      });\n      \n      // 收集数据\n      const reportData = await this.collectReportData(task.park_id, task.type, task.options);\n      \n      // 生成报告内容\n      const reportContent = await this.generateReportContent(task.type, reportData, task.options);\n      \n      // 格式化输出\n      const formattedReport = await this.formatReport(reportContent, task.options.format);\n      \n      // 保存报告\n      const savedReport = await this.saveReport(task.id, formattedReport, task.options);\n      \n      task.status = 'completed';\n      task.completed_at = new Date().toISOString();\n      task.result = savedReport;\n      \n      this.emit('report_generation_completed', {\n        report_id: task.id,\n        park_id: task.park_id,\n        result: savedReport\n      });\n      \n      logger.info(`报告生成完成: ${task.id}`);\n      \n    } catch (error) {\n      task.status = 'failed';\n      task.error = error.message;\n      task.failed_at = new Date().toISOString();\n      \n      this.emit('report_generation_failed', {\n        report_id: task.id,\n        park_id: task.park_id,\n        error: error.message\n      });\n      \n      logger.error(`报告生成失败: ${task.id}`, error);\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  /**\n   * 收集报告数据\n   */\n  async collectReportData(parkId, reportType, options) {\n    try {\n      const timeRange = options.time_range || '1y';\n      \n      // 基础数据\n      const baseData = {\n        park_info: await this.getParkBasicInfo(parkId),\n        generation_time: new Date().toISOString(),\n        time_range: timeRange,\n        report_type: reportType\n      };\n      \n      // 国家指标数据\n      const indicators = this.indicatorDashboard.getParkIndicators(parkId);\n      if (indicators) {\n        baseData.national_indicators = indicators;\n      }\n      \n      // 碳排放数据\n      const carbonData = await this.carbonEngine.calculateParkTotalEmissions(parkId, timeRange);\n      baseData.carbon_accounting = carbonData;\n      \n      // 能源流向数据\n      if (options.include_energy_flow !== false) {\n        const energyFlowData = await this.energyFlowViz.generateEnergyFlowMap(parkId, timeRange);\n        baseData.energy_flow = energyFlowData;\n      }\n      \n      // 根据报告类型收集特定数据\n      switch (reportType) {\n        case 'application':\n          baseData.application_specific = await this.collectApplicationData(parkId, timeRange);\n          break;\n        case 'acceptance':\n          baseData.acceptance_specific = await this.collectAcceptanceData(parkId, timeRange);\n          break;\n        case 'monitoring':\n          baseData.monitoring_specific = await this.collectMonitoringData(parkId, timeRange);\n          break;\n      }\n      \n      return baseData;\n    } catch (error) {\n      logger.error('收集报告数据失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 生成报告内容\n   */\n  async generateReportContent(reportType, data, options) {\n    try {\n      const template = this.reportTemplates.get(reportType);\n      if (!template) {\n        throw new Error(`未找到报告模板: ${reportType}`);\n      }\n      \n      const content = {\n        title: template.name,\n        subtitle: `${data.park_info.name} - ${new Date().getFullYear()}年度`,\n        generation_date: new Date().toLocaleDateString('zh-CN'),\n        sections: []\n      };\n      \n      // 生成各个章节\n      for (const sectionName of template.sections) {\n        const section = await this.generateSection(sectionName, data, options);\n        if (section) {\n          content.sections.push(section);\n        }\n      }\n      \n      // 添加附录\n      if (options.include_raw_data) {\n        content.sections.push(await this.generateDataAppendix(data));\n      }\n      \n      return content;\n    } catch (error) {\n      logger.error('生成报告内容失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 生成报告章节\n   */\n  async generateSection(sectionName, data, _options) {\n    try {\n      switch (sectionName) {\n        case 'basic_info':\n          return this.generateBasicInfoSection(data);\n        case 'energy_system':\n          return this.generateEnergySystemSection(data);\n        case 'carbon_accounting':\n          return this.generateCarbonAccountingSection(data);\n        case 'indicator_analysis':\n          return this.generateIndicatorAnalysisSection(data);\n        case 'implementation_summary':\n          return this.generateImplementationSummarySection(data);\n        case 'indicator_achievement':\n          return this.generateIndicatorAchievementSection(data);\n        case 'monitoring_overview':\n          return this.generateMonitoringOverviewSection(data);\n        case 'real_time_indicators':\n          return this.generateRealTimeIndicatorsSection(data);\n        default:\n          logger.warn(`未知章节类型: ${sectionName}`);\n          return null;\n      }\n    } catch (error) {\n      logger.error(`生成章节 ${sectionName} 失败:`, error);\n      return {\n        title: sectionName,\n        content: `生成章节时发生错误: ${error.message}`,\n        error: true\n      };\n    }\n  }\n\n  /**\n   * 生成基本信息章节\n   */\n  generateBasicInfoSection(data) {\n    return {\n      title: '1. 园区基本信息',\n      content: {\n        park_name: data.park_info.name,\n        location: data.park_info.location,\n        area: data.park_info.area,\n        establishment_date: data.park_info.establishment_date,\n        main_industries: data.park_info.main_industries,\n        enterprise_count: data.park_info.enterprise_count,\n        employee_count: data.park_info.employee_count,\n        annual_output_value: data.park_info.annual_output_value\n      },\n      charts: []\n    };\n  }\n\n  /**\n   * 生成能源系统章节\n   */\n  generateEnergySystemSection(data) {\n    const energyFlow = data.energy_flow;\n    return {\n      title: '2. 能源系统分析',\n      content: {\n        energy_infrastructure: energyFlow?.infrastructure,\n        energy_statistics: energyFlow?.statistics,\n        energy_efficiency: this.calculateEnergyEfficiency(energyFlow),\n        renewable_energy_ratio: energyFlow?.statistics?.renewable_ratio\n      },\n      charts: [\n        {\n          type: 'sankey',\n          title: '园区能源流向图',\n          data: energyFlow?.sankey_data\n        },\n        {\n          type: 'pie',\n          title: '能源消费结构',\n          data: energyFlow?.statistics?.breakdown?.by_source\n        }\n      ]\n    };\n  }\n\n  /**\n   * 生成碳核算章节\n   */\n  generateCarbonAccountingSection(data) {\n    const carbonData = data.carbon_accounting;\n    return {\n      title: '3. 碳排放核算',\n      content: {\n        total_emissions: carbonData.total_emissions,\n        scope1_emissions: carbonData.scope1_emissions,\n        scope2_emissions: carbonData.scope2_emissions,\n        emission_sources: carbonData.emission_sources,\n        carbon_intensity: data.national_indicators?.carbon_intensity,\n        carbon_reduction_measures: this.generateCarbonReductionMeasures(carbonData)\n      },\n      charts: [\n        {\n          type: 'bar',\n          title: '碳排放源分析',\n          data: carbonData.emission_sources\n        },\n        {\n          type: 'line',\n          title: '碳排放趋势',\n          data: carbonData.historical_data\n        }\n      ]\n    };\n  }\n\n  /**\n   * 生成指标分析章节\n   */\n  generateIndicatorAnalysisSection(data) {\n    const indicators = data.national_indicators;\n    return {\n      title: '4. 国家指标体系分析',\n      content: {\n        compliance_status: indicators?.compliance_status,\n        core_indicators: {\n          carbon_intensity: indicators?.carbon_intensity,\n          clean_energy_ratio: indicators?.clean_energy_ratio\n        },\n        guidance_indicators: {\n          solid_waste_utilization: indicators?.solid_waste_utilization,\n          waste_energy_utilization: indicators?.waste_energy_utilization,\n          water_reuse_ratio: indicators?.water_reuse_ratio\n        },\n        data_quality: indicators?.data_quality_score,\n        improvement_recommendations: this.generateImprovementRecommendations(indicators)\n      },\n      charts: [\n        {\n          type: 'radar',\n          title: '指标达成情况',\n          data: this.formatIndicatorsForRadarChart(indicators)\n        }\n      ]\n    };\n  }\n\n  /**\n   * 格式化报告\n   */\n  async formatReport(content, format) {\n    try {\n      switch (format.toLowerCase()) {\n        case 'pdf':\n          return await this.generatePDF(content);\n        case 'docx':\n          return await this.generateDOCX(content);\n        case 'html':\n          return await this.generateHTML(content);\n        case 'excel':\n          return await this.generateExcel(content);\n        default:\n          throw new Error(`不支持的格式: ${format}`);\n      }\n    } catch (error) {\n      logger.error('格式化报告失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 生成PDF格式\n   */\n  async generatePDF(content) {\n    // TODO: 实现PDF生成逻辑\n    return {\n      format: 'pdf',\n      content,\n      file_path: `/reports/pdf/${this.generateReportId()}.pdf`,\n      size: Math.floor(Math.random() * MATH_CONSTANTS.MILLION) + MATH_CONSTANTS.HALF_MILLION // 模拟文件大小\n    };\n  }\n\n  /**\n   * 生成HTML格式\n   */\n  async generateHTML(content) {\n    const html = this.convertToHTML(content);\n    return {\n      format: 'html',\n      content: html,\n      file_path: `/reports/html/${this.generateReportId()}.html`,\n      size: html.length\n    };\n  }\n\n  /**\n   * 转换为HTML\n   */\n  convertToHTML(content) {\n    let html = `\n    <!DOCTYPE html>\n    <html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>${content.title}</title>\n        <style>\n            body { font-family: 'Microsoft YaHei', Arial, sans-serif; margin: 40px; line-height: 1.6; }\n            .header { text-align: center; margin-bottom: 40px; }\n            .section { margin-bottom: 30px; }\n            .section-title { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }\n            .content-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n            .content-table th, .content-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }\n            .content-table th { background-color: #f2f2f2; }\n            .chart-placeholder { background-color: #f8f9fa; border: 1px dashed #dee2e6; padding: 40px; text-align: center; margin: 20px 0; }\n        </style>\n    </head>\n    <body>\n        <div class=\"header\">\n            <h1>${content.title}</h1>\n            <h2>${content.subtitle}</h2>\n            <p>生成日期: ${content.generation_date}</p>\n        </div>\n    `;\n    \n    content.sections.forEach(section => {\n      html += `\n        <div class=\"section\">\n            <h2 class=\"section-title\">${section.title}</h2>\n            ${this.formatSectionContent(section.content)}\n            ${this.formatCharts(section.charts || [])}\n        </div>\n      `;\n    });\n    \n    html += `\n    </body>\n    </html>\n    `;\n    \n    return html;\n  }\n\n  /**\n   * 格式化章节内容\n   */\n  formatSectionContent(content) {\n    if (typeof content === 'string') {\n      return `<p>${content}</p>`;\n    }\n    \n    if (typeof content === 'object') {\n      let html = '<table class=\"content-table\">';\n      for (const [key, value] of Object.entries(content)) {\n        html += `<tr><td><strong>${this.formatFieldName(key)}</strong></td><td>${this.formatFieldValue(value)}</td></tr>`;\n      }\n      html += '</table>';\n      return html;\n    }\n    \n    return '<p>无内容</p>';\n  }\n\n  /**\n   * 格式化图表\n   */\n  formatCharts(charts) {\n    return charts.map(chart => \n      `<div class=\"chart-placeholder\">\n        <h3>${chart.title}</h3>\n        <p>图表类型: ${chart.type}</p>\n        <p>此处应显示 ${chart.title} 图表</p>\n      </div>`\n    ).join('');\n  }\n\n  /**\n   * 保存报告\n   */\n  async saveReport(reportId, formattedReport, _options) {\n    try {\n      // TODO: 实现实际的文件保存逻辑\n      const savedReport = {\n        report_id: reportId,\n        file_path: formattedReport.file_path,\n        format: formattedReport.format,\n        size: formattedReport.size,\n        created_at: new Date().toISOString(),\n        download_url: `/api/reports/download/${reportId}`,\n        preview_url: formattedReport.format === 'html' ? `/api/reports/preview/${reportId}` : null\n      };\n      \n      logger.info(`报告已保存: ${reportId}`);\n      return savedReport;\n    } catch (error) {\n      logger.error('保存报告失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 生成报告ID\n   */\n  generateReportId() {\n    return `RPT_${Date.now()}_${Math.random().toString(MATH_CONSTANTS.BASE_36).substr(MATH_CONSTANTS.DECIMAL_PLACES, MATH_CONSTANTS.RANDOM_ID_LENGTH)}`;\n  }\n\n  /**\n   * 估算完成时间\n   */\n  estimateCompletionTime(reportType) {\n    const estimateMinutes = {\n      application: MATH_CONSTANTS.REPORT_ESTIMATE_APPLICATION,\n      acceptance: MATH_CONSTANTS.REPORT_ESTIMATE_ACCEPTANCE,\n      monitoring: MATH_CONSTANTS.REPORT_ESTIMATE_MONITORING\n    };\n    \n    const minutes = estimateMinutes[reportType] || MATH_CONSTANTS.REPORT_ESTIMATE_DEFAULT;\n    const completionTime = new Date();\n    completionTime.setMinutes(completionTime.getMinutes() + minutes);\n    \n    return completionTime.toISOString();\n  }\n\n  // 辅助方法\n  formatFieldName(key) {\n    const nameMap = {\n      park_name: '园区名称',\n      location: '地理位置',\n      area: '占地面积',\n      establishment_date: '成立日期',\n      main_industries: '主要产业',\n      enterprise_count: '企业数量',\n      employee_count: '员工数量',\n      annual_output_value: '年产值'\n    };\n    return nameMap[key] || key;\n  }\n\n  formatFieldValue(value) {\n    if (typeof value === 'object' && value !== null) {\n      return JSON.stringify(value, null, MATH_CONSTANTS.DECIMAL_PLACES);\n    }\n    return String(value);\n  }\n\n  calculateEnergyEfficiency(energyFlow) {\n    if (!energyFlow?.statistics) return 0;\n    const stats = energyFlow.statistics;\n    return stats.total_generation > 0 ? \n      (stats.total_consumption / stats.total_generation * MATH_CONSTANTS.ONE_HUNDRED).toFixed(MATH_CONSTANTS.DECIMAL_PLACES) : 0;\n  }\n\n  generateCarbonReductionMeasures(carbonData) {\n    return [\n      '推广可再生能源利用',\n      '提升能源利用效率',\n      '优化工业过程',\n      '加强碳汇建设',\n      '实施循环经济模式'\n    ];\n  }\n\n  generateImprovementRecommendations(indicators) {\n    const recommendations = [];\n    \n    if (indicators?.carbon_intensity?.status === 'warning' || indicators?.carbon_intensity?.status === 'critical') {\n      recommendations.push('建议加强能源结构优化，提高清洁能源比例');\n    }\n    \n    if (indicators?.clean_energy_ratio?.status === 'warning' || indicators?.clean_energy_ratio?.status === 'critical') {\n      recommendations.push('建议增加可再生能源装机容量');\n    }\n    \n    return recommendations.length > 0 ? recommendations : ['当前各项指标表现良好，建议继续保持'];\n  }\n\n  formatIndicatorsForRadarChart(indicators) {\n    if (!indicators) return [];\n    \n    return [\n      { indicator: '单位能耗碳排放', value: this.getIndicatorScore(indicators.carbon_intensity) },\n      { indicator: '清洁能源消费占比', value: this.getIndicatorScore(indicators.clean_energy_ratio) },\n      { indicator: '工业固废综合利用率', value: this.getIndicatorScore(indicators.solid_waste_utilization) },\n      { indicator: '余能综合利用率', value: this.getIndicatorScore(indicators.waste_energy_utilization) },\n      { indicator: '工业用水重复利用率', value: this.getIndicatorScore(indicators.water_reuse_ratio) }\n    ];\n  }\n\n  getIndicatorScore(indicator) {\n    if (!indicator || typeof indicator.value !== 'number') return MATH_CONSTANTS.ZERO;\n    \n    const statusScores = {\n      excellent: MATH_CONSTANTS.ONE_HUNDRED,\n      good: MATH_CONSTANTS.SCORE_GOOD,\n      warning: MATH_CONSTANTS.SCORE_WARNING,\n      critical: MATH_CONSTANTS.SCORE_CRITICAL,\n      error: MATH_CONSTANTS.ZERO\n    };\n    \n    return statusScores[indicator.status] || MATH_CONSTANTS.ZERO;\n  }\n\n  // 模拟数据获取方法\n  async getParkBasicInfo(parkId) {\n    return {\n      id: parkId,\n      name: '示例零碳园区',\n      location: '某省某市某区',\n      area: '10.5平方公里',\n      establishment_date: '2020-01-01',\n      main_industries: ['新能源', '电子信息', '生物医药'],\n      enterprise_count: MATH_CONSTANTS.SAMPLE_ENTERPRISE_COUNT,\n      employee_count: MATH_CONSTANTS.SAMPLE_EMPLOYEE_COUNT,\n      annual_output_value: '280亿元'\n    };\n  }\n\n  async collectApplicationData(parkId, timeRange) {\n    return {\n      application_date: new Date().toISOString(),\n      application_type: '国家级零碳园区',\n      supporting_policies: ['碳达峰碳中和政策', '可再生能源政策'],\n      investment_summary: '总投资50亿元，其中绿色投资占比80%'\n    };\n  }\n\n  async collectAcceptanceData(parkId, timeRange) {\n    return {\n      acceptance_date: new Date().toISOString(),\n      implementation_period: '2020-2024',\n      key_achievements: ['碳排放强度下降40%', '清洁能源占比达到85%'],\n      certification_status: '符合验收标准'\n    };\n  }\n\n  async collectMonitoringData(parkId, timeRange) {\n    return {\n      monitoring_period: timeRange,\n      monitoring_frequency: '实时监测',\n      data_sources: ['智能电表', '环境监测站', '企业上报'],\n      monitoring_coverage: '100%'\n    };\n  }\n\n  // 获取模板内容的方法\n  async getApplicationTemplate() {\n    return {\n      header: '零碳园区申报材料模板',\n      sections: this.templateConfig.application.sections\n    };\n  }\n\n  async getAcceptanceTemplate() {\n    return {\n      header: '零碳园区验收材料模板',\n      sections: this.templateConfig.acceptance.sections\n    };\n  }\n\n  async getMonitoringTemplate() {\n    return {\n      header: '零碳园区监测报告模板',\n      sections: this.templateConfig.monitoring.sections\n    };\n  }\n\n  /**\n   * 销毁实例\n   */\n  dispose() {\n    this.generationQueue = [];\n    this.reportTemplates.clear();\n    this.removeAllListeners();\n  }\n}\n\nexport default ReportGenerator;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/ResourceCirculationCenter.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token Requirements","line":244,"column":55,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 资源循环利用与固废追溯中心\n * 实现固废全生命周期管理、资源循环利用优化和追溯体系\n * 支持固废分类、处理、回收、再利用全流程管理\n */\n\nimport { EventEmitter } from 'events';\nimport logger from '../../shared/utils/logger.js';\nimport { MATH_CONSTANTS } from '../../shared/constants/MathConstants.js';\n\nclass ResourceCirculationCenter extends EventEmitter {\n  constructor() {\n    super();\n    this.isInitialized = false;\n    this.wasteCategories = new Map();\n    this.recyclingProcesses = new Map();\n    this.resourceFlows = new Map();\n    this.traceabilityRecords = new Map();\n    this.circularityMetrics = new Map();\n    this.optimizationResults = new Map();\n    \n    // 固废分类标准\n    this.wasteClassification = {\n      hazardous: {\n        name: '危险废物',\n        code: 'HW',\n        description: '具有腐蚀性、毒性、易燃性、反应性或感染性等危险特性的废物',\n        subcategories: {\n          'HW01': '医疗废物',\n          'HW02': '医药废物',\n          'HW03': '废药物、药品',\n          'HW04': '农药废物',\n          'HW05': '木材防腐剂废物',\n          'HW06': '废有机溶剂与含有机溶剂废物',\n          'HW07': '热处理含氰废物',\n          'HW08': '废矿物油与含矿物油废物'\n        },\n        disposal_requirements: {\n          collection: '专用容器收集',\n          storage: '危废暂存间存放',\n          transport: '危废运输资质单位',\n          disposal: '有资质处置单位处理'\n        }\n      },\n      recyclable: {\n        name: '可回收物',\n        code: 'RC',\n        description: '适宜回收和资源化利用的废物',\n        subcategories: {\n          'RC01': '废纸类',\n          'RC02': '废塑料',\n          'RC03': '废金属',\n          'RC04': '废玻璃',\n          'RC05': '废织物',\n          'RC06': '废电器电子产品',\n          'RC07': '废包装物'\n        },\n        recycling_potential: {\n          'RC01': { rate: 0.85, value: 800 }, // 回收率和价值(元/吨)\n          'RC02': { rate: 0.75, value: 1200 },\n          'RC03': { rate: 0.90, value: 2500 },\n          'RC04': { rate: 0.80, value: 300 },\n          'RC05': { rate: 0.60, value: 500 },\n          'RC06': { rate: 0.70, value: 3000 },\n          'RC07': { rate: 0.85, value: 600 }\n        }\n      },\n      organic: {\n        name: '有机废物',\n        code: 'OR',\n        description: '可生物降解的有机废物',\n        subcategories: {\n          'OR01': '餐厨垃圾',\n          'OR02': '园林绿化垃圾',\n          'OR03': '农业废弃物',\n          'OR04': '食品加工废料'\n        },\n        treatment_options: {\n          composting: { efficiency: 0.8, product: 'organic_fertilizer' },\n          anaerobic_digestion: { efficiency: 0.75, product: 'biogas' },\n          feed_production: { efficiency: 0.6, product: 'animal_feed' }\n        }\n      },\n      inert: {\n        name: '惰性废物',\n        code: 'IN',\n        description: '建筑垃圾等惰性废物',\n        subcategories: {\n          'IN01': '混凝土废料',\n          'IN02': '砖瓦废料',\n          'IN03': '石材废料',\n          'IN04': '沥青废料'\n        },\n        utilization_options: {\n          aggregate_production: { efficiency: 0.9, product: 'recycled_aggregate' },\n          road_base: { efficiency: 0.85, product: 'road_material' },\n          backfill: { efficiency: 0.95, product: 'fill_material' }\n        }\n      }\n    };\n    \n    // 循环经济指标\n    this.circularityIndicators = {\n      material_circularity: {\n        name: '物质循环率',\n        formula: '(回收利用量 + 再利用量) / 总废物产生量',\n        target: 0.8,\n        unit: '%'\n      },\n      waste_diversion_rate: {\n        name: '废物转化率',\n        formula: '(回收量 + 能源回收量) / 总废物量',\n        target: 0.9,\n        unit: '%'\n      },\n      resource_efficiency: {\n        name: '资源效率',\n        formula: '产出价值 / 资源投入量',\n        target: 1.5,\n        unit: '元/kg'\n      },\n      carbon_footprint_reduction: {\n        name: '碳足迹减少',\n        formula: '基准排放 - 实际排放',\n        target: 0.3,\n        unit: 'tCO2e/t废物'\n      }\n    };\n    \n    // 处理技术配置\n    this.treatmentTechnologies = {\n      mechanical_recycling: {\n        name: '机械回收',\n        applicable_materials: ['plastic', 'metal', 'paper', 'glass'],\n        efficiency: 0.85,\n        energy_consumption: 0.5, // kWh/kg\n        cost: 200, // 元/吨\n        carbon_factor: 0.1 // kgCO2e/kg\n      },\n      chemical_recycling: {\n        name: '化学回收',\n        applicable_materials: ['plastic', 'rubber'],\n        efficiency: 0.75,\n        energy_consumption: 1.2,\n        cost: 800,\n        carbon_factor: 0.3\n      },\n      biological_treatment: {\n        name: '生物处理',\n        applicable_materials: ['organic'],\n        efficiency: 0.8,\n        energy_consumption: 0.3,\n        cost: 150,\n        carbon_factor: -0.2 // 负值表示碳减排\n      },\n      thermal_recovery: {\n        name: '热能回收',\n        applicable_materials: ['mixed', 'non_recyclable'],\n        efficiency: 0.7,\n        energy_consumption: -2.0, // 负值表示能源产出\n        cost: 300,\n        carbon_factor: 0.4\n      }\n    };\n    \n    this.init();\n  }\n\n  async init() {\n    try {\n      await this.initializeWasteCategories();\n      await this.setupRecyclingProcesses();\n      await this.initializeTraceabilitySystem();\n      await this.startRealTimeMonitoring();\n      \n      this.isInitialized = true;\n      logger.info('资源循环利用与固废追溯中心初始化完成');\n      this.emit('initialized');\n    } catch (error) {\n      logger.error('资源循环中心初始化失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 建立固废全生命周期追溯体系\n   * @param {string} parkId - 园区ID\n   * @param {Object} wasteItem - 废物信息\n   * @returns {Object} 追溯记录\n   */\n  async establishWasteTraceability(parkId, wasteItem) {\n    try {\n      const traceId = this.generateTraceId(parkId, wasteItem);\n      \n      // 创建追溯记录\n      const traceRecord = {\n        trace_id: traceId,\n        park_id: parkId,\n        waste_info: {\n          ...wasteItem,\n          classification: this.classifyWaste(wasteItem),\n          hazard_level: this.assessHazardLevel(wasteItem),\n          recycling_potential: this.assessRecyclingPotential(wasteItem)\n        },\n        \n        // 生命周期阶段\n        lifecycle_stages: {\n          generation: {\n            timestamp: new Date().toISOString(),\n            location: wasteItem.generation_location,\n            source: wasteItem.source,\n            quantity: wasteItem.quantity,\n            composition: wasteItem.composition,\n            generator_info: wasteItem.generator\n          },\n          collection: {\n            status: 'pending',\n            scheduled_time: null,\n            collector: null,\n            collection_method: null\n          },\n          transportation: {\n            status: 'pending',\n            vehicle_info: null,\n            route: null,\n            transport_conditions: null\n          },\n          treatment: {\n            status: 'pending',\n            facility: null,\n            treatment_method: null,\n            treatment_efficiency: null\n          },\n          disposal_or_recovery: {\n            status: 'pending',\n            final_destination: null,\n            recovery_products: null,\n            disposal_method: null\n          }\n        },\n        \n        // 合规性检查\n        compliance: {\n          regulatory_requirements: this.getRegulatory Requirements(wasteItem),\n          permits_required: this.getRequiredPermits(wasteItem),\n          compliance_status: 'pending_verification'\n        },\n        \n        // 环境影响\n        environmental_impact: {\n          carbon_footprint: this.calculateCarbonFootprint(wasteItem),\n          resource_consumption: this.calculateResourceConsumption(wasteItem),\n          pollution_potential: this.assessPollutionPotential(wasteItem)\n        },\n        \n        // 经济价值\n        economic_value: {\n          disposal_cost: this.calculateDisposalCost(wasteItem),\n          recovery_value: this.calculateRecoveryValue(wasteItem),\n          net_value: 0 // 将在下面计算\n        },\n        \n        // 质量控制\n        quality_control: {\n          sampling_records: [],\n          test_results: [],\n          quality_certificates: []\n        },\n        \n        // 追溯链\n        traceability_chain: [\n          {\n            stage: 'generation',\n            timestamp: new Date().toISOString(),\n            actor: wasteItem.generator,\n            action: 'waste_generated',\n            location: wasteItem.generation_location,\n            data_hash: this.generateDataHash(wasteItem)\n          }\n        ]\n      };\n      \n      // 计算净经济价值\n      traceRecord.economic_value.net_value = \n        traceRecord.economic_value.recovery_value - traceRecord.economic_value.disposal_cost;\n      \n      // 存储追溯记录\n      this.traceabilityRecords.set(traceId, traceRecord);\n      \n      // 生成二维码/RFID标签\n      const trackingLabel = await this.generateTrackingLabel(traceRecord);\n      \n      logger.info(`固废追溯体系建立完成: ${traceId}`);\n      this.emit('traceability_established', traceRecord);\n      \n      return {\n        trace_record: traceRecord,\n        tracking_label: trackingLabel,\n        qr_code: this.generateQRCode(traceId),\n        compliance_checklist: this.generateComplianceChecklist(traceRecord)\n      };\n    } catch (error) {\n      logger.error('建立固废追溯体系失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 优化资源循环利用路径\n   * @param {string} parkId - 园区ID\n   * @param {Array} wasteStreams - 废物流\n   * @returns {Object} 优化方案\n   */\n  async optimizeCirculationPath(parkId, wasteStreams) {\n    try {\n      const optimizationId = this.generateOptimizationId(parkId);\n      \n      // 分析废物流特征\n      const streamAnalysis = this.analyzeWasteStreams(wasteStreams);\n      \n      // 识别循环利用机会\n      const circulationOpportunities = this.identifyCirculationOpportunities(streamAnalysis);\n      \n      // 构建循环网络\n      const circulationNetwork = this.buildCirculationNetwork(circulationOpportunities);\n      \n      // 多目标优化\n      const optimizationResult = await this.executeCirculationOptimization(\n        circulationNetwork,\n        streamAnalysis\n      );\n      \n      // 生成实施方案\n      const implementationPlan = this.generateImplementationPlan(optimizationResult);\n      \n      // 评估环境和经济效益\n      const benefitAssessment = await this.assessCirculationBenefits(optimizationResult);\n      \n      const result = {\n        optimization_id: optimizationId,\n        park_id: parkId,\n        optimization_time: new Date().toISOString(),\n        \n        // 废物流分析\n        waste_stream_analysis: streamAnalysis,\n        \n        // 循环机会\n        circulation_opportunities: circulationOpportunities,\n        \n        // 优化网络\n        circulation_network: circulationNetwork,\n        \n        // 最优路径\n        optimal_paths: optimizationResult.optimal_paths,\n        \n        // 实施方案\n        implementation_plan: implementationPlan,\n        \n        // 效益评估\n        benefits: benefitAssessment,\n        \n        // 循环经济指标\n        circularity_metrics: {\n          material_circularity_rate: this.calculateMaterialCircularityRate(optimizationResult),\n          waste_diversion_rate: this.calculateWasteDiversionRate(optimizationResult),\n          resource_efficiency: this.calculateResourceEfficiency(optimizationResult),\n          carbon_reduction: this.calculateCarbonReduction(optimizationResult)\n        },\n        \n        // 关键绩效指标\n        kpis: {\n          total_waste_processed: streamAnalysis.total_quantity,\n          recycling_rate: optimizationResult.recycling_rate,\n          recovery_rate: optimizationResult.recovery_rate,\n          cost_savings: benefitAssessment.cost_savings,\n          revenue_generation: benefitAssessment.revenue_generation,\n          carbon_footprint_reduction: benefitAssessment.carbon_reduction\n        },\n        \n        // 风险评估\n        risk_assessment: this.assessImplementationRisks(implementationPlan),\n        \n        // 监控计划\n        monitoring_plan: this.createMonitoringPlan(optimizationResult)\n      };\n      \n      // 缓存优化结果\n      this.optimizationResults.set(optimizationId, result);\n      \n      logger.info(`资源循环利用路径优化完成: ${optimizationId}, 循环率: ${result.circularity_metrics.material_circularity_rate}%`);\n      this.emit('circulation_optimized', result);\n      \n      return result;\n    } catch (error) {\n      logger.error('优化资源循环利用路径失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 更新追溯记录\n   * @param {string} traceId - 追溯ID\n   * @param {string} stage - 生命周期阶段\n   * @param {Object} updateData - 更新数据\n   * @returns {Object} 更新结果\n   */\n  async updateTraceabilityRecord(traceId, stage, updateData) {\n    try {\n      const traceRecord = this.traceabilityRecords.get(traceId);\n      if (!traceRecord) {\n        throw new Error(`追溯记录不存在: ${traceId}`);\n      }\n      \n      // 验证阶段顺序\n      this.validateStageSequence(traceRecord, stage);\n      \n      // 更新阶段信息\n      if (traceRecord.lifecycle_stages[stage]) {\n        Object.assign(traceRecord.lifecycle_stages[stage], {\n          ...updateData,\n          timestamp: new Date().toISOString(),\n          status: 'completed'\n        });\n      }\n      \n      // 添加追溯链记录\n      traceRecord.traceability_chain.push({\n        stage: stage,\n        timestamp: new Date().toISOString(),\n        actor: updateData.actor || 'system',\n        action: updateData.action || `${stage}_completed`,\n        location: updateData.location,\n        data_hash: this.generateDataHash(updateData),\n        previous_hash: traceRecord.traceability_chain[traceRecord.traceability_chain.length - 1].data_hash\n      });\n      \n      // 更新合规性状态\n      await this.updateComplianceStatus(traceRecord, stage, updateData);\n      \n      // 重新计算环境影响\n      this.recalculateEnvironmentalImpact(traceRecord, stage, updateData);\n      \n      // 更新质量控制记录\n      if (updateData.quality_data) {\n        this.updateQualityControlRecords(traceRecord, updateData.quality_data);\n      }\n      \n      // 检查是否完成全生命周期\n      const isComplete = this.checkLifecycleCompletion(traceRecord);\n      \n      const result = {\n        trace_id: traceId,\n        updated_stage: stage,\n        update_time: new Date().toISOString(),\n        lifecycle_complete: isComplete,\n        current_status: this.getCurrentStatus(traceRecord),\n        next_actions: this.getNextActions(traceRecord),\n        compliance_status: traceRecord.compliance.compliance_status,\n        environmental_impact: traceRecord.environmental_impact,\n        economic_value: traceRecord.economic_value\n      };\n      \n      // 如果生命周期完成，生成最终报告\n      if (isComplete) {\n        result.final_report = await this.generateFinalReport(traceRecord);\n      }\n      \n      logger.info(`追溯记录更新完成: ${traceId}, 阶段: ${stage}`);\n      this.emit('traceability_updated', result);\n      \n      return result;\n    } catch (error) {\n      logger.error('更新追溯记录失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 生成循环经济报告\n   * @param {string} parkId - 园区ID\n   * @param {string} period - 报告期间\n   * @returns {Object} 循环经济报告\n   */\n  async generateCircularEconomyReport(parkId, period = 'monthly') {\n    try {\n      const reportId = this.generateReportId(parkId, period);\n      \n      // 获取期间内的数据\n      const periodData = await this.getPeriodData(parkId, period);\n      \n      // 计算循环经济指标\n      const circularityMetrics = this.calculateCircularityMetrics(periodData);\n      \n      // 分析废物流\n      const wasteFlowAnalysis = this.analyzeWasteFlows(periodData);\n      \n      // 评估环境效益\n      const environmentalBenefits = this.assessEnvironmentalBenefits(periodData);\n      \n      // 计算经济效益\n      const economicBenefits = this.calculateEconomicBenefits(periodData);\n      \n      // 识别改进机会\n      const improvementOpportunities = this.identifyImprovementOpportunities(periodData);\n      \n      // 基准对比\n      const benchmarkComparison = await this.performBenchmarkComparison(circularityMetrics);\n      \n      const report = {\n        report_id: reportId,\n        park_id: parkId,\n        report_period: period,\n        generation_time: new Date().toISOString(),\n        \n        // 执行摘要\n        executive_summary: {\n          total_waste_processed: periodData.total_waste,\n          circularity_rate: circularityMetrics.material_circularity,\n          diversion_rate: circularityMetrics.waste_diversion_rate,\n          cost_savings: economicBenefits.total_savings,\n          carbon_reduction: environmentalBenefits.carbon_reduction,\n          key_achievements: this.identifyKeyAchievements(periodData),\n          main_challenges: this.identifyMainChallenges(periodData)\n        },\n        \n        // 循环经济指标\n        circularity_metrics: circularityMetrics,\n        \n        // 废物流分析\n        waste_flow_analysis: wasteFlowAnalysis,\n        \n        // 环境效益\n        environmental_benefits: environmentalBenefits,\n        \n        // 经济效益\n        economic_benefits: economicBenefits,\n        \n        // 技术绩效\n        technology_performance: {\n          recycling_efficiency: this.calculateRecyclingEfficiency(periodData),\n          recovery_efficiency: this.calculateRecoveryEfficiency(periodData),\n          treatment_effectiveness: this.calculateTreatmentEffectiveness(periodData)\n        },\n        \n        // 合规性状态\n        compliance_status: {\n          regulatory_compliance: this.assessRegulatoryCompliance(periodData),\n          permit_status: this.checkPermitStatus(periodData),\n          audit_results: this.getAuditResults(periodData)\n        },\n        \n        // 改进建议\n        improvement_opportunities: improvementOpportunities,\n        \n        // 基准对比\n        benchmark_comparison: benchmarkComparison,\n        \n        // 趋势分析\n        trend_analysis: this.performTrendAnalysis(parkId, period),\n        \n        // 预测和目标\n        forecasts_and_targets: {\n          next_period_forecast: this.generateNextPeriodForecast(periodData),\n          annual_targets: this.getAnnualTargets(parkId),\n          target_achievement: this.assessTargetAchievement(circularityMetrics)\n        },\n        \n        // 行动计划\n        action_plan: this.generateActionPlan(improvementOpportunities),\n        \n        // 附录\n        appendices: {\n          detailed_data: periodData,\n          methodology: this.getCalculationMethodology(),\n          data_sources: this.getDataSources(),\n          assumptions: this.getAssumptions()\n        }\n      };\n      \n      logger.info(`循环经济报告生成完成: ${reportId}`);\n      this.emit('report_generated', report);\n      \n      return report;\n    } catch (error) {\n      logger.error('生成循环经济报告失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 启动实时监控\n   */\n  async startRealTimeMonitoring() {\n    // 每小时更新循环经济指标\n    setInterval(async () => {\n      try {\n        await this.updateCircularityMetrics();\n      } catch (error) {\n        logger.error('更新循环经济指标失败:', error);\n      }\n    }, MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n    \n    // 每30分钟检查追溯记录状态\n    setInterval(async () => {\n      try {\n        await this.checkTraceabilityStatus();\n      } catch (error) {\n        logger.error('检查追溯记录状态失败:', error);\n      }\n    }, MATH_CONSTANTS.THIRTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n    \n    // 每15分钟监控处理设施状态\n    setInterval(async () => {\n      try {\n        await this.monitorTreatmentFacilities();\n      } catch (error) {\n        logger.error('监控处理设施失败:', error);\n      }\n    }, MATH_CONSTANTS.FIFTEEN * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n  }\n\n  // 废物分类和评估方法\n  classifyWaste(wasteItem) {\n    const { type, composition, hazard_properties } = wasteItem;\n    \n    // 危险废物判定\n    if (hazard_properties && hazard_properties.length > 0) {\n      return {\n        category: 'hazardous',\n        code: this.getHazardousWasteCode(type, hazard_properties),\n        subcategory: this.getHazardousSubcategory(type),\n        risk_level: this.assessRiskLevel(hazard_properties)\n      };\n    }\n    \n    // 可回收物判定\n    if (this.isRecyclable(composition)) {\n      return {\n        category: 'recyclable',\n        code: this.getRecyclableCode(type),\n        subcategory: this.getRecyclableSubcategory(type),\n        recycling_grade: this.assessRecyclingGrade(composition)\n      };\n    }\n    \n    // 有机废物判定\n    if (this.isOrganic(composition)) {\n      return {\n        category: 'organic',\n        code: this.getOrganicCode(type),\n        subcategory: this.getOrganicSubcategory(type),\n        biodegradability: this.assessBiodegradability(composition)\n      };\n    }\n    \n    // 惰性废物\n    return {\n      category: 'inert',\n      code: this.getInertCode(type),\n      subcategory: this.getInertSubcategory(type),\n      utilization_potential: this.assessUtilizationPotential(composition)\n    };\n  }\n\n  assessHazardLevel(wasteItem) {\n    const { hazard_properties, quantity, concentration } = wasteItem;\n    \n    let hazardScore = 0;\n    \n    // 危险特性评分\n    if (hazard_properties.includes('toxic')) hazardScore += 3;\n    if (hazard_properties.includes('corrosive')) hazardScore += 2;\n    if (hazard_properties.includes('flammable')) hazardScore += 2;\n    if (hazard_properties.includes('explosive')) hazardScore += 4;\n    if (hazard_properties.includes('infectious')) hazardScore += 3;\n    \n    // 数量影响\n    if (quantity > 1000) hazardScore += 2;\n    else if (quantity > 100) hazardScore += 1;\n    \n    // 浓度影响\n    if (concentration && concentration > 0.5) hazardScore += 2;\n    else if (concentration && concentration > 0.1) hazardScore += 1;\n    \n    if (hazardScore >= 6) return 'high';\n    if (hazardScore >= 3) return 'medium';\n    return 'low';\n  }\n\n  assessRecyclingPotential(wasteItem) {\n    const { type, composition, contamination_level, quantity } = wasteItem;\n    \n    const baseRecyclability = this.getBaseRecyclability(type);\n    const contaminationPenalty = contamination_level * 0.2;\n    const quantityBonus = quantity > 100 ? 0.1 : 0;\n    \n    const potential = Math.max(0, baseRecyclability - contaminationPenalty + quantityBonus);\n    \n    return {\n      score: potential,\n      grade: potential > 0.8 ? 'excellent' : potential > 0.6 ? 'good' : potential > 0.4 ? 'fair' : 'poor',\n      estimated_recovery_rate: potential * 0.9,\n      estimated_value: this.calculateEstimatedValue(type, quantity, potential)\n    };\n  }\n\n  // 循环利用优化方法\n  analyzeWasteStreams(wasteStreams) {\n    const analysis = {\n      total_quantity: 0,\n      composition_breakdown: {},\n      recyclable_fraction: 0,\n      organic_fraction: 0,\n      hazardous_fraction: 0,\n      inert_fraction: 0,\n      contamination_levels: {},\n      seasonal_patterns: {},\n      source_distribution: {}\n    };\n    \n    wasteStreams.forEach(stream => {\n      analysis.total_quantity += stream.quantity;\n      \n      // 成分分析\n      Object.keys(stream.composition).forEach(component => {\n        if (!analysis.composition_breakdown[component]) {\n          analysis.composition_breakdown[component] = 0;\n        }\n        analysis.composition_breakdown[component] += stream.composition[component] * stream.quantity;\n      });\n      \n      // 分类统计\n      const classification = this.classifyWaste(stream);\n      switch (classification.category) {\n        case 'recyclable':\n          analysis.recyclable_fraction += stream.quantity;\n          break;\n        case 'organic':\n          analysis.organic_fraction += stream.quantity;\n          break;\n        case 'hazardous':\n          analysis.hazardous_fraction += stream.quantity;\n          break;\n        case 'inert':\n          analysis.inert_fraction += stream.quantity;\n          break;\n      }\n      \n      // 污染水平\n      if (stream.contamination_level) {\n        if (!analysis.contamination_levels[classification.category]) {\n          analysis.contamination_levels[classification.category] = [];\n        }\n        analysis.contamination_levels[classification.category].push(stream.contamination_level);\n      }\n      \n      // 来源分布\n      if (!analysis.source_distribution[stream.source]) {\n        analysis.source_distribution[stream.source] = 0;\n      }\n      analysis.source_distribution[stream.source] += stream.quantity;\n    });\n    \n    // 计算比例\n    analysis.recyclable_fraction /= analysis.total_quantity;\n    analysis.organic_fraction /= analysis.total_quantity;\n    analysis.hazardous_fraction /= analysis.total_quantity;\n    analysis.inert_fraction /= analysis.total_quantity;\n    \n    return analysis;\n  }\n\n  identifyCirculationOpportunities(streamAnalysis) {\n    const opportunities = [];\n    \n    // 可回收物机会\n    if (streamAnalysis.recyclable_fraction > 0.1) {\n      opportunities.push({\n        type: 'material_recycling',\n        potential_quantity: streamAnalysis.total_quantity * streamAnalysis.recyclable_fraction,\n        estimated_value: this.calculateRecyclingValue(streamAnalysis),\n        implementation_complexity: 'medium',\n        payback_period: '2-3 years'\n      });\n    }\n    \n    // 有机废物处理机会\n    if (streamAnalysis.organic_fraction > 0.15) {\n      opportunities.push({\n        type: 'organic_treatment',\n        potential_quantity: streamAnalysis.total_quantity * streamAnalysis.organic_fraction,\n        treatment_options: ['composting', 'anaerobic_digestion'],\n        estimated_value: this.calculateOrganicValue(streamAnalysis),\n        implementation_complexity: 'high',\n        payback_period: '3-5 years'\n      });\n    }\n    \n    // 能源回收机会\n    const energyRecoveryPotential = this.calculateEnergyRecoveryPotential(streamAnalysis);\n    if (energyRecoveryPotential > 1000) { // kWh\n      opportunities.push({\n        type: 'energy_recovery',\n        potential_energy: energyRecoveryPotential,\n        estimated_value: energyRecoveryPotential * 0.6, // 0.6元/kWh\n        implementation_complexity: 'high',\n        payback_period: '5-7 years'\n      });\n    }\n    \n    // 工业共生机会\n    const symbiosisOpportunities = this.identifyIndustrialSymbiosis(streamAnalysis);\n    opportunities.push(...symbiosisOpportunities);\n    \n    return opportunities;\n  }\n\n  buildCirculationNetwork(opportunities) {\n    const network = {\n      nodes: [],\n      edges: [],\n      flows: [],\n      constraints: []\n    };\n    \n    // 添加源节点（废物产生点）\n    network.nodes.push({\n      id: 'waste_sources',\n      type: 'source',\n      capacity: Infinity\n    });\n    \n    // 添加处理节点\n    opportunities.forEach((opp, index) => {\n      network.nodes.push({\n        id: `treatment_${index}`,\n        type: 'treatment',\n        treatment_type: opp.type,\n        capacity: opp.potential_quantity,\n        cost: opp.estimated_cost || 0,\n        efficiency: opp.efficiency || 0.8\n      });\n      \n      // 添加从源到处理的边\n      network.edges.push({\n        from: 'waste_sources',\n        to: `treatment_${index}`,\n        capacity: opp.potential_quantity,\n        cost: opp.transport_cost || 50\n      });\n    });\n    \n    // 添加汇节点（最终产品/处置）\n    network.nodes.push({\n      id: 'final_products',\n      type: 'sink',\n      capacity: Infinity\n    });\n    \n    // 添加从处理到汇的边\n    opportunities.forEach((opp, index) => {\n      network.edges.push({\n        from: `treatment_${index}`,\n        to: 'final_products',\n        capacity: opp.potential_quantity * (opp.efficiency || 0.8),\n        value: opp.estimated_value || 0\n      });\n    });\n    \n    return network;\n  }\n\n  async executeCirculationOptimization(network, streamAnalysis) {\n    // 简化的网络流优化\n    // 实际应用中应使用专业的网络优化算法\n    \n    const optimization = {\n      objective: 'maximize_value_minimize_cost',\n      constraints: [\n        'capacity_constraints',\n        'flow_conservation',\n        'material_balance'\n      ],\n      variables: network.edges.map(edge => ({\n        id: `flow_${edge.from}_${edge.to}`,\n        type: 'continuous',\n        lower_bound: 0,\n        upper_bound: edge.capacity\n      }))\n    };\n    \n    // 模拟优化结果\n    const optimalFlows = this.simulateOptimalFlows(network, streamAnalysis);\n    \n    return {\n      optimal_flows: optimalFlows,\n      optimal_paths: this.extractOptimalPaths(optimalFlows, network),\n      total_value: this.calculateTotalValue(optimalFlows, network),\n      total_cost: this.calculateTotalCost(optimalFlows, network),\n      recycling_rate: this.calculateOptimalRecyclingRate(optimalFlows, streamAnalysis),\n      recovery_rate: this.calculateOptimalRecoveryRate(optimalFlows, streamAnalysis),\n      efficiency_metrics: this.calculateEfficiencyMetrics(optimalFlows, network)\n    };\n  }\n\n  // 辅助方法\n  generateTraceId(parkId, wasteItem) {\n    return `TRACE_${parkId}_${wasteItem.type}_${Date.now()}`;\n  }\n\n  generateOptimizationId(parkId) {\n    return `CIRC_OPT_${parkId}_${Date.now()}`;\n  }\n\n  generateReportId(parkId, period) {\n    return `CIRC_RPT_${parkId}_${period}_${Date.now()}`;\n  }\n\n  generateDataHash(data) {\n    // 简化的数据哈希生成\n    return `hash_${JSON.stringify(data).length}_${Date.now()}`;\n  }\n\n  generateQRCode(traceId) {\n    return {\n      content: traceId,\n      format: 'QR_CODE',\n      size: '100x100',\n      url: `https://trace.system.com/track/${traceId}`\n    };\n  }\n\n  async generateTrackingLabel(traceRecord) {\n    return {\n      label_id: `LABEL_${traceRecord.trace_id}`,\n      type: 'RFID',\n      content: {\n        trace_id: traceRecord.trace_id,\n        waste_type: traceRecord.waste_info.type,\n        generation_date: traceRecord.lifecycle_stages.generation.timestamp,\n        hazard_level: traceRecord.waste_info.hazard_level\n      },\n      print_ready: true\n    };\n  }\n\n  // 模拟数据获取方法\n  async initializeWasteCategories() {\n    Object.keys(this.wasteClassification).forEach(category => {\n      this.wasteCategories.set(category, this.wasteClassification[category]);\n    });\n    logger.info('废物分类体系初始化完成');\n  }\n\n  async setupRecyclingProcesses() {\n    Object.keys(this.treatmentTechnologies).forEach(tech => {\n      this.recyclingProcesses.set(tech, this.treatmentTechnologies[tech]);\n    });\n    logger.info('回收处理工艺配置完成');\n  }\n\n  async initializeTraceabilitySystem() {\n    // 初始化区块链或分布式账本系统\n    logger.info('追溯系统初始化完成');\n  }\n\n  async updateCircularityMetrics() {\n    // 更新循环经济指标\n    const parks = await this.getAllParks();\n    \n    for (const park of parks) {\n      const metrics = await this.calculateRealTimeMetrics(park.id);\n      this.circularityMetrics.set(park.id, metrics);\n    }\n  }\n\n  async checkTraceabilityStatus() {\n    // 检查追溯记录状态\n    for (const [traceId, record] of this.traceabilityRecords) {\n      const status = this.getCurrentStatus(record);\n      if (status === 'overdue') {\n        this.emit('traceability_alert', {\n          trace_id: traceId,\n          alert_type: 'overdue',\n          message: '追溯记录更新超时'\n        });\n      }\n    }\n  }\n\n  async monitorTreatmentFacilities() {\n    // 监控处理设施状态\n    const facilities = await this.getTreatmentFacilities();\n    \n    for (const facility of facilities) {\n      const status = await this.getFacilityStatus(facility.id);\n      if (status.efficiency < 0.7) {\n        this.emit('facility_alert', {\n          facility_id: facility.id,\n          alert_type: 'low_efficiency',\n          efficiency: status.efficiency\n        });\n      }\n    }\n  }\n\n  async getAllParks() {\n    return [{ id: 'park_001', name: '示例园区' }];\n  }\n\n  async getTreatmentFacilities() {\n    return [\n      { id: 'facility_001', name: '回收处理中心', type: 'recycling' },\n      { id: 'facility_002', name: '有机废物处理厂', type: 'organic_treatment' }\n    ];\n  }\n\n  async getFacilityStatus(facilityId) {\n    return {\n      efficiency: 0.85 + Math.random() * 0.1,\n      capacity_utilization: 0.7 + Math.random() * 0.2,\n      operational_status: 'normal'\n    };\n  }\n\n  // 其他计算方法的简化实现\n  calculateCarbonFootprint(wasteItem) {\n    const emissionFactors = {\n      plastic: 2.1,\n      paper: 0.9,\n      metal: 1.5,\n      organic: -0.3, // 负值表示碳汇\n      glass: 0.8\n    };\n    \n    return (emissionFactors[wasteItem.type] || 1.0) * wasteItem.quantity;\n  }\n\n  calculateDisposalCost(wasteItem) {\n    const costFactors = {\n      hazardous: 2000,\n      recyclable: 200,\n      organic: 300,\n      inert: 100\n    };\n    \n    const classification = this.classifyWaste(wasteItem);\n    return (costFactors[classification.category] || 500) * wasteItem.quantity / 1000; // 元/吨\n  }\n\n  calculateRecoveryValue(wasteItem) {\n    const valueFactors = {\n      plastic: 1200,\n      paper: 800,\n      metal: 2500,\n      glass: 300,\n      organic: 150\n    };\n    \n    const potential = this.assessRecyclingPotential(wasteItem);\n    return (valueFactors[wasteItem.type] || 0) * wasteItem.quantity / 1000 * potential.score;\n  }\n\n  isRecyclable(composition) {\n    const recyclableTypes = ['plastic', 'paper', 'metal', 'glass'];\n    return Object.keys(composition).some(type => recyclableTypes.includes(type));\n  }\n\n  isOrganic(composition) {\n    const organicTypes = ['food_waste', 'garden_waste', 'wood', 'textile'];\n    return Object.keys(composition).some(type => organicTypes.includes(type));\n  }\n\n  getBaseRecyclability(type) {\n    const recyclabilityMap = {\n      plastic: 0.8,\n      paper: 0.9,\n      metal: 0.95,\n      glass: 0.85,\n      textile: 0.6,\n      electronics: 0.7\n    };\n    \n    return recyclabilityMap[type] || 0.3;\n  }\n}\n\nexport default ResourceCirculationCenter;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/SceneManager.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x87ceeb.","line":38,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":38,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x87ceeb.","line":39,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":39,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":39,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":39,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":39,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":39,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 75.","line":43,"column":7,"nodeType":"Literal","messageId":"noMagic","endLine":43,"endColumn":9},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.1.","line":45,"column":7,"nodeType":"Literal","messageId":"noMagic","endLine":45,"endColumn":10},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 2000.","line":46,"column":7,"nodeType":"Literal","messageId":"noMagic","endLine":46,"endColumn":11},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":48,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":48,"endColumn":33},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":48,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":48,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":48,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":48,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xffffff.","line":87,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":87,"endColumn":57},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.6.","line":87,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":87,"endColumn":62},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xffffff.","line":91,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":91,"endColumn":65},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":91,"column":67,"nodeType":"Literal","messageId":"noMagic","endLine":91,"endColumn":70},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":92,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":92,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":92,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":92,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":92,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":92,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":106,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":106,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":106,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":106,"endColumn":60},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":127,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":127,"endColumn":29},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 30.","line":128,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":128,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 15.","line":129,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":129,"endColumn":29},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x4a90e2.","line":133,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":133,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x66c2a5.","line":133,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":133,"endColumn":67},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 30.","line":139,"column":66,"nodeType":"Literal","messageId":"noMagic","endLine":139,"endColumn":68},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":163,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":163,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":163,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":163,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":163,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":163,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":167,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":167,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":167,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":167,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 15.","line":167,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":167,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":171,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":171,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":171,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":171,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xef4444.","line":181,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":181,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xf59e0b.","line":183,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":183,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":213,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":213,"endColumn":65},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x10b981.","line":228,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":228,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xf59e0b.","line":231,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":231,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xef4444.","line":234,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":234,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x6b7280.","line":237,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":237,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":245,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":245,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":258,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":258,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":259,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":259,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":259,"column":60,"nodeType":"Literal","messageId":"noMagic","endLine":259,"endColumn":63},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 80.","line":261,"column":22,"nodeType":"Literal","messageId":"noMagic","endLine":261,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xef4444.","line":261,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":261,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":261,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":261,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xf59e0b.","line":261,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":261,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0x10b981.","line":261,"column":62,"nodeType":"Literal","messageId":"noMagic","endLine":261,"endColumn":70}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":49,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数字孪生场景管理器\n * 负责3D场景的创建、更新和管理\n */\n\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GLTFLoader as _GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { CSS2DRenderer, CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer';\n\nclass SceneManager {\n  constructor(container) {\n    this.container = container;\n    this.scene = null;\n    this.camera = null;\n    this.renderer = null;\n    this.labelRenderer = null;\n    this.controls = null;\n    this.buildings = new Map();\n    this.devices = new Map();\n    this.sensors = new Map();\n    this.animationId = null;\n\n    this.init();\n  }\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 49 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 49 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 49 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 49 行)\n\n  init() {\n    // 创建场景\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0x87ceeb); // 天空蓝\n    this.scene.fog = new THREE.Fog(0x87ceeb, 100, 1000);\n\n    // 创建相机\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.container.clientWidth / this.container.clientHeight,\n      0.1,\n      2000\n    );\n    this.camera.position.set(100, 100, 100);\n\n    // 创建WebGL渲染器\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    this.container.appendChild(this.renderer.domElement);\n\n    // 创建CSS2D渲染器用于标签\n    this.labelRenderer = new CSS2DRenderer();\n    this.labelRenderer.setSize(this.container.clientWidth, this.container.clientHeight);\n    this.labelRenderer.domElement.style.position = 'absolute';\n    this.labelRenderer.domElement.style.top = '0px';\n    this.labelRenderer.domElement.style.pointerEvents = 'none';\n    this.container.appendChild(this.labelRenderer.domElement);\n\n    // 创建轨道控制器\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.05;\n    this.controls.maxPolarAngle = Math.PI / 2;\n\n    // 添加光源\n    this.setupLighting();\n\n    // 创建地面\n    this.createGround();\n\n    // 开始渲染循环\n    this.animate();\n\n    // 监听窗口大小变化\n    window.addEventListener('resize', this.onWindowResize.bind(this));\n  }\n\n  setupLighting() {\n    // 环境光\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    this.scene.add(ambientLight);\n\n    // 方向光（太阳光）\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(100, 100, 50);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 2048;\n    directionalLight.shadow.mapSize.height = 2048;\n    directionalLight.shadow.camera.near = 0.5;\n    directionalLight.shadow.camera.far = 500;\n    directionalLight.shadow.camera.left = -100;\n    directionalLight.shadow.camera.right = 100;\n    directionalLight.shadow.camera.top = 100;\n    directionalLight.shadow.camera.bottom = -100;\n    this.scene.add(directionalLight);\n  }\n\n  createGround() {\n    const groundGeometry = new THREE.PlaneGeometry(500, 500);\n    const groundMaterial = new THREE.MeshLambertMaterial({ color: 0x90ee90 });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    ground.receiveShadow = true;\n    this.scene.add(ground);\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 29 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 29 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 29 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 29 行)\n  }\n\n  // 创建建筑物\n  createBuilding(buildingData) {\n    const { id, name, position, dimensions, type, color } = buildingData;\n\n    const geometry = new THREE.BoxGeometry(\n      dimensions.width || 20,\n      dimensions.height || 30,\n      dimensions.depth || 15\n    );\n\n    const material = new THREE.MeshStandardMaterial({\n      color: color || (type === 'industrial' ? 0x4a90e2 : 0x66c2a5),\n      metalness: 0.3,\n      roughness: 0.8\n    });\n\n    const building = new THREE.Mesh(geometry, material);\n    building.position.set(position.x || 0, (dimensions.height || 30) / 2, position.z || 0);\n    building.castShadow = true;\n    building.receiveShadow = true;\n    building.userData = { id, type: 'building', data: buildingData };\n\n    this.scene.add(building);\n    this.buildings.set(id, building);\n\n    // 添加建筑标签\n    this.createLabel(building, name, 'building');\n\n    return building;\n  }\n\n  // 创建设备\n  createDevice(deviceData) {\n    const { id, name, position, device_type, status } = deviceData;\n\n    let geometry;\n    let material;\n\n    // 根据设备类型创建不同形状\n    switch (device_type) {\n      case 'solar_panel':\n        geometry = new THREE.BoxGeometry(8, 0.5, 4);\n        material = new THREE.MeshStandardMaterial({ color: 0x1e3a8a });\n        break;\n      case 'wind_turbine':\n        geometry = new THREE.CylinderGeometry(0.5, 0.5, 15);\n        material = new THREE.MeshStandardMaterial({ color: 0xffffff });\n        break;\n      case 'battery':\n        geometry = new THREE.BoxGeometry(3, 4, 2);\n        material = new THREE.MeshStandardMaterial({ color: 0x059669 });\n        break;\n      default:\n        geometry = new THREE.BoxGeometry(2, 2, 2);\n        material = new THREE.MeshStandardMaterial({ color: 0x6b7280 });\n    }\n\n    // 根据状态调整颜色\n    if (status === 'offline') {\n      material.color.setHex(0xef4444);\n    } else if (status === 'warning') {\n      material.color.setHex(0xf59e0b);\n    }\n\n    const device = new THREE.Mesh(geometry, material);\n    device.position.set(position.x || 0, position.y || 2, position.z || 0);\n    device.castShadow = true;\n    device.userData = { id, type: 'device', data: deviceData };\n\n    this.scene.add(device);\n    this.devices.set(id, device);\n\n    // 添加设备标签\n    this.createLabel(device, name, 'device');\n\n    return device;\n  }\n\n  // 创建标签\n  createLabel(object, text, type) {\n    const labelDiv = document.createElement('div');\n    labelDiv.className = `label label-${type}`;\n    labelDiv.textContent = text;\n    labelDiv.style.backgroundColor = 'rgba(0,0,0,0.7)';\n    labelDiv.style.color = 'white';\n    labelDiv.style.padding = '4px 8px';\n    labelDiv.style.borderRadius = '4px';\n    labelDiv.style.fontSize = '12px';\n    labelDiv.style.fontFamily = 'Arial, sans-serif';\n\n    const label = new CSS2DObject(labelDiv);\n    label.position.set(0, object.geometry.parameters.height || 5, 0);\n    object.add(label);\n  }\n\n  // 更新设备状态\n  updateDeviceStatus(deviceId, status, data) {\n    const device = this.devices.get(deviceId);\n    if (!device) {\n      return;\n    }\n\n    // 更新颜色\n    let color;\n    switch (status) {\n      case 'online':\n        color = 0x10b981;\n        break;\n      case 'warning':\n        color = 0xf59e0b;\n        break;\n      case 'offline':\n        color = 0xef4444;\n        break;\n      default:\n        color = 0x6b7280;\n    }\n\n    device.material.color.setHex(color);\n    device.userData.data = { ...device.userData.data, ...data, status };\n  }\n\n  // 添加数据可视化效果\n  addDataVisualization(deviceId, value, maxValue = 100) {\n    const device = this.devices.get(deviceId);\n    if (!device) {\n      return;\n    }\n\n    // 移除旧的可视化效果\n    const oldViz = device.getObjectByName('dataViz');\n    if (oldViz) {\n      device.remove(oldViz);\n    }\n\n    // 创建数据条\n    const barHeight = (value / maxValue) * 10;\n    const geometry = new THREE.BoxGeometry(0.5, barHeight, 0.5);\n    const material = new THREE.MeshStandardMaterial({\n      color: value > 80 ? 0xef4444 : value > 60 ? 0xf59e0b : 0x10b981\n    });\n\n    const dataBar = new THREE.Mesh(geometry, material);\n    dataBar.position.set(0, barHeight / 2 + 2, 0);\n    dataBar.name = 'dataViz';\n    device.add(dataBar);\n  }\n\n  // 动画循环\n  animate() {\n    this.animationId = requestAnimationFrame(this.animate.bind(this));\n\n    this.controls.update();\n    this.renderer.render(this.scene, this.camera);\n    this.labelRenderer.render(this.scene, this.camera);\n  }\n\n  // 窗口大小变化处理\n  onWindowResize() {\n    this.camera.aspect = this.container.clientWidth / this.container.clientHeight;\n    this.camera.updateProjectionMatrix();\n\n    this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n    this.labelRenderer.setSize(this.container.clientWidth, this.container.clientHeight);\n  }\n\n  // 清理资源\n  dispose() {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n    }\n\n    window.removeEventListener('resize', this.onWindowResize.bind(this));\n\n    this.scene.traverse((object) => {\n      if (object.geometry) {\n        object.geometry.dispose();\n      }\n      if (object.material) {\n        if (Array.isArray(object.material)) {\n          object.material.forEach((material) => material.dispose());\n        } else {\n          object.material.dispose();\n        }\n      }\n    });\n\n    this.renderer.dispose();\n    this.labelRenderer.domElement.remove();\n    this.container.removeChild(this.renderer.domElement);\n  }\n}\n\nexport default SceneManager;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/UserManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/VirtualPowerPlantCenter.js","messages":[{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":298,"column":9,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":298,"endColumn":27,"fix":{"range":[8193,8211],"text":"strategy"}},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":761,"column":11,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":761,"endColumn":39,"fix":{"range":[21845,21873],"text":"qualification"}},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":887,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":887,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":903,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":903,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.1.","line":904,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":904,"endColumn":43},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":933,"column":7,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":933,"endColumn":17,"fix":{"range":[26899,26909],"text":"bids"}},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 2000.","line":945,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":945,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 300.","line":952,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":952,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":952,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":952,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":953,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":953,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":953,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":953,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":961,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":961,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":961,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":961,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 950.","line":962,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":962,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 600.","line":962,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":962,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.2.","line":963,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":963,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":964,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":964,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.15.","line":964,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":964,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.6.","line":1033,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":1033,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.3.","line":1037,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":1037,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.1.","line":1041,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":1041,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000000.","line":1079,"column":22,"nodeType":"Literal","messageId":"noMagic","endLine":1079,"endColumn":29},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500000.","line":1079,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":1079,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 15.","line":1088,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":1088,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":1088,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":1088,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":1089,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":1089,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":1089,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":1089,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":1090,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":1090,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":1090,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":1090,"endColumn":52},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":1091,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":1091,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":1091,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":1091,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":1096,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":1096,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":1096,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":1096,"endColumn":57},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":1097,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":1097,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":1097,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":1097,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.01.","line":1098,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":1098,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'aggregation' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1200,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1200,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 800.","line":1214,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":1214,"endColumn":62},{"ruleId":"no-unused-vars","severity":2,"message":"'resourceId' is defined but never used. Allowed unused args must match /^_/u.","line":1224,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":1224,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":1226,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":1226,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":1226,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":1226,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.95.","line":1227,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":1227,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.05.","line":1227,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":1227,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.9.","line":1228,"column":19,"nodeType":"Literal","messageId":"noMagic","endLine":1228,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.05.","line":1228,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":1228,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 25.","line":1229,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":1229,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":1229,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":1229,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'modelId' is defined but never used. Allowed unused args must match /^_/u.","line":1234,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":1234,"endColumn":33},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":1241,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":1241,"endColumn":18},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 30.","line":1241,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":1241,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 12.","line":1241,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":1241,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":1241,"column":71,"nodeType":"Literal","messageId":"noMagic","endLine":1241,"endColumn":73},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":1242,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":1242,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.15.","line":1242,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":1242,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":1253,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":1253,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 300.","line":1253,"column":38,"nodeType":"Literal","messageId":"noMagic","endLine":1253,"endColumn":41},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 2000.","line":1258,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":1258,"endColumn":20},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":1258,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":1258,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":1303,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":1303,"endColumn":47}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":53,"fixableErrorCount":3,"fixableWarningCount":0,"source":"/**\n * 虚拟电厂运营与交易中心\n * 实现分布式能源聚合、电力市场交易、辅助服务和智能调度\n * 支持多种分布式能源资源的统一管理和优化运营\n */\n\nimport { EventEmitter } from 'events';\nimport logger from '../../shared/utils/logger.js';\nimport { MATH_CONSTANTS } from '../../shared/constants/MathConstants.js';\n\nclass VirtualPowerPlantCenter extends EventEmitter {\n  constructor() {\n    super();\n    this.isInitialized = false;\n    this.distributedResources = new Map();\n    this.aggregationGroups = new Map();\n    this.marketPositions = new Map();\n    this.tradingStrategies = new Map();\n    this.ancillaryServices = new Map();\n    this.forecastModels = new Map();\n    this.optimizationResults = new Map();\n    \n    // 分布式能源资源类型\n    this.resourceTypes = {\n      solar_pv: {\n        name: '光伏发电',\n        category: 'renewable_generation',\n        characteristics: {\n          variability: 'high',\n          predictability: 'medium',\n          response_time: 'fast',\n          ramp_rate: 'high'\n        },\n        market_participation: {\n          energy_market: true,\n          capacity_market: false,\n          ancillary_services: ['frequency_regulation']\n        }\n      },\n      wind_turbine: {\n        name: '风力发电',\n        category: 'renewable_generation',\n        characteristics: {\n          variability: 'very_high',\n          predictability: 'low',\n          response_time: 'medium',\n          ramp_rate: 'medium'\n        },\n        market_participation: {\n          energy_market: true,\n          capacity_market: false,\n          ancillary_services: ['frequency_regulation']\n        }\n      },\n      battery_storage: {\n        name: '电池储能',\n        category: 'energy_storage',\n        characteristics: {\n          variability: 'controllable',\n          predictability: 'high',\n          response_time: 'very_fast',\n          ramp_rate: 'very_high'\n        },\n        market_participation: {\n          energy_market: true,\n          capacity_market: true,\n          ancillary_services: ['frequency_regulation', 'spinning_reserve', 'voltage_support']\n        }\n      },\n      flexible_load: {\n        name: '可调节负荷',\n        category: 'demand_response',\n        characteristics: {\n          variability: 'controllable',\n          predictability: 'high',\n          response_time: 'fast',\n          ramp_rate: 'high'\n        },\n        market_participation: {\n          energy_market: true,\n          capacity_market: true,\n          ancillary_services: ['demand_response', 'spinning_reserve']\n        }\n      },\n      ev_charging: {\n        name: '电动汽车充电',\n        category: 'flexible_load',\n        characteristics: {\n          variability: 'medium',\n          predictability: 'medium',\n          response_time: 'fast',\n          ramp_rate: 'high'\n        },\n        market_participation: {\n          energy_market: true,\n          capacity_market: false,\n          ancillary_services: ['demand_response']\n        }\n      },\n      chp_unit: {\n        name: '热电联产',\n        category: 'controllable_generation',\n        characteristics: {\n          variability: 'controllable',\n          predictability: 'high',\n          response_time: 'medium',\n          ramp_rate: 'medium'\n        },\n        market_participation: {\n          energy_market: true,\n          capacity_market: true,\n          ancillary_services: ['spinning_reserve', 'voltage_support']\n        }\n      }\n    };\n    \n    // 电力市场类型\n    this.marketTypes = {\n      day_ahead: {\n        name: '日前市场',\n        trading_horizon: '24h',\n        settlement_period: '15min',\n        gate_closure: '12h_before',\n        price_volatility: 'medium'\n      },\n      intraday: {\n        name: '日内市场',\n        trading_horizon: '4h',\n        settlement_period: '15min',\n        gate_closure: '1h_before',\n        price_volatility: 'high'\n      },\n      real_time: {\n        name: '实时市场',\n        trading_horizon: '1h',\n        settlement_period: '5min',\n        gate_closure: '5min_before',\n        price_volatility: 'very_high'\n      },\n      capacity: {\n        name: '容量市场',\n        trading_horizon: '1year',\n        settlement_period: '1month',\n        gate_closure: '3months_before',\n        price_volatility: 'low'\n      }\n    };\n    \n    // 辅助服务类型\n    this.ancillaryServiceTypes = {\n      frequency_regulation: {\n        name: '频率调节',\n        response_time: '4s',\n        duration: 'continuous',\n        payment_structure: 'capacity_and_energy',\n        technical_requirements: {\n          min_capacity: 1, // MW\n          response_accuracy: 0.95,\n          availability: 0.98\n        }\n      },\n      spinning_reserve: {\n        name: '旋转备用',\n        response_time: '10min',\n        duration: '30min-2h',\n        payment_structure: 'capacity',\n        technical_requirements: {\n          min_capacity: 5,\n          response_accuracy: 0.9,\n          availability: 0.95\n        }\n      },\n      non_spinning_reserve: {\n        name: '非旋转备用',\n        response_time: '30min',\n        duration: '2h',\n        payment_structure: 'capacity',\n        technical_requirements: {\n          min_capacity: 10,\n          response_accuracy: 0.85,\n          availability: 0.9\n        }\n      },\n      voltage_support: {\n        name: '电压支撑',\n        response_time: '1s',\n        duration: 'continuous',\n        payment_structure: 'capacity',\n        technical_requirements: {\n          min_capacity: 2,\n          response_accuracy: 0.98,\n          availability: 0.99\n        }\n      },\n      black_start: {\n        name: '黑启动',\n        response_time: '15min',\n        duration: '4h',\n        payment_structure: 'availability',\n        technical_requirements: {\n          min_capacity: 50,\n          self_start_capability: true,\n          availability: 0.99\n        }\n      }\n    };\n    \n    // 聚合策略\n    this.aggregationStrategies = {\n      homogeneous: {\n        name: '同质化聚合',\n        description: '聚合相同类型的分布式资源',\n        advantages: ['管理简单', '预测准确'],\n        disadvantages: ['多样性不足', '风险集中']\n      },\n      heterogeneous: {\n        name: '异质化聚合',\n        description: '聚合不同类型的分布式资源',\n        advantages: ['风险分散', '互补性强'],\n        disadvantages: ['管理复杂', '预测困难']\n      },\n      geographic: {\n        name: '地理位置聚合',\n        description: '按地理位置聚合分布式资源',\n        advantages: ['网络约束考虑', '本地平衡'],\n        disadvantages: ['规模受限', '资源不均']\n      },\n      market_oriented: {\n        name: '市场导向聚合',\n        description: '按市场参与能力聚合',\n        advantages: ['市场适应性强', '收益最大化'],\n        disadvantages: ['技术要求高', '风险较大']\n      }\n    };\n    \n    this.init();\n  }\n\n  async init() {\n    try {\n      await this.initializeDistributedResources();\n      await this.setupAggregationGroups();\n      await this.initializeForecastModels();\n      await this.setupTradingStrategies();\n      await this.startRealTimeOperations();\n      \n      this.isInitialized = true;\n      logger.info('虚拟电厂运营与交易中心初始化完成');\n      this.emit('initialized');\n    } catch (error) {\n      logger.error('虚拟电厂中心初始化失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 聚合分布式能源资源\n   * @param {string} parkId - 园区ID\n   * @param {Array} resources - 分布式资源列表\n   * @param {string} strategy - 聚合策略\n   * @returns {Object} 聚合结果\n   */\n  async aggregateDistributedResources(parkId, resources, strategy = 'heterogeneous') {\n    try {\n      const aggregationId = this.generateAggregationId(parkId, strategy);\n      \n      // 资源评估和筛选\n      const qualifiedResources = await this.assessResourceQualification(resources);\n      \n      // 执行聚合策略\n      const aggregationResult = await this.executeAggregationStrategy(\n        qualifiedResources,\n        strategy\n      );\n      \n      // 计算聚合容量和特性\n      const aggregatedCapacity = this.calculateAggregatedCapacity(aggregationResult.groups);\n      \n      // 建立控制和通信架构\n      const controlArchitecture = await this.establishControlArchitecture(aggregationResult.groups);\n      \n      // 制定运营策略\n      const operationalStrategy = this.developOperationalStrategy(\n        aggregatedCapacity,\n        controlArchitecture\n      );\n      \n      // 评估市场参与能力\n      const marketCapability = await this.assessMarketCapability(\n        aggregatedCapacity,\n        operationalStrategy\n      );\n      \n      const result = {\n        aggregation_id: aggregationId,\n        park_id: parkId,\n        aggregation_time: new Date().toISOString(),\n        strategy: strategy,\n        \n        // 聚合资源\n        qualified_resources: qualifiedResources,\n        aggregation_groups: aggregationResult.groups,\n        \n        // 聚合容量\n        aggregated_capacity: aggregatedCapacity,\n        \n        // 控制架构\n        control_architecture: controlArchitecture,\n        \n        // 运营策略\n        operational_strategy: operationalStrategy,\n        \n        // 市场能力\n        market_capability: marketCapability,\n        \n        // 技术指标\n        technical_metrics: {\n          total_capacity: aggregatedCapacity.total_capacity,\n          response_time: this.calculateAggregatedResponseTime(aggregationResult.groups),\n          ramp_rate: this.calculateAggregatedRampRate(aggregationResult.groups),\n          availability: this.calculateAggregatedAvailability(aggregationResult.groups),\n          reliability: this.calculateAggregatedReliability(aggregationResult.groups)\n        },\n        \n        // 经济指标\n        economic_metrics: {\n          aggregation_cost: this.calculateAggregationCost(aggregationResult),\n          operational_cost: this.calculateOperationalCost(operationalStrategy),\n          revenue_potential: this.calculateRevenuePotential(marketCapability),\n          payback_period: this.calculatePaybackPeriod(aggregationResult)\n        },\n        \n        // 风险评估\n        risk_assessment: {\n          technical_risks: this.assessTechnicalRisks(aggregationResult),\n          market_risks: this.assessMarketRisks(marketCapability),\n          operational_risks: this.assessOperationalRisks(operationalStrategy)\n        }\n      };\n      \n      // 存储聚合结果\n      this.aggregationGroups.set(aggregationId, result);\n      \n      logger.info(`分布式资源聚合完成: ${aggregationId}, 总容量: ${aggregatedCapacity.total_capacity}MW`);\n      this.emit('aggregation_completed', result);\n      \n      return result;\n    } catch (error) {\n      logger.error('聚合分布式能源资源失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 执行电力市场交易\n   * @param {string} aggregationId - 聚合ID\n   * @param {string} marketType - 市场类型\n   * @param {Object} tradingParams - 交易参数\n   * @returns {Object} 交易结果\n   */\n  async executeMarketTrading(aggregationId, marketType, tradingParams) {\n    try {\n      const tradingId = this.generateTradingId(aggregationId, marketType);\n      const aggregation = this.aggregationGroups.get(aggregationId);\n      \n      if (!aggregation) {\n        throw new Error(`聚合组不存在: ${aggregationId}`);\n      }\n      \n      // 获取市场信息\n      const marketInfo = await this.getMarketInformation(marketType);\n      \n      // 生成功率预测\n      const powerForecast = await this.generatePowerForecast(\n        aggregation,\n        marketInfo.trading_horizon\n      );\n      \n      // 制定投标策略\n      const biddingStrategy = await this.developBiddingStrategy(\n        aggregation,\n        marketInfo,\n        powerForecast,\n        tradingParams\n      );\n      \n      // 执行投标\n      const bidSubmission = await this.submitBids(\n        tradingId,\n        marketType,\n        biddingStrategy\n      );\n      \n      // 等待市场出清\n      const marketClearing = await this.waitForMarketClearing(\n        tradingId,\n        marketType\n      );\n      \n      // 分析交易结果\n      const tradingAnalysis = this.analyzeTradingResults(\n        bidSubmission,\n        marketClearing,\n        powerForecast\n      );\n      \n      // 更新市场头寸\n      await this.updateMarketPositions(\n        aggregationId,\n        marketType,\n        marketClearing\n      );\n      \n      const result = {\n        trading_id: tradingId,\n        aggregation_id: aggregationId,\n        market_type: marketType,\n        trading_time: new Date().toISOString(),\n        \n        // 市场信息\n        market_info: marketInfo,\n        \n        // 功率预测\n        power_forecast: powerForecast,\n        \n        // 投标策略\n        bidding_strategy: biddingStrategy,\n        \n        // 投标提交\n        bid_submission: bidSubmission,\n        \n        // 市场出清\n        market_clearing: marketClearing,\n        \n        // 交易分析\n        trading_analysis: tradingAnalysis,\n        \n        // 财务结果\n        financial_results: {\n          revenue: tradingAnalysis.total_revenue,\n          cost: tradingAnalysis.total_cost,\n          profit: tradingAnalysis.net_profit,\n          margin: tradingAnalysis.profit_margin\n        },\n        \n        // 执行计划\n        execution_plan: this.generateExecutionPlan(\n          marketClearing,\n          aggregation\n        ),\n        \n        // 风险指标\n        risk_metrics: {\n          price_risk: tradingAnalysis.price_risk,\n          volume_risk: tradingAnalysis.volume_risk,\n          execution_risk: tradingAnalysis.execution_risk\n        }\n      };\n      \n      // 存储交易结果\n      this.marketPositions.set(tradingId, result);\n      \n      logger.info(`电力市场交易完成: ${tradingId}, 收益: ${result.financial_results.profit}万元`);\n      this.emit('trading_completed', result);\n      \n      return result;\n    } catch (error) {\n      logger.error('执行电力市场交易失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 提供辅助服务\n   * @param {string} aggregationId - 聚合ID\n   * @param {string} serviceType - 辅助服务类型\n   * @param {Object} serviceParams - 服务参数\n   * @returns {Object} 服务结果\n   */\n  async provideAncillaryServices(aggregationId, serviceType, serviceParams) {\n    try {\n      const serviceId = this.generateServiceId(aggregationId, serviceType);\n      const aggregation = this.aggregationGroups.get(aggregationId);\n      \n      if (!aggregation) {\n        throw new Error(`聚合组不存在: ${aggregationId}`);\n      }\n      \n      // 验证服务能力\n      const serviceCapability = await this.verifyServiceCapability(\n        aggregation,\n        serviceType\n      );\n      \n      if (!serviceCapability.qualified) {\n        throw new Error(`不满足${serviceType}服务要求`);\n      }\n      \n      // 制定服务策略\n      const serviceStrategy = await this.developServiceStrategy(\n        aggregation,\n        serviceType,\n        serviceParams\n      );\n      \n      // 资源调度和控制\n      const resourceScheduling = await this.scheduleResourcesForService(\n        aggregation,\n        serviceStrategy\n      );\n      \n      // 执行服务\n      const serviceExecution = await this.executeAncillaryService(\n        serviceId,\n        serviceType,\n        resourceScheduling\n      );\n      \n      // 监控服务性能\n      const performanceMonitoring = await this.monitorServicePerformance(\n        serviceId,\n        serviceType,\n        serviceExecution\n      );\n      \n      // 计算服务收益\n      const serviceRevenue = this.calculateServiceRevenue(\n        serviceType,\n        performanceMonitoring,\n        serviceParams\n      );\n      \n      const result = {\n        service_id: serviceId,\n        aggregation_id: aggregationId,\n        service_type: serviceType,\n        service_time: new Date().toISOString(),\n        \n        // 服务能力\n        service_capability: serviceCapability,\n        \n        // 服务策略\n        service_strategy: serviceStrategy,\n        \n        // 资源调度\n        resource_scheduling: resourceScheduling,\n        \n        // 服务执行\n        service_execution: serviceExecution,\n        \n        // 性能监控\n        performance_monitoring: performanceMonitoring,\n        \n        // 服务收益\n        service_revenue: serviceRevenue,\n        \n        // 技术性能\n        technical_performance: {\n          response_accuracy: performanceMonitoring.response_accuracy,\n          response_time: performanceMonitoring.actual_response_time,\n          availability: performanceMonitoring.service_availability,\n          reliability: performanceMonitoring.service_reliability\n        },\n        \n        // 经济性能\n        economic_performance: {\n          capacity_payment: serviceRevenue.capacity_payment,\n          energy_payment: serviceRevenue.energy_payment,\n          performance_bonus: serviceRevenue.performance_bonus,\n          total_revenue: serviceRevenue.total_revenue,\n          service_cost: serviceRevenue.service_cost,\n          net_profit: serviceRevenue.net_profit\n        },\n        \n        // 合规性检查\n        compliance_check: {\n          technical_compliance: this.checkTechnicalCompliance(performanceMonitoring, serviceType),\n          market_compliance: this.checkMarketCompliance(serviceExecution, serviceType),\n          regulatory_compliance: this.checkRegulatoryCompliance(result, serviceType)\n        }\n      };\n      \n      // 存储服务结果\n      this.ancillaryServices.set(serviceId, result);\n      \n      logger.info(`辅助服务提供完成: ${serviceId}, 收益: ${result.economic_performance.net_profit}万元`);\n      this.emit('ancillary_service_completed', result);\n      \n      return result;\n    } catch (error) {\n      logger.error('提供辅助服务失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 优化虚拟电厂运营\n   * @param {string} aggregationId - 聚合ID\n   * @param {Object} optimizationParams - 优化参数\n   * @returns {Object} 优化结果\n   */\n  async optimizeVPPOperation(aggregationId, optimizationParams) {\n    try {\n      const optimizationId = this.generateOptimizationId(aggregationId);\n      const aggregation = this.aggregationGroups.get(aggregationId);\n      \n      if (!aggregation) {\n        throw new Error(`聚合组不存在: ${aggregationId}`);\n      }\n      \n      // 获取优化时间范围内的预测数据\n      const forecastData = await this.getOptimizationForecastData(\n        aggregation,\n        optimizationParams.time_horizon\n      );\n      \n      // 构建优化问题\n      const optimizationProblem = this.buildVPPOptimizationProblem(\n        aggregation,\n        forecastData,\n        optimizationParams\n      );\n      \n      // 执行多目标优化\n      const optimizationSolution = await this.solveVPPOptimization(\n        optimizationProblem\n      );\n      \n      // 生成运营计划\n      const operationalPlan = this.generateOperationalPlan(\n        optimizationSolution,\n        aggregation\n      );\n      \n      // 风险评估和调整\n      const riskAdjustedPlan = await this.adjustPlanForRisks(\n        operationalPlan,\n        optimizationParams\n      );\n      \n      // 制定应急预案\n      const contingencyPlans = this.developContingencyPlans(\n        riskAdjustedPlan,\n        aggregation\n      );\n      \n      const result = {\n        optimization_id: optimizationId,\n        aggregation_id: aggregationId,\n        optimization_time: new Date().toISOString(),\n        time_horizon: optimizationParams.time_horizon,\n        \n        // 预测数据\n        forecast_data: forecastData,\n        \n        // 优化问题\n        optimization_problem: {\n          objective_functions: optimizationProblem.objectives,\n          constraints: optimizationProblem.constraints,\n          decision_variables: optimizationProblem.variables\n        },\n        \n        // 优化解\n        optimization_solution: optimizationSolution,\n        \n        // 运营计划\n        operational_plan: riskAdjustedPlan,\n        \n        // 应急预案\n        contingency_plans: contingencyPlans,\n        \n        // 预期效益\n        expected_benefits: {\n          revenue_optimization: optimizationSolution.revenue_improvement,\n          cost_reduction: optimizationSolution.cost_reduction,\n          efficiency_gain: optimizationSolution.efficiency_improvement,\n          risk_mitigation: optimizationSolution.risk_reduction\n        },\n        \n        // 关键绩效指标\n        kpis: {\n          capacity_factor: this.calculateCapacityFactor(riskAdjustedPlan),\n          revenue_per_mw: this.calculateRevenuePerMW(riskAdjustedPlan),\n          operational_efficiency: this.calculateOperationalEfficiency(riskAdjustedPlan),\n          market_participation_rate: this.calculateMarketParticipationRate(riskAdjustedPlan)\n        },\n        \n        // 实施指导\n        implementation_guidance: {\n          execution_sequence: this.defineExecutionSequence(riskAdjustedPlan),\n          resource_allocation: this.defineResourceAllocation(riskAdjustedPlan),\n          monitoring_points: this.defineMonitoringPoints(riskAdjustedPlan),\n          success_criteria: this.defineSuccessCriteria(optimizationParams)\n        }\n      };\n      \n      // 存储优化结果\n      this.optimizationResults.set(optimizationId, result);\n      \n      logger.info(`虚拟电厂运营优化完成: ${optimizationId}, 预期收益提升: ${result.expected_benefits.revenue_optimization}%`);\n      this.emit('vpp_optimization_completed', result);\n      \n      return result;\n    } catch (error) {\n      logger.error('优化虚拟电厂运营失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 启动实时运营\n   */\n  async startRealTimeOperations() {\n    // 每5分钟更新资源状态\n    setInterval(async () => {\n      try {\n        await this.updateResourceStatus();\n      } catch (error) {\n        logger.error('更新资源状态失败:', error);\n      }\n    }, MATH_CONSTANTS.FIVE * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n    \n    // 每15分钟更新功率预测\n    setInterval(async () => {\n      try {\n        await this.updatePowerForecasts();\n      } catch (error) {\n        logger.error('更新功率预测失败:', error);\n      }\n    }, MATH_CONSTANTS.FIFTEEN * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n    \n    // 每小时执行运营优化\n    setInterval(async () => {\n      try {\n        await this.executeHourlyOptimization();\n      } catch (error) {\n        logger.error('执行小时优化失败:', error);\n      }\n    }, MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.SIXTY * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n    \n    // 实时监控市场信号\n    setInterval(async () => {\n      try {\n        await this.monitorMarketSignals();\n      } catch (error) {\n        logger.error('监控市场信号失败:', error);\n      }\n    }, MATH_CONSTANTS.FIVE * MATH_CONSTANTS.MILLISECONDS_PER_SECOND * MATH_CONSTANTS.MILLISECONDS_PER_SECOND);\n  }\n\n  // 资源评估和聚合方法\n  async assessResourceQualification(resources) {\n    const qualified = [];\n    \n    for (const resource of resources) {\n      const qualification = await this.evaluateResourceQualification(resource);\n      \n      if (qualification.qualified) {\n        qualified.push({\n          ...resource,\n          qualification: qualification,\n          market_readiness: this.assessMarketReadiness(resource),\n          technical_capability: this.assessTechnicalCapability(resource)\n        });\n      }\n    }\n    \n    return qualified;\n  }\n\n  async executeAggregationStrategy(resources, strategy) {\n    switch (strategy) {\n      case 'homogeneous':\n        return this.executeHomogeneousAggregation(resources);\n      case 'heterogeneous':\n        return this.executeHeterogeneousAggregation(resources);\n      case 'geographic':\n        return this.executeGeographicAggregation(resources);\n      case 'market_oriented':\n        return this.executeMarketOrientedAggregation(resources);\n      default:\n        throw new Error(`未知的聚合策略: ${strategy}`);\n    }\n  }\n\n  executeHeterogeneousAggregation(resources) {\n    const groups = [];\n    \n    // 按互补性分组\n    const generationResources = resources.filter(r => \n      ['solar_pv', 'wind_turbine', 'chp_unit'].includes(r.type)\n    );\n    const storageResources = resources.filter(r => \n      r.type === 'battery_storage'\n    );\n    const loadResources = resources.filter(r => \n      ['flexible_load', 'ev_charging'].includes(r.type)\n    );\n    \n    // 创建平衡组合\n    if (generationResources.length > 0 && storageResources.length > 0) {\n      groups.push({\n        id: 'generation_storage_group',\n        type: 'generation_storage',\n        resources: [...generationResources, ...storageResources],\n        characteristics: {\n          variability: 'medium',\n          controllability: 'high',\n          market_value: 'high'\n        }\n      });\n    }\n    \n    if (loadResources.length > 0) {\n      groups.push({\n        id: 'demand_response_group',\n        type: 'demand_response',\n        resources: loadResources,\n        characteristics: {\n          variability: 'low',\n          controllability: 'high',\n          market_value: 'medium'\n        }\n      });\n    }\n    \n    return { groups, strategy: 'heterogeneous' };\n  }\n\n  calculateAggregatedCapacity(groups) {\n    let totalCapacity = 0;\n    let totalGeneration = 0;\n    let totalStorage = 0;\n    let totalLoad = 0;\n    \n    const capacityByType = {};\n    \n    groups.forEach(group => {\n      group.resources.forEach(resource => {\n        totalCapacity += resource.capacity;\n        \n        if (!capacityByType[resource.type]) {\n          capacityByType[resource.type] = 0;\n        }\n        capacityByType[resource.type] += resource.capacity;\n        \n        switch (resource.category || this.resourceTypes[resource.type]?.category) {\n          case 'renewable_generation':\n          case 'controllable_generation':\n            totalGeneration += resource.capacity;\n            break;\n          case 'energy_storage':\n            totalStorage += resource.capacity;\n            break;\n          case 'demand_response':\n          case 'flexible_load':\n            totalLoad += resource.capacity;\n            break;\n        }\n      });\n    });\n    \n    return {\n      total_capacity: totalCapacity,\n      generation_capacity: totalGeneration,\n      storage_capacity: totalStorage,\n      load_capacity: totalLoad,\n      capacity_by_type: capacityByType,\n      diversity_index: this.calculateDiversityIndex(capacityByType),\n      flexibility_index: this.calculateFlexibilityIndex(groups)\n    };\n  }\n\n  // 市场交易方法\n  async developBiddingStrategy(aggregation, marketInfo, forecast, params) {\n    const strategy = {\n      market_type: marketInfo.type,\n      bidding_approach: params.bidding_approach || 'price_taker',\n      risk_tolerance: params.risk_tolerance || 'medium',\n      \n      // 价格策略\n      price_strategy: {\n        base_price: this.calculateBasePrice(forecast, marketInfo),\n        price_adjustment: this.calculatePriceAdjustment(aggregation, params),\n        price_limits: {\n          min_price: params.min_price || 0,\n          max_price: params.max_price || 1000\n        }\n      },\n      \n      // 数量策略\n      quantity_strategy: {\n        base_quantity: this.calculateBaseQuantity(aggregation, forecast),\n        quantity_adjustment: this.calculateQuantityAdjustment(params),\n        quantity_limits: {\n          min_quantity: 0,\n          max_quantity: aggregation.aggregated_capacity.total_capacity\n        }\n      },\n      \n      // 风险管理\n      risk_management: {\n        hedging_ratio: params.hedging_ratio || 0.8,\n        stop_loss: params.stop_loss || 0.1,\n        position_limits: this.calculatePositionLimits(aggregation)\n      }\n    };\n    \n    return strategy;\n  }\n\n  async submitBids(tradingId, marketType, strategy) {\n    const bids = [];\n    \n    // 根据策略生成投标曲线\n    const biddingCurve = this.generateBiddingCurve(strategy);\n    \n    biddingCurve.forEach((point, index) => {\n      bids.push({\n        bid_id: `${tradingId}_${index}`,\n        price: point.price,\n        quantity: point.quantity,\n        type: point.type, // 'buy' or 'sell'\n        time_period: point.time_period,\n        submission_time: new Date().toISOString()\n      });\n    });\n    \n    // 模拟投标提交\n    const submission = {\n      trading_id: tradingId,\n      market_type: marketType,\n      bids: bids,\n      submission_time: new Date().toISOString(),\n      status: 'submitted'\n    };\n    \n    logger.info(`投标提交完成: ${tradingId}, 投标数量: ${bids.length}`);\n    \n    return submission;\n  }\n\n  async waitForMarketClearing(tradingId, marketType) {\n    // 模拟等待市场出清\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // 模拟市场出清结果\n    const clearing = {\n      trading_id: tradingId,\n      market_type: marketType,\n      clearing_time: new Date().toISOString(),\n      clearing_price: 300 + Math.random() * 200, // 300-500元/MWh\n      cleared_quantity: 50 + Math.random() * 100, // 50-150MW\n      market_status: 'cleared',\n      \n      // 个人投标结果\n      bid_results: this.generateBidResults(tradingId),\n      \n      // 市场统计\n      market_statistics: {\n        total_supply: 1000 + Math.random() * 500,\n        total_demand: 950 + Math.random() * 600,\n        price_volatility: Math.random() * 0.2,\n        participation_rate: 0.8 + Math.random() * 0.15\n      }\n    };\n    \n    return clearing;\n  }\n\n  // 辅助服务方法\n  async verifyServiceCapability(aggregation, serviceType) {\n    const requirements = this.ancillaryServiceTypes[serviceType]?.technical_requirements;\n    \n    if (!requirements) {\n      return { qualified: false, reason: '未知的辅助服务类型' };\n    }\n    \n    const capability = {\n      qualified: true,\n      reasons: [],\n      \n      // 容量检查\n      capacity_check: {\n        required: requirements.min_capacity,\n        available: aggregation.aggregated_capacity.total_capacity,\n        passed: aggregation.aggregated_capacity.total_capacity >= requirements.min_capacity\n      },\n      \n      // 响应时间检查\n      response_time_check: {\n        required: requirements.response_time || '10min',\n        available: aggregation.technical_metrics.response_time,\n        passed: this.compareResponseTime(\n          aggregation.technical_metrics.response_time,\n          requirements.response_time\n        )\n      },\n      \n      // 可用性检查\n      availability_check: {\n        required: requirements.availability,\n        available: aggregation.technical_metrics.availability,\n        passed: aggregation.technical_metrics.availability >= requirements.availability\n      }\n    };\n    \n    // 检查是否通过所有要求\n    if (!capability.capacity_check.passed) {\n      capability.qualified = false;\n      capability.reasons.push('容量不足');\n    }\n    \n    if (!capability.response_time_check.passed) {\n      capability.qualified = false;\n      capability.reasons.push('响应时间不满足要求');\n    }\n    \n    if (!capability.availability_check.passed) {\n      capability.qualified = false;\n      capability.reasons.push('可用性不满足要求');\n    }\n    \n    return capability;\n  }\n\n  // 优化方法\n  buildVPPOptimizationProblem(aggregation, forecastData, params) {\n    return {\n      // 目标函数\n      objectives: {\n        revenue_maximization: {\n          weight: params.revenue_weight || 0.6,\n          function: 'maximize_market_revenue'\n        },\n        cost_minimization: {\n          weight: params.cost_weight || 0.3,\n          function: 'minimize_operational_cost'\n        },\n        risk_minimization: {\n          weight: params.risk_weight || 0.1,\n          function: 'minimize_portfolio_risk'\n        }\n      },\n      \n      // 约束条件\n      constraints: {\n        power_balance: 'generation + storage_discharge = load + storage_charge',\n        capacity_limits: 'resource_output <= resource_capacity',\n        ramp_rate_limits: 'power_change <= ramp_rate * time_interval',\n        energy_limits: 'storage_energy <= storage_capacity',\n        market_limits: 'bid_quantity <= available_capacity',\n        technical_limits: 'resource_operation within technical_envelope'\n      },\n      \n      // 决策变量\n      variables: {\n        generation_schedule: 'continuous',\n        storage_schedule: 'continuous',\n        load_schedule: 'continuous',\n        market_bids: 'continuous',\n        service_provision: 'binary'\n      },\n      \n      // 预测数据\n      forecasts: forecastData,\n      \n      // 时间范围\n      time_horizon: params.time_horizon,\n      time_resolution: params.time_resolution || '15min'\n    };\n  }\n\n  async solveVPPOptimization(problem) {\n    // 简化的优化求解\n    // 实际应用中应使用专业的优化求解器\n    \n    const solution = {\n      optimal_value: 1000000 + Math.random() * 500000, // 100-150万元\n      \n      // 优化结果\n      generation_schedule: this.generateOptimalGenerationSchedule(problem),\n      storage_schedule: this.generateOptimalStorageSchedule(problem),\n      market_participation: this.generateOptimalMarketParticipation(problem),\n      service_provision: this.generateOptimalServiceProvision(problem),\n      \n      // 性能指标\n      revenue_improvement: 15 + Math.random() * 10, // 15-25%\n      cost_reduction: 8 + Math.random() * 7, // 8-15%\n      efficiency_improvement: 5 + Math.random() * 5, // 5-10%\n      risk_reduction: 10 + Math.random() * 10, // 10-20%\n      \n      // 求解信息\n      solver_info: {\n        algorithm: 'mixed_integer_programming',\n        iterations: 100 + Math.floor(Math.random() * 200),\n        solve_time: 5 + Math.random() * 10, // 5-15秒\n        optimality_gap: Math.random() * 0.01 // 0-1%\n      }\n    };\n    \n    return solution;\n  }\n\n  // 辅助方法\n  generateAggregationId(parkId, strategy) {\n    return `VPP_AGG_${parkId}_${strategy}_${Date.now()}`;\n  }\n\n  generateTradingId(aggregationId, marketType) {\n    return `VPP_TRADE_${aggregationId}_${marketType}_${Date.now()}`;\n  }\n\n  generateServiceId(aggregationId, serviceType) {\n    return `VPP_SVC_${aggregationId}_${serviceType}_${Date.now()}`;\n  }\n\n  generateOptimizationId(aggregationId) {\n    return `VPP_OPT_${aggregationId}_${Date.now()}`;\n  }\n\n  // 模拟数据获取方法\n  async initializeDistributedResources() {\n    const resources = [\n      {\n        id: 'solar_001',\n        type: 'solar_pv',\n        capacity: 100,\n        location: { lat: 39.9042, lng: 116.4074 },\n        owner: 'park_operator'\n      },\n      {\n        id: 'battery_001',\n        type: 'battery_storage',\n        capacity: 50,\n        location: { lat: 39.9042, lng: 116.4074 },\n        owner: 'park_operator'\n      }\n    ];\n    \n    resources.forEach(resource => {\n      this.distributedResources.set(resource.id, resource);\n    });\n    \n    logger.info(`已初始化分布式资源 ${resources.length} 个`);\n  }\n\n  async setupAggregationGroups() {\n    // 设置默认聚合组\n    logger.info('聚合组设置完成');\n  }\n\n  async initializeForecastModels() {\n    const models = {\n      solar_forecast: { accuracy: 0.85, horizon: '48h' },\n      wind_forecast: { accuracy: 0.75, horizon: '24h' },\n      load_forecast: { accuracy: 0.9, horizon: '72h' },\n      price_forecast: { accuracy: 0.7, horizon: '24h' }\n    };\n    \n    Object.keys(models).forEach(model => {\n      this.forecastModels.set(model, models[model]);\n    });\n    \n    logger.info('预测模型初始化完成');\n  }\n\n  async setupTradingStrategies() {\n    const strategies = {\n      conservative: { risk_tolerance: 'low', return_target: 0.08 },\n      moderate: { risk_tolerance: 'medium', return_target: 0.12 },\n      aggressive: { risk_tolerance: 'high', return_target: 0.18 }\n    };\n    \n    Object.keys(strategies).forEach(strategy => {\n      this.tradingStrategies.set(strategy, strategies[strategy]);\n    });\n    \n    logger.info('交易策略设置完成');\n  }\n\n  async updateResourceStatus() {\n    // 更新所有资源状态\n    for (const [id, resource] of this.distributedResources) {\n      const status = await this.getResourceRealTimeStatus(id);\n      resource.current_status = status;\n    }\n  }\n\n  async updatePowerForecasts() {\n    // 更新功率预测\n    for (const [id, model] of this.forecastModels) {\n      const forecast = await this.generateForecast(id);\n      model.latest_forecast = forecast;\n    }\n  }\n\n  async executeHourlyOptimization() {\n    // 执行小时优化\n    for (const [id, aggregation] of this.aggregationGroups) {\n      try {\n        await this.optimizeVPPOperation(id, { time_horizon: '4h' });\n      } catch (error) {\n        logger.error(`聚合组 ${id} 优化失败:`, error);\n      }\n    }\n  }\n\n  async monitorMarketSignals() {\n    // 监控市场信号\n    const signals = await this.getMarketSignals();\n    \n    signals.forEach(signal => {\n      if (signal.type === 'price_spike' && signal.value > 800) {\n        this.emit('market_alert', {\n          type: 'high_price',\n          value: signal.value,\n          action: 'increase_generation'\n        });\n      }\n    });\n  }\n\n  async getResourceRealTimeStatus(resourceId) {\n    return {\n      power_output: 50 + Math.random() * 50,\n      availability: 0.95 + Math.random() * 0.05,\n      efficiency: 0.9 + Math.random() * 0.05,\n      temperature: 25 + Math.random() * 10,\n      last_update: new Date().toISOString()\n    };\n  }\n\n  async generateForecast(modelId) {\n    const hours = 24;\n    const forecast = [];\n    \n    for (let i = 0; i < hours; i++) {\n      forecast.push({\n        hour: i,\n        value: 50 + 30 * Math.sin(i * Math.PI / 12) + Math.random() * 20,\n        confidence: 0.8 + Math.random() * 0.15\n      });\n    }\n    \n    return forecast;\n  }\n\n  async getMarketSignals() {\n    return [\n      {\n        type: 'price_update',\n        value: 400 + Math.random() * 300,\n        timestamp: new Date().toISOString()\n      },\n      {\n        type: 'demand_forecast',\n        value: 2000 + Math.random() * 500,\n        timestamp: new Date().toISOString()\n      }\n    ];\n  }\n\n  // 其他计算方法的简化实现\n  calculateDiversityIndex(capacityByType) {\n    const types = Object.keys(capacityByType);\n    const totalCapacity = Object.values(capacityByType).reduce((sum, cap) => sum + cap, 0);\n    \n    let diversity = 0;\n    types.forEach(type => {\n      const share = capacityByType[type] / totalCapacity;\n      diversity -= share * Math.log(share);\n    });\n    \n    return diversity / Math.log(types.length); // 归一化到0-1\n  }\n\n  calculateFlexibilityIndex(groups) {\n    let totalFlexibility = 0;\n    let totalCapacity = 0;\n    \n    groups.forEach(group => {\n      group.resources.forEach(resource => {\n        const flexibility = this.getResourceFlexibility(resource.type);\n        totalFlexibility += flexibility * resource.capacity;\n        totalCapacity += resource.capacity;\n      });\n    });\n    \n    return totalCapacity > 0 ? totalFlexibility / totalCapacity : 0;\n  }\n\n  getResourceFlexibility(resourceType) {\n    const flexibilityMap = {\n      solar_pv: 0.2,\n      wind_turbine: 0.3,\n      battery_storage: 1.0,\n      flexible_load: 0.8,\n      ev_charging: 0.7,\n      chp_unit: 0.6\n    };\n    \n    return flexibilityMap[resourceType] || 0.5;\n  }\n}\n\nexport default VirtualPowerPlantCenter;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/batteryOptimization.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":13,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":52},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.001.","line":54,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":54,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2067,2109],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3863,3903],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":187,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":187,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":196,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":196,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5257,5289],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":233,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":233,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":243,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":243,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":271,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":271,"endColumn":18},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 22.","line":271,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":271,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1.2.","line":272,"column":13,"nodeType":"Literal","messageId":"noMagic","endLine":272,"endColumn":16},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.3.","line":272,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":272,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":273,"column":13,"nodeType":"Literal","messageId":"noMagic","endLine":273,"endColumn":16},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.3.","line":273,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":273,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6508,6550],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":301,"column":9,"nodeType":"Literal","messageId":"noMagic","endLine":301,"endColumn":12},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":301,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":301,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 150.","line":301,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":301,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":301,"column":76,"nodeType":"Literal","messageId":"noMagic","endLine":301,"endColumn":79},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":301,"column":82,"nodeType":"Literal","messageId":"noMagic","endLine":301,"endColumn":84},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":310,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":310,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7261,7306],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.3.","line":324,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":324,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":326,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":326,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":337,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":337,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":337,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":337,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.9.","line":337,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":337,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":337,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":337,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":339,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":339,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.2.","line":341,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":341,"endColumn":57},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1.2.","line":352,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":352,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9.","line":352,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":352,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 6.","line":352,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":352,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":352,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":352,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":394,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":394,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":395,"column":67,"nodeType":"Literal","messageId":"noMagic","endLine":395,"endColumn":70},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.2.","line":401,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":401,"endColumn":20},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.3.","line":401,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":401,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":401,"column":65,"nodeType":"Literal","messageId":"noMagic","endLine":401,"endColumn":66},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":411,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":411,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":411,"column":38,"nodeType":"Literal","messageId":"noMagic","endLine":411,"endColumn":41},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":411,"column":72,"nodeType":"Literal","messageId":"noMagic","endLine":411,"endColumn":73},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":421,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":421,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.6.","line":430,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":430,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":439,"column":26,"nodeType":"Literal","messageId":"noMagic","endLine":439,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":449,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":449,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12078,12122],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":458,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":458,"endColumn":56},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":487,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":487,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13019,13063],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":501,"column":11,"nodeType":"Literal","messageId":"noMagic","endLine":501,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":501,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":501,"endColumn":18},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":501,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":501,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":502,"column":11,"nodeType":"Literal","messageId":"noMagic","endLine":502,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":502,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":502,"endColumn":18},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":502,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":502,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":502,"column":26,"nodeType":"Literal","messageId":"noMagic","endLine":502,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":503,"column":11,"nodeType":"Literal","messageId":"noMagic","endLine":503,"endColumn":12},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":503,"column":15,"nodeType":"Literal","messageId":"noMagic","endLine":503,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":503,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":503,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":503,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":503,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":503,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":503,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":590,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":590,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":590,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":590,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.001.","line":622,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":622,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":641,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":641,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":648,"column":80,"nodeType":"Literal","messageId":"noMagic","endLine":648,"endColumn":82},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":648,"column":84,"nodeType":"Literal","messageId":"noMagic","endLine":648,"endColumn":85},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":649,"column":74,"nodeType":"Literal","messageId":"noMagic","endLine":649,"endColumn":76},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":649,"column":78,"nodeType":"Literal","messageId":"noMagic","endLine":649,"endColumn":79},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":675,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":675,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17508,17613],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":691,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":691,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17906,17941],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":699,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":699,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[18115,18155],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":71,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 引入必要的模块\nimport * as tf from '@tensorflow/tfjs-node';\nimport fs from 'fs/promises';\n\n// 储能设备状态模拟数据\nconst batteryStatusData = [\n  { timestamp: '2025-06-01T00:00:00Z', soc: 0.8, power: 50, voltage: 400 },\n  { timestamp: '2025-06-01T01:00:00Z', soc: 0.75, power: 60, voltage: 395 }\n  // ... 更多历史数据\n];\n\n// 准备训练数据\nfunction _prepareTrainingData(data, windowSize = 24) {\n  const xs = [];\n  const ys = [];\n\n  for (let i = windowSize; i < data.length; i++) {\n    const window = data.slice(i - windowSize, i).map((d) => d.soc);\n    xs.push(window);\n    ys.push(data[i].soc);\n  }\n\n  return {\n    xs: tf.tensor2d(xs, [xs.length, windowSize]),\n    ys: tf.tensor2d(ys, [ys.length, 1])\n  };\n}\n\n// 创建LSTM模型\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\nfunction _createModel(inputShape) {\n  const model = tf.sequential();\n\n  model.add(\n    tf.layers.lstm({\n      units: 64,\n      inputShape,\n      returnSequences: false\n    })\n  );\n\n  model.add(tf.layers.dense({ units: 32, activation: 'relu' }));\n  model.add(tf.layers.dense({ units: 1 }));\n\n  model.compile({\n    optimizer: tf.train.adam(0.001),\n    loss: 'meanSquaredError'\n  });\n\n  return model;\n}\n\n// 加载训练数据\nasync function _loadMockTrainingData() {\n  const fs = require('fs').promises;\n  const csv = require('csv-parser');\n  const results = [];\n\n  try {\n    const data = await fs.readFile(\n      '/Users/xunan/Documents/WebStormProjects/0C/test-data/battery_data.csv',\n      'utf8'\n    );\n\n    // 解析CSV数据\n    return new Promise((resolve, reject) => {\n      require('stream')\n        .Readable.from(data)\n        .pipe(csv())\n        .on('data', (data) =>\n          results.push({\n            timestamp: data.timestamp,\n            soc: parseFloat(data.soc),\n            power: parseFloat(data.power),\n            voltage: parseFloat(data.voltage),\n            temperature: parseFloat(data.temperature)\n          })\n        )\n        .on('end', () => resolve(results))\n        .on('error', reject);\n    });\n  } catch (error) {\n    console.error('加载训练数据失败:', error.message);\n    throw new Error('TRAINING_DATA_LOAD_FAILED');\n  }\n}\n\n// 预处理数据\nfunction preprocessTrainingData(data) {\n  // 检查数据有效性\n  if (!data || data.length === 0) {\n    throw new Error('EMPTY_TRAINING_DATA');\n  }\n\n  // 提取特征和标签\n  const features = [];\n  const labels = [];\n\n  // 使用过去24个时间步的数据预测下一个时间步的SOC\n  const windowSize = 24;\n\n  for (let i = windowSize; i < data.length; i++) {\n    // 提取特征窗口\n    const window = data.slice(i - windowSize, i);\n    const featureRow = [];\n\n    // 为每个时间步提取特征\n    window.forEach((point) => {\n      featureRow.push(point.soc);\n      featureRow.push(point.power);\n      featureRow.push(point.voltage);\n      featureRow.push(point.temperature);\n    });\n\n    features.push(featureRow);\n    labels.push([data[i].soc]); // 预测下一个时间步的SOC\n  }\n\n  // 数据归一化\n  const featureTensor = tf.tensor2d(features);\n  const labelTensor = tf.tensor2d(labels);\n\n  // 计算特征的均值和标准差\n  const featureMean = featureTensor.mean(0);\n  const featureStd = featureTensor.std(0);\n\n  // 标准化特征 (避免除以零)\n  const epsilon = 1e-8;\n  const normalizedFeatures = featureTensor.sub(featureMean).div(featureStd.add(epsilon));\n\n  // 保存归一化参数供推理时使用\n  // 保存归一化参数供推理时使用\n  (async () => {\n    global.batteryModelStats = {\n      mean: await featureMean.array(),\n      std: await featureStd.array()\n    };\n  })();\n\n  return {\n    features: normalizedFeatures,\n    labels: labelTensor\n  };\n}\n\n// 训练储能优化模型\nexport async function trainModel() {\n  try {\n    // 加载训练数据\n    const data = await loadTrainingData();\n\n    // 预处理数据\n    const { features, labels } = preprocessTrainingData(data);\n\n    // 创建模型\n    const model = createBatteryOptimizationModel();\n\n    // 训练模型\n    await trainBatteryOptimizationModel(model, features, labels);\n\n    // 保存模型\n    await saveModel(model);\n  } catch (error) {\n    console.error('模型训练失败:', error.message);\n    throw error;\n  }\n}\n\n// 创建储能优化路由\nexport function setupBatteryRoutes(app, authenticateToken) {\n  // 储能优化接口\n  app.get('/battery/optimization', authenticateToken(), async (req, res) => {\n    try {\n      // 获取查询参数\n      const { buildingId, start_time, end_time, interval } = req.query;\n\n      // 参数验证\n      if (!buildingId) {\n        return res.status(400).json({\n          error: {\n            code: 'MISSING_BUILDING_ID',\n            message: '缺少必要参数: buildingId'\n          }\n        });\n      }\n\n      if (!start_time || !end_time) {\n        return res.status(400).json({\n          error: {\n            code: 'INVALID_TIME_RANGE',\n            message: '缺少必要时间参数: start_time, end_time'\n          }\n        });\n      }\n\n      // 调用优化模型 - 暂时返回模拟数据\n      const optimization = {\n        buildingId,\n        timeRange: { start_time, end_time },\n        interval: interval || '1h',\n        strategies: [\n          {\n            timestamp: start_time,\n            strategy: 'charge',\n            description: `建议在低电价时段充电`,\n            priority: 8,\n            economicImpact: '预计节省成本: 50元',\n            carbonImpact: '预计减少碳排放: 25kgCO2'\n          }\n        ],\n        summary: {\n          totalSavings: 150,\n          carbonReduction: 75,\n          efficiency: 0.92\n        }\n      };\n\n      // 返回优化结果\n      res.json(optimization);\n    } catch (error) {\n      console.error('储能优化错误:', error);\n\n      // 如果已经是特定错误响应，直接返回\n      if (error.code && error.message) {\n        return res.status(500).json({\n          error: {\n            code: error.code,\n            message: error.message,\n            details: error.stack\n          }\n        });\n      }\n\n      // 否则返回通用错误\n      res.status(500).json({\n        error: {\n          code: 'INTERNAL_SERVER_ERROR',\n          message: '储能优化失败',\n          details: error.message\n        }\n      });\n    }\n  });\n\n  // 返回app对象以便链式调用\n  return app;\n}\n\n// 获取电价数据\nasync function getElectricityPrices(startTime, endTime) {\n  try {\n    // 实际应用中应从API获取实时电价数据\n    // 此处使用模拟数据\n    const prices = [];\n    const start = new Date(startTime);\n    const end = new Date(endTime);\n\n    // 生成每小时电价 (0.5-1.5元/度)\n    for (let d = new Date(start); d <= new Date(end); d.setHours(d.getHours() + 1)) {\n      const hour = d.getHours();\n      // 模拟峰谷电价: 峰时(8-22点)高价，谷时(22-8点)低价\n      const price =\n        hour >= 8 && hour <= 22\n          ? 1.2 + Math.random() * 0.3 // 峰时: 1.2-1.5元\n          : 0.5 + Math.random() * 0.3; // 谷时: 0.5-0.8元\n\n      prices.push({\n        timestamp: d.toISOString(),\n        price: parseFloat(price.toFixed(2))\n      });\n    }\n    return prices;\n  } catch (error) {\n    console.error('获取电价数据失败:', error.message);\n    return [];\n  }\n}\n\n// 获取碳排放因子数据\nasync function getCarbonIntensity(startTime, endTime) {\n  try {\n    // 实际应用中应从API获取实时碳排放因子数据\n    // 此处使用模拟数据\n    const intensities = [];\n    const start = new Date(startTime);\n    const end = new Date(endTime);\n\n    // 生成每小时碳排放因子 (300-800 gCO2/kWh)\n    for (let d = new Date(start); d <= new Date(end); d.setHours(d.getHours() + 1)) {\n      const hour = d.getHours();\n      // 模拟碳排放因子变化\n      const intensity =\n        500 + Math.sin((hour / 24) * Math.PI * 2) * 150 + (Math.random() * 100 - 50);\n\n      intensities.push({\n        timestamp: d.toISOString(),\n        intensity: parseFloat(intensity.toFixed(0))\n      });\n    }\n    return intensities;\n  } catch (error) {\n    console.error('获取碳排放因子数据失败:', error.message);\n    return [];\n  }\n}\n\n// 计算充放电成本效益\nfunction calculateCostBenefit(soc, price, carbonIntensity, currentState) {\n  // 电池参数\n  const batteryCapacity = 1000; // 电池容量 kWh\n  const chargeEfficiency = 0.9; // 充电效率\n  const dischargeEfficiency = 0.9; // 放电效率\n  const carbonPrice = 0.05; // 碳价 元/gCO2\n\n  // 计算潜在收益\n  if (currentState === 'low' || soc < 0.3) {\n    // 需要充电时，计算成本\n    const requiredEnergy = batteryCapacity * (0.8 - soc);\n    const actualEnergyNeeded = requiredEnergy / chargeEfficiency;\n    const cost = actualEnergyNeeded * price;\n    const carbonEmission = actualEnergyNeeded * carbonIntensity;\n    const carbonCost = carbonEmission * carbonPrice;\n    const totalCost = cost + carbonCost;\n\n    return {\n      action: 'charge',\n      cost: totalCost,\n      carbonEmission,\n      benefitScore: price < 0.7 ? 8 : price < 0.9 ? 5 : 2 // 价格越低，充电收益越高\n    };\n  } else if (currentState === 'high' || soc > 0.7) {\n    // 需要放电时，计算收益\n    const availableEnergy = batteryCapacity * (soc - 0.2);\n    const actualEnergyAvailable = availableEnergy * dischargeEfficiency;\n    const revenue = actualEnergyAvailable * price;\n    const carbonReduction = actualEnergyAvailable * carbonIntensity;\n    const carbonBenefit = carbonReduction * carbonPrice;\n    const totalBenefit = revenue + carbonBenefit;\n\n    return {\n      action: 'discharge',\n      benefit: totalBenefit,\n      carbonReduction,\n      benefitScore: price > 1.2 ? 9 : price > 1.0 ? 6 : 3 // 价格越高，放电收益越高\n    };\n  }\n\n  return { action: 'none', benefitScore: 0 };\n}\n\n// 生成优化策略\nasync function _generateOptimizationStrategies(\n  predictions,\n  interval,\n  buildingId,\n  startTime,\n  endTime\n) {\n  if (!predictions || predictions.length === 0) {\n    throw new Error('无效的预测数据');\n  }\n\n  if (!interval || typeof interval !== 'string') {\n    interval = '1h'; // 默认间隔为1小时\n  }\n\n  // 获取电价和碳排放因子数据\n  const [electricityPrices, carbonIntensities] = await Promise.all([\n    getElectricityPrices(startTime, endTime),\n    getCarbonIntensity(startTime, endTime)\n  ]);\n\n  const strategies = [];\n  let currentState = 'normal';\n\n  try {\n    predictions.forEach((soc, index) => {\n      if (typeof soc !== 'number') {\n        throw new Error(`无效的预测值在索引 ${index}: ${soc}`);\n      }\n\n      const timestamp = calculatePredictionTime(index, interval);\n      // 查找对应时间的电价和碳排放因子\n      const priceData = electricityPrices.find((p) => p.timestamp === timestamp);\n      const carbonData = carbonIntensities.find((c) => c.timestamp === timestamp);\n      const price = priceData ? priceData.price : 0.8;\n      const carbonIntensity = carbonData ? carbonData.intensity : 500;\n\n      // 计算成本效益\n      const costBenefit = calculateCostBenefit(soc, price, carbonIntensity, currentState);\n\n      // 根据SOC值和成本效益生成优化策略\n      if (soc < 0.2 || (soc < 0.3 && costBenefit.benefitScore > 7)) {\n        strategies.push({\n          timestamp,\n          strategy: 'charge',\n          description: `电池${buildingId}电量过低(${soc.toFixed(2)}), 建议充电。当前电价: ${price.toFixed(2)}元/度, 碳排放因子: ${carbonIntensity}gCO2/kWh`,\n          priority: costBenefit.benefitScore,\n          economicImpact: `预计成本: ${costBenefit.cost ? costBenefit.cost.toFixed(2) : 'N/A'}元`,\n          carbonImpact: `预计碳排放: ${costBenefit.carbonEmission ? costBenefit.carbonEmission.toFixed(2) : 'N/A'}gCO2`\n        });\n        currentState = 'low';\n      } else if (soc > 0.8 || (soc > 0.7 && costBenefit.benefitScore > 7)) {\n        strategies.push({\n          timestamp,\n          strategy: 'discharge',\n          description: `电池${buildingId}电量过高(${soc.toFixed(2)}), 建议放电。当前电价: ${price.toFixed(2)}元/度, 碳排放因子: ${carbonIntensity}gCO2/kWh`,\n          priority: costBenefit.benefitScore,\n          economicImpact: `预计收益: ${costBenefit.benefit ? costBenefit.benefit.toFixed(2) : 'N/A'}元`,\n          carbonImpact: `预计碳减排: ${costBenefit.carbonReduction ? costBenefit.carbonReduction.toFixed(2) : 'N/A'}gCO2`\n        });\n        currentState = 'high';\n      } else if (currentState === 'low' && soc > 0.5) {\n        strategies.push({\n          timestamp,\n          strategy: 'stop_charge',\n          description: `电池${buildingId}电量已恢复(${soc.toFixed(2)}), 停止充电`,\n          priority: 2,\n          economicImpact: '无额外成本'\n        });\n        currentState = 'normal';\n      } else if (currentState === 'high' && soc < 0.6) {\n        strategies.push({\n          timestamp,\n          strategy: 'stop_discharge',\n          description: `电池${buildingId}电量已恢复(${soc.toFixed(2)}), 停止放电`,\n          priority: 2,\n          economicImpact: '无额外收益'\n        });\n        currentState = 'normal';\n      } else if (index % 24 === 0) {\n        strategies.push({\n          timestamp,\n          strategy: 'maintenance',\n          description: `电池${buildingId}每日状态维护检查`,\n          priority: 3\n        });\n      }\n    });\n  } catch (error) {\n    console.error(`生成优化策略失败: ${error.message}`);\n    throw error;\n  }\n\n  // 按优先级排序\n  return strategies.sort((a, b) => a.priority - b.priority);\n}\n\n// 准备预测输入数据\nfunction _preparePredictionInput(data, _windowSize = 24) {\n  if (!data || data.length === 0) {\n    throw new Error('无效的历史数据');\n  }\n\n  try {\n    // 确保数据按时间排序\n    const sortedData = data.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n\n    // 提取SOC值并进行归一化\n    const socValues = sortedData.map((d) => d.soc);\n\n    // 如果数据不足一个窗口，则使用所有可用数据\n    const windowSize = 24; // 使用明确的窗口大小\n    const inputData = socValues.slice(-windowSize);\n\n    // 数据归一化（确保值在0-1之间）\n    const normalized = normalizeData(inputData);\n\n    // 创建张量\n    const tensor = tf.tensor2d([normalized], [1, normalized.length]);\n\n    // 验证张量形状\n    if (tensor.shape[1] !== windowSize) {\n      throw new Error(`输入数据形状不匹配: 需要${windowSize}个时间步，但得到${tensor.shape[1]}个`);\n    }\n\n    return tensor;\n  } catch (error) {\n    console.error(`准备预测输入失败: ${error.message}`);\n    throw error;\n  }\n}\n\n// 数据归一化\nfunction normalizeData(data) {\n  const max = Math.max(...data);\n  return data.map((value) => value / max);\n}\n\n// 计算预测时间\nfunction calculatePredictionTime(baseTime, index, interval) {\n  const intervalMap = {\n    '1h': 60 * 60 * 1000,\n    '1d': 24 * 60 * 60 * 1000,\n    '1w': 7 * 24 * 60 * 60 * 1000\n  };\n\n  // 如果没有提供基准时间，使用当前时间\n  const baseTimestamp = baseTime ? new Date(baseTime).getTime() : Date.now();\n\n  if (isNaN(baseTimestamp)) {\n    throw new Error(`无效的基准时间: ${baseTime}`);\n  }\n\n  const intervalMs = intervalMap[interval] || intervalMap['1h'];\n  const ms = baseTimestamp + (index + 1) * intervalMs;\n\n  return new Date(ms).toISOString();\n}\n\n// 获取历史储能数据（模拟）\nfunction _getHistoricalBatteryData(start_time, end_time, buildingId) {\n  if (!start_time || !end_time) {\n    throw new Error('必须提供开始时间和结束时间');\n  }\n\n  // 验证时间格式\n  if (isNaN(Date.parse(start_time)) || isNaN(Date.parse(end_time))) {\n    throw new Error('无效的时间格式，应使用ISO 8601格式');\n  }\n\n  if (buildingId && typeof buildingId !== 'string') {\n    throw new Error('buildingId必须是字符串');\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      // 在实际应用中，这里应该查询数据库\n      // 并根据buildingId、start_time和end_time过滤数据\n      const filteredData = batteryStatusData.filter((dataPoint) => {\n        const timestamp = new Date(dataPoint.timestamp).getTime();\n        return (\n          timestamp >= new Date(start_time).getTime() && timestamp <= new Date(end_time).getTime()\n        );\n      });\n\n      resolve(filteredData);\n    } catch (error) {\n      reject(new Error(`获取历史数据失败: ${error.message}`));\n    }\n  });\n}\n\n// 模拟加载训练数据\nasync function loadTrainingData() {\n  // 在实际应用中，这里应该从数据库或API获取数据\n  return new Promise((resolve) => {\n    resolve(batteryStatusData);\n  });\n}\n\n// 预处理数据\nfunction _preprocessPredictionData(data) {\n  const _windowSize = 24;\n  const xs = [];\n  const ys = [];\n\n  for (let i = _windowSize; i < data.length; i++) {\n    const window = data.slice(i - _windowSize, i).map((d) => d.soc);\n    xs.push(window);\n    ys.push(data[i].soc);\n  }\n\n  return {\n    features: tf.tensor2d(xs, [xs.length, _windowSize]),\n    labels: tf.tensor2d(ys, [ys.length, 1])\n  };\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 42 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 45 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 48 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 51 行)\n}\n\n// 创建储能优化模型\nfunction createBatteryOptimizationModel() {\n  // 输入形状: [时间窗口大小, 特征数量]\n  // 时间窗口大小为24, 每个时间步有4个特征(soc, power, voltage, temperature)\n  const inputShape = [24, 4];\n\n  const model = tf.sequential();\n\n  // 第一层LSTM\n  model.add(\n    tf.layers.lstm({\n      units: 64,\n      inputShape,\n      returnSequences: true,\n      recurrentDropout: 0.2\n    })\n  );\n\n  // 第二层LSTM\n  model.add(\n    tf.layers.lstm({\n      units: 32,\n      returnSequences: false,\n      recurrentDropout: 0.2\n    })\n  );\n\n  // 全连接层\n  model.add(tf.layers.dense({ units: 16, activation: 'relu' }));\n  model.add(tf.layers.dropout({ rate: 0.3 }));\n\n  // 输出层 - 预测SOC值\n  model.add(tf.layers.dense({ units: 1, activation: 'linear' }));\n\n  // 编译模型\n  model.compile({\n    optimizer: tf.train.adam(0.001),\n    loss: 'meanAbsoluteError',\n    metrics: ['mse']\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 42 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 42 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 42 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 42 行)\n  });\n\n  return model;\n}\n\n// 训练储能优化模型\nasync function trainBatteryOptimizationModel(model, features, labels) {\n  // 划分训练集和验证集 (80%训练, 20%验证)\n  const trainSize = Math.floor(features.shape[0] * 0.8);\n  const trainFeatures = features.slice([0, 0], [trainSize, -1]);\n  const trainLabels = labels.slice([0, 0], [trainSize, -1]);\n  const valFeatures = features.slice([trainSize, 0], [-1, -1]);\n  const valLabels = labels.slice([trainSize, 0], [-1, -1]);\n\n  // 重塑特征以适应LSTM输入形状 [样本数, 时间步, 特征数]\n  const reshapedTrainFeatures = trainFeatures.reshape([trainFeatures.shape[0], 24, 4]);\n  const reshapedValFeatures = valFeatures.reshape([valFeatures.shape[0], 24, 4]);\n\n  // 设置训练参数\n  const batchSize = 32;\n  const epochs = 50;\n\n  // 训练模型\n  const history = await model.fit(reshapedTrainFeatures, trainLabels, {\n    batchSize,\n    epochs,\n    validationData: [reshapedValFeatures, valLabels],\n    callbacks: {\n      earlyStopping: {\n        monitor: 'val_loss',\n        patience: 5,\n        restoreBestWeights: true\n      },\n      reduceLROnPlateau: {\n        monitor: 'val_loss',\n        factor: 0.5,\n        patience: 3,\n        minLearningRate: 0.0001\n      }\n    }\n  });\n\n  console.log(\n    '模型训练完成，最终验证损失:',\n    history.history.val_loss[history.history.val_loss.length - 1]\n  );\n  return model;\n}\n\n// 保存模型\nasync function saveModel(model) {\n  try {\n    // 创建模型保存目录\n    const modelDir = '/Users/xunan/Documents/WebStormProjects/0C/models/battery-optimization';\n    await fs.mkdir(modelDir, { recursive: true });\n\n    // 保存模型\n    await model.save(`file://${modelDir}`);\n    console.log('模型已成功保存到:', modelDir);\n\n    // 保存归一化参数\n    await fs.writeFile(\n      `${modelDir}/normalization-stats.json`,\n      JSON.stringify(global.batteryModelStats, null, 2)\n    );\n  } catch (error) {\n    console.error('保存模型失败:', error.message);\n    throw new Error('MODEL_SAVE_FAILED');\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/cacheService.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: -2.","line":149,"column":14,"nodeType":"UnaryExpression","messageId":"noMagic","endLine":149,"endColumn":16},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: -2.","line":156,"column":14,"nodeType":"UnaryExpression","messageId":"noMagic","endLine":156,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import NodeCache from 'node-cache';\nimport logger from '../../shared/utils/logger.js';\n\n// 缓存配置\nconst CACHE_CONFIG = {\n  stdTTL: 300, // 默认缓存过期时间（秒）\n  checkperiod: 60, // 定期检查过期缓存的时间间隔（秒）\n  useClones: false // 不克隆对象，提高性能（注意：可能导致缓存对象被外部修改）\n};\n\n// 创建缓存实例\nconst cache = new NodeCache(CACHE_CONFIG);\n\n/**\n * 缓存服务类\n * 提供基础的缓存操作功能\n */\nclass CacheService {\n  constructor() {\n    // 监听缓存事件\n    cache.on('expired', (key, _value) => {\n      logger.debug(`缓存过期: ${key}`);\n    });\n\n    cache.on('flush', () => {\n      logger.info('缓存已清空');\n    });\n  }\n\n  /**\n   * 设置缓存\n   * @param {string} key - 缓存键\n   * @param {any} value - 缓存值\n   * @param {number} [ttl] - 过期时间（秒），默认使用全局配置\n   * @returns {boolean} - 是否设置成功\n   */\n  set(key, value, ttl = CACHE_CONFIG.stdTTL) {\n    if (!key) {\n      logger.error('缓存键不能为空');\n      return false;\n    }\n\n    try {\n      const success = cache.set(key, value, ttl);\n      if (success) {\n        logger.debug(`缓存设置成功: ${key}, TTL: ${ttl}秒`);\n      } else {\n        logger.warn(`缓存设置失败: ${key}`);\n      }\n      return success;\n    } catch (error) {\n      logger.error(`缓存设置错误: ${key}`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 获取缓存\n   * @param {string} key - 缓存键\n   * @returns {any} - 缓存值，若不存在则返回undefined\n   */\n  get(key) {\n    if (!key) {\n      logger.error('缓存键不能为空');\n      return undefined;\n    }\n\n    try {\n      const value = cache.get(key);\n      if (value !== undefined) {\n        logger.debug(`缓存命中: ${key}`);\n      } else {\n        logger.debug(`缓存未命中: ${key}`);\n      }\n      return value;\n    } catch (error) {\n      logger.error(`缓存获取错误: ${key}`, error);\n      return undefined;\n    }\n  }\n\n  /**\n   * 删除缓存\n   * @param {string} key - 缓存键\n   * @returns {number} - 被删除的缓存数量\n   */\n  del(key) {\n    if (!key) {\n      logger.error('缓存键不能为空');\n      return 0;\n    }\n\n    try {\n      const count = cache.del(key);\n      if (count > 0) {\n        logger.debug(`缓存删除成功: ${key}`);\n      } else {\n        logger.debug(`缓存删除失败，键不存在: ${key}`);\n      }\n      return count;\n    } catch (error) {\n      logger.error(`缓存删除错误: ${key}`, error);\n      return 0;\n    }\n  }\n\n  /**\n   * 批量删除缓存\n   * @param {string[]} keys - 缓存键数组\n   * @returns {number} - 被删除的缓存数量\n   */\n  delMulti(keys) {\n    if (!Array.isArray(keys) || keys.length === 0) {\n      logger.error('缓存键数组不能为空');\n      return 0;\n    }\n\n    try {\n      const count = cache.del(keys);\n      logger.debug(`批量删除缓存成功，共删除 ${count} 个缓存`);\n      return count;\n    } catch (error) {\n      logger.error('批量删除缓存错误', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 清空所有缓存\n   * @returns {void}\n   */\n  flushAll() {\n    try {\n      cache.flushAll();\n      logger.info('所有缓存已清空');\n    } catch (error) {\n      logger.error('清空缓存错误', error);\n    }\n  }\n\n  /**\n   * 获取缓存键的剩余生存时间\n   * @param {string} key - 缓存键\n   * @returns {number} - 剩余时间（秒），-1表示永不过期，-2表示键不存在\n   */\n  getTtl(key) {\n    if (!key) {\n      logger.error('缓存键不能为空');\n      return -2;\n    }\n\n    try {\n      return cache.getTtl(key);\n    } catch (error) {\n      logger.error(`获取缓存TTL错误: ${key}`, error);\n      return -2;\n    }\n  }\n\n  /**\n   * 设置缓存键的生存时间\n   * @param {string} key - 缓存键\n   * @param {number} ttl - 生存时间（秒）\n   * @returns {boolean} - 是否设置成功\n   */\n  setTtl(key, ttl) {\n    if (!key || typeof ttl !== 'number' || ttl <= 0) {\n      logger.error('缓存键和有效的TTL不能为空');\n      return false;\n    }\n\n    try {\n      return cache.ttl(key, ttl);\n    } catch (error) {\n      logger.error(`设置缓存TTL错误: ${key}`, error);\n      return false;\n    }\n  }\n\n  /**\n   * 获取缓存统计信息\n   * @returns {object} - 缓存统计数据\n   */\n  getStats() {\n    try {\n      return cache.getStats();\n    } catch (error) {\n      logger.error('获取缓存统计信息错误', error);\n      return null;\n    }\n  }\n\n  /**\n   * 缓存装饰器 - 用于装饰需要缓存的函数\n   * @param {number} ttl - 缓存过期时间（秒）\n   * @returns {Function} - 装饰器函数\n   */\n  cacheDecorator(ttl = CACHE_CONFIG.stdTTL) {\n    return (target, propertyKey, descriptor) => {\n      const originalMethod = descriptor.value;\n\n      descriptor.value = async function (...args) {\n        // 生成缓存键（类名+方法名+参数哈希）\n        const key = `${target.constructor.name}_${propertyKey}_${JSON.stringify(args)}`;\n\n        // 尝试从缓存获取\n        const cachedResult = this.get(key);\n        if (cachedResult !== undefined) {\n          return cachedResult;\n        }\n\n        // 调用原始方法\n        const result = await originalMethod.apply(this, args);\n\n        // 设置缓存\n        this.set(key, result, ttl);\n\n        return result;\n      };\n\n      return descriptor;\n    };\n  }\n}\n\n// 创建缓存服务实例\nconst cacheService = new CacheService();\n\nexport default cacheService;\n\nexport { CacheService };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/deviceApi.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":23,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[619,653],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1122,1156],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1759,1793],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2263,2297],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2808,2840],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3407,3441],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3906,3938],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { getAuthToken } from './auth';\n\nimport config from '../../shared/config/index.js';\nconst API_BASE_URL =\n  process.env.REACT_APP_API_BASE_URL || `http://localhost:${config.app.port}/api`;\n\n/**\n * 获取设备状态信息\n * @param {string} deviceId - 设备ID\n * @returns {Promise<Object>} 设备状态数据\n */\nexport const getDeviceStatus = async (deviceId) => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.get(`${API_BASE_URL}/devices/${deviceId}/status`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('获取设备状态失败:', error);\n    throw error.response?.data || { error: { message: '获取设备状态时发生错误' } };\n  }\n};\n\n/**\n * 获取设备列表\n * @param {Object} params - 查询参数\n * @returns {Promise<Object>} 设备列表数据\n */\nexport const fetchDevices = async (params = {}) => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.get(`${API_BASE_URL}/devices`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error('获取设备列表失败:', error);\n    throw error.response?.data || { error: { message: '获取设备列表时发生错误' } };\n  }\n};\n\n/**\n * 更新设备状态\n * @param {string} deviceId - 设备ID\n * @param {Object} statusData - 状态数据 { status, remark }\n * @returns {Promise<Object>} 更新结果\n */\nexport const updateDeviceStatus = async (deviceId, statusData) => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.patch(`${API_BASE_URL}/devices/${deviceId}/status`, statusData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('更新设备状态失败:', error);\n    throw error.response?.data || { error: { message: '更新设备状态时发生错误' } };\n  }\n};\n\n/**\n * 获取设备详情\n * @param {string} deviceId - 设备ID\n * @returns {Promise<Object>} 设备详情数据\n */\nexport const getDeviceDetails = async (deviceId) => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.get(`${API_BASE_URL}/devices/${deviceId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('获取设备详情失败:', error);\n    throw error.response?.data || { error: { message: '获取设备详情时发生错误' } };\n  }\n};\n\n/**\n * 创建设备\n * @param {Object} deviceData - 设备数据\n * @returns {Promise<Object>} 创建结果\n */\nexport const createDevice = async (deviceData) => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.post(`${API_BASE_URL}/devices`, deviceData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('创建设备失败:', error);\n    throw error.response?.data || { error: { message: '创建设备时发生错误' } };\n  }\n};\n\n/**\n * 更新设备信息\n * @param {string} deviceId - 设备ID\n * @param {Object} deviceData - 设备数据\n * @returns {Promise<Object>} 更新结果\n */\nexport const updateDevice = async (deviceId, deviceData) => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.put(`${API_BASE_URL}/devices/${deviceId}`, deviceData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('更新设备信息失败:', error);\n    throw error.response?.data || { error: { message: '更新设备信息时发生错误' } };\n  }\n};\n\n/**\n * 删除设备\n * @param {string} deviceId - 设备ID\n * @returns {Promise<Object>} 删除结果\n */\nexport const deleteDevice = async (deviceId) => {\n  try {\n    const token = getAuthToken();\n    const response = await axios.delete(`${API_BASE_URL}/devices/${deviceId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('删除设备失败:', error);\n    throw error.response?.data || { error: { message: '删除设备时发生错误' } };\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/emission.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'express' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5968.","line":42,"column":70,"nodeType":"Literal","messageId":"noMagic","endLine":42,"endColumn":76},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 365.","line":54,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":54,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":54,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":54,"endColumn":31},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":54,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":54,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":54,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":54,"endColumn":41},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":54,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":54,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":124,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":124,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3483,3516],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":138,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":138,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from 'express';\n// 引入必要的模块\nimport { createRequire } from 'module';\nconst _require = createRequire(import.meta.url);\n\n// 定义能源类型常量\nexport const ENERGY_TYPES = {\n  ELECTRICITY: 'electricity', // 电力\n  DIESEL: 'diesel', // 柴油\n  NATURAL_GAS: 'natural_gas', // 天然气\n  SOLAR: 'solar' // 光伏\n};\n\n// 定义能源消耗数据样本\nexport const energyConsumptionData = [\n  {\n    buildingId: 'B1',\n    timestamp: new Date('2023-06-01T00:00:00Z'),\n    energyType: ENERGY_TYPES.ELECTRICITY,\n    consumption: 1500, // 千瓦时\n    carbonEmission: 0.5 // 吨CO2\n  },\n  {\n    buildingId: 'B1',\n    timestamp: new Date('2023-06-01T00:00:00Z'),\n    energyType: ENERGY_TYPES.SOLAR,\n    consumption: 200, // 千瓦时\n    carbonEmission: 0.0 // 吨CO2\n  }\n];\n\n// 计算单个数据点的碳排放量\nfunction calculateEmission(dataPoint) {\n  // 使用默认碳排放因子（避免数据库查询）\n  const defaultCarbonFactors = {\n    electricity: 0.5968, // 电力碳排放因子 (kg CO2/kWh)\n    diesel: 2.68, // 柴油碳排放因子 (kg CO2/L)\n    natural_gas: 2.03, // 天然气碳排放因子 (kg CO2/m³)\n    solar: 0.0 // 光伏碳排放因子 (kg CO2/kWh)\n  };\n\n  const carbonFactor = defaultCarbonFactors[dataPoint.energyType] || 0.5968;\n  return dataPoint.consumption * carbonFactor;\n}\n\n// 验证时间范围有效性\nfunction validateTimeRange(start_time, end_time) {\n  // 验证开始时间是否早于结束时间\n  if (start_time >= end_time) {\n    throw new Error('开始时间必须早于结束时间');\n  }\n\n  // 验证时间范围是否超过限制（例如不能超过1年）\n  const oneYearInMs = 365 * 24 * 60 * 60 * 1000;\n  if (end_time - start_time > oneYearInMs) {\n    throw new Error('时间范围不能超过一年');\n  }\n}\n\n// 计算指定时间范围内的总碳排放量\nfunction calculateTotalEmissions(startTime, endTime) {\n  // 过滤指定时间范围内的能源消耗数据\n  const filteredData = energyConsumptionData.filter(\n    (dataPoint) => dataPoint.timestamp >= startTime && dataPoint.timestamp <= endTime\n  );\n\n  // 计算总碳排放量\n  let totalEmissions = 0;\n\n  filteredData.forEach((dataPoint) => {\n    totalEmissions += calculateEmission(dataPoint);\n  });\n\n  // 返回总碳排放量\n  return totalEmissions;\n}\n\n// 计算详细的碳排放明细\nfunction calculateEmissionDetails(startTime, endTime) {\n  // 过滤指定时间范围内的能源消耗数据\n  const filteredData = energyConsumptionData.filter(\n    (dataPoint) => dataPoint.timestamp >= startTime && dataPoint.timestamp <= endTime\n  );\n\n  // 按能源类型分类统计\n  const emissionDetails = {};\n  let totalEmissions = 0;\n\n  filteredData.forEach((dataPoint) => {\n    const emission = calculateEmission(dataPoint);\n    if (!emissionDetails[dataPoint.energyType]) {\n      emissionDetails[dataPoint.energyType] = {\n        energyType: dataPoint.energyType,\n        totalConsumption: 0,\n        totalEmission: 0\n      };\n    }\n\n    emissionDetails[dataPoint.energyType].totalConsumption += dataPoint.consumption;\n    emissionDetails[dataPoint.energyType].totalEmission += emission;\n    totalEmissions += emission;\n  });\n\n  // 返回汇总结果\n  return {\n    total: totalEmissions,\n    details: Object.values(emissionDetails),\n    timeRange: {\n      start: startTime,\n      end: endTime\n    }\n  };\n}\n\n// 创建碳排放计算路由\nfunction setupCarbonRoutes(app, authenticateToken) {\n  // 碳排放计算接口\n  app.get('/carbon/emissions', authenticateToken(), async (req, res) => {\n    try {\n      // 获取查询参数\n      const { buildingId, startDate, endDate } = req.query;\n\n      if (!buildingId || !startDate || !endDate) {\n        res.status(400).json({ error: '缺少必要参数' });\n        return;\n      }\n\n      // 验证时间范围\n      validateTimeRange(new Date(startDate), new Date(endDate));\n\n      // 调用碳排放计算模型\n      const emissions = calculateEmissionDetails(new Date(startDate), new Date(endDate));\n\n      // 返回计算结果\n      res.json(emissions);\n    } catch (error) {\n      console.error('碳排放计算错误:', error);\n      res.status(500).json({ error: '碳排放计算失败' });\n    }\n  });\n\n  // 返回app对象以便链式调用\n  return app;\n}\n\n// 统一导出所有 functions 和 constants\nexport {\n  calculateEmission,\n  validateTimeRange,\n  calculateTotalEmissions,\n  calculateEmissionDetails,\n  setupCarbonRoutes\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/energyPrediction.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":13,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.001.","line":54,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":54,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1643,1698],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1801,1831],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1856,1896],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":99,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":99,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":108,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":108,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":108,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":108,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":108,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":108,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":108,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":108,"endColumn":62},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":109,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":109,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":109,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":109,"endColumn":60},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2647,2679],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":117,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":117,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":141,"column":11,"nodeType":"Literal","messageId":"noMagic","endLine":141,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":141,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":141,"endColumn":18},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":141,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":141,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":142,"column":11,"nodeType":"Literal","messageId":"noMagic","endLine":142,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":142,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":142,"endColumn":18},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":142,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":142,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":142,"column":26,"nodeType":"Literal","messageId":"noMagic","endLine":142,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":143,"column":11,"nodeType":"Literal","messageId":"noMagic","endLine":143,"endColumn":12},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":143,"column":15,"nodeType":"Literal","messageId":"noMagic","endLine":143,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":143,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":143,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":143,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":143,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":143,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":143,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createRequire } from 'module';\nconst require = createRequire(import.meta.url);\nconst tf = require('@tensorflow/tfjs-node');\n\n// 模拟历史能源数据\nconst historicalEnergyData = [\n  { timestamp: '2025-06-01T00:00:00Z', value: 1200, type: 'electricity' },\n  { timestamp: '2025-06-01T01:00:00Z', value: 1100, type: 'electricity' }\n  // ... 更多历史数据\n];\n\n// 准备训练数据\nfunction prepareTrainingData(data, windowSize = 24) {\n  const xs = [];\n  const ys = [];\n\n  for (let i = windowSize; i < data.length; i++) {\n    const window = data.slice(i - windowSize, i).map((d) => d.value);\n    xs.push(window);\n    ys.push(data[i].value);\n  }\n\n  return {\n    xs: tf.tensor2d(xs, [xs.length, windowSize]),\n    ys: tf.tensor2d(ys, [ys.length, 1])\n  };\n}\n\n// 创建LSTM模型\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\nfunction createModel(inputShape) {\n  const model = tf.sequential();\n\n  model.add(\n    tf.layers.lstm({\n      units: 64,\n      inputShape,\n      returnSequences: false\n    })\n  );\n\n  model.add(tf.layers.dense({ units: 32, activation: 'relu' }));\n  model.add(tf.layers.dense({ units: 1 }));\n\n  model.compile({\n    optimizer: tf.train.adam(0.001),\n    loss: 'meanSquaredError'\n  });\n\n  return model;\n}\n\n// 训练模型\nasync function _trainModel() {\n  try {\n    // 准备训练数据\n    const { xs, ys } = prepareTrainingData(historicalEnergyData);\n\n    // 创建模型\n    const model = createModel([xs.shape[1], 1]);\n\n    // 训练模型\n    await model.fit(xs, ys, {\n      epochs: 100,\n      batchSize: 32,\n      shuffle: true,\n      callbacks: {\n        onEpochEnd: (epoch, logs) => {\n          console.log(`Epoch ${epoch + 1}: Loss = ${logs.loss}`);\n        }\n      }\n    });\n\n    // 保存模型\n    await model.save('file://./models/energy-prediction');\n    console.log('能源预测模型训练完成并已保存');\n  } catch (error) {\n    console.error('模型训练失败:', error.message);\n  }\n}\n\n// 创建能源预测路由\nfunction setupEnergyRoutes(app, authenticateToken) {\n  // 能源消耗预测接口\n  app.get('/energy/predict', authenticateToken(), async (req, res) => {\n    try {\n      // 获取查询参数\n      const { buildingId, days } = req.query;\n\n      if (!buildingId || !days) {\n        res.status(400).json({ error: '缺少必要参数' });\n        return;\n      }\n\n      // 调用预测模型 - 暂时返回模拟数据\n      const prediction = {\n        buildingId,\n        days: parseInt(days),\n        predictions: Array.from({ length: parseInt(days) }, (_, i) => ({\n          date: new Date(Date.now() + i * 24 * 60 * 60 * 1000).toISOString(),\n          predicted_consumption: Math.random() * 1000 + 500\n        }))\n      };\n\n      // 返回预测结果\n      res.json(prediction);\n    } catch (error) {\n      console.error('能源预测错误:', error);\n      res.status(500).json({ error: '能源预测失败' });\n    }\n  });\n\n  // 返回app对象以便链式调用\n  return app;\n}\n\n// 准备预测输入数据\nfunction _preparePredictionInput(data) {\n  // 实际开发中需要将历史数据转换为模型输入格式\n  const normalized = normalizeData(data.map((d) => d.value));\n  return tf.tensor2d([normalized], [1, normalized.length]);\n}\n\n// 数据归一化\nfunction normalizeData(data) {\n  const max = Math.max(...data);\n  return data.map((value) => value / max);\n}\n\n// 计算预测时间\nfunction _calculatePredictionTime(index, interval) {\n  const intervalMap = {\n    '1h': 60 * 60 * 1000,\n    '1d': 24 * 60 * 60 * 1000,\n    '1w': 7 * 24 * 60 * 60 * 1000\n  };\n\n  const ms = new Date().getTime() + (index + 1) * (intervalMap[interval] || intervalMap['1h']);\n  return new Date(ms).toISOString();\n}\n\n// 获取历史能源数据（模拟）\nfunction _getHistoricalEnergyData(_device_id, _start_time, _end_time) {\n  // 实际开发中应从数据库查询数据\n  return new Promise((resolve) => {\n    resolve(historicalEnergyData);\n  });\n}\n\n// 导出能源预测功能\nexport { setupEnergyRoutes };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/jwtManager.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":56,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":56,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":65,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":65,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5622,5667],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3600000.","line":279,"column":8,"nodeType":"Literal","messageId":"noMagic","endLine":279,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":287,"column":76,"nodeType":"Literal","messageId":"noMagic","endLine":287,"endColumn":80},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7650,7772],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":332,"column":19,"nodeType":"Literal","messageId":"noMagic","endLine":332,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":340,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":340,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8823,8855],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":342,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":342,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":348,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":348,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":386,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":386,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10084,10123],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * JWT认证管理器\n * 提供安全的JWT token生成、验证和刷新机制\n */\n\nimport jwt from 'jsonwebtoken';\nimport { promisify } from 'util';\nimport crypto from 'crypto';\nimport { AuthenticationError, AuthorizationError as _AuthorizationError } from '../../shared/utils/AppError.js';\nimport config from '../../shared/config/index.js';\n\n/**\n * JWT管理器类\n */\nexport class JWTManager {\n  constructor(options = {}) {\n    this.secret = options.secret || config.jwt.secret;\n    this.accessTokenExpiry = options.accessTokenExpiry || config.jwt.accessTokenExpiry;\n    this.refreshTokenExpiry = options.refreshTokenExpiry || config.jwt.refreshTokenExpiry;\n    this.issuer = options.issuer || config.jwt.issuer;\n    this.audience = options.audience || config.jwt.audience;\n\n    // 用于存储已撤销的token（在生产环境中应使用Redis）\n    this.revokedTokens = new Set();\n\n    // 用于存储刷新token（在生产环境中应使用数据库）\n    this.refreshTokenStore = new Map();\n\n    // 定期清理过期的撤销token\n    this.startCleanupInterval();\n  }\n\n  /**\n   * 生成访问token和刷新token\n   * @param {Object} payload - token载荷\n   * @param {Object} options - 额外选项\n   * @returns {Object} 包含accessToken和refreshToken的对象\n   */\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 53 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 53 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 53 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 53 行)\n\n  generateTokens(payload, options = {}) {\n    const tokenId = crypto.randomUUID();\n    const refreshTokenId = crypto.randomUUID();\n\n    const accessTokenPayload = {\n      ...payload,\n      jti: tokenId, // JWT ID\n      type: 'access',\n      iat: Math.floor(Date.now() / 1000)\n    };\n\n    const refreshTokenPayload = {\n      userId: payload.userId,\n      username: payload.username,\n      jti: refreshTokenId,\n      type: 'refresh',\n      accessTokenId: tokenId,\n      iat: Math.floor(Date.now() / 1000)\n    };\n\n    const accessToken = jwt.sign(accessTokenPayload, this.secret, {\n      expiresIn: this.accessTokenExpiry,\n      issuer: this.issuer,\n      audience: this.audience,\n      algorithm: 'HS256'\n    });\n\n    const refreshToken = jwt.sign(refreshTokenPayload, this.secret, {\n      expiresIn: this.refreshTokenExpiry,\n      issuer: this.issuer,\n      audience: this.audience,\n      algorithm: 'HS256'\n    });\n\n    // 存储刷新token信息\n    this.refreshTokenStore.set(refreshTokenId, {\n      userId: payload.userId,\n      accessTokenId: tokenId,\n      createdAt: new Date(),\n      lastUsed: new Date(),\n      userAgent: options.userAgent,\n      ipAddress: options.ipAddress\n    });\n\n    return {\n      accessToken,\n      refreshToken,\n      tokenType: 'Bearer',\n      expiresIn: this.parseExpiry(this.accessTokenExpiry),\n      tokenId,\n      refreshTokenId\n    };\n  }\n\n  /**\n   * 验证token\n   * @param {string} token - 要验证的token\n   * @param {string} expectedType - 期望的token类型（access或refresh）\n   * @returns {Object} 解码后的token载荷\n   */\n  async verifyToken(token, expectedType = 'access') {\n    try {\n      const decoded = await promisify(jwt.verify)(token, this.secret, {\n        issuer: this.issuer,\n        audience: this.audience,\n        algorithms: ['HS256']\n      });\n\n      // 检查token类型\n      if (decoded.type !== expectedType) {\n        throw new AuthenticationError(\n          `无效的token类型，期望: ${expectedType}，实际: ${decoded.type}`\n        );\n      }\n\n      // 检查token是否已被撤销\n      if (this.revokedTokens.has(decoded.jti)) {\n        throw new AuthenticationError('Token已被撤销');\n      }\n\n      // 如果是刷新token，检查是否存在于存储中\n      if (expectedType === 'refresh' && !this.refreshTokenStore.has(decoded.jti)) {\n        throw new AuthenticationError('刷新token无效或已过期');\n      }\n\n      return decoded;\n    } catch (error) {\n      if (error.name === 'TokenExpiredError') {\n        throw new AuthenticationError('Token已过期');\n      } else if (error.name === 'JsonWebTokenError') {\n        throw new AuthenticationError('无效的token格式');\n      } else if (error.name === 'NotBeforeError') {\n        throw new AuthenticationError('Token尚未生效');\n      } else if (error instanceof AuthenticationError) {\n        throw error;\n      } else {\n        throw new AuthenticationError('Token验证失败');\n      }\n    }\n  }\n\n  /**\n   * 刷新访问token\n   * @param {string} refreshToken - 刷新token\n   * @param {Object} options - 额外选项\n   * @returns {Object} 新的token对\n   */\n  async refreshAccessToken(refreshToken, options = {}) {\n    // 验证刷新token\n    const decoded = await this.verifyToken(refreshToken, 'refresh');\n\n    // 获取刷新token信息\n    const refreshTokenInfo = this.refreshTokenStore.get(decoded.jti);\n    if (!refreshTokenInfo) {\n      throw new AuthenticationError('刷新token信息不存在');\n    }\n\n    // 撤销旧的访问token\n    this.revokedTokens.add(decoded.accessTokenId);\n\n    // 更新刷新token的最后使用时间\n    refreshTokenInfo.lastUsed = new Date();\n\n    // 生成新的访问token\n    const newTokens = this.generateTokens(\n      {\n        userId: decoded.userId,\n        username: decoded.username,\n        role: decoded.role\n      },\n      options\n    );\n\n    // 移除旧的刷新token\n    this.refreshTokenStore.delete(decoded.jti);\n\n    return newTokens;\n  }\n\n  /**\n   * 撤销token\n   * @param {string} token - 要撤销的token\n   * @param {string} tokenType - token类型\n   */\n  async revokeToken(token, tokenType = 'access') {\n    try {\n      const decoded = await this.verifyToken(token, tokenType);\n\n      if (tokenType === 'access') {\n        this.revokedTokens.add(decoded.jti);\n      } else if (tokenType === 'refresh') {\n        this.refreshTokenStore.delete(decoded.jti);\n        // 同时撤销相关的访问token\n        const refreshTokenInfo = this.refreshTokenStore.get(decoded.jti);\n        if (refreshTokenInfo) {\n          this.revokedTokens.add(refreshTokenInfo.accessTokenId);\n        }\n      }\n    } catch (error) {\n      // 即使token无效，也不抛出错误，因为撤销操作应该是幂等的\n      console.warn('撤销token时发生错误:', error.message);\n    }\n  }\n\n  /**\n   * 撤销用户的所有token\n   * @param {number} userId - 用户ID\n   */\n  revokeAllUserTokens(userId) {\n    // 撤销所有刷新token\n    for (const [tokenId, tokenInfo] of this.refreshTokenStore.entries()) {\n      if (tokenInfo.userId === userId) {\n        this.refreshTokenStore.delete(tokenId);\n        this.revokedTokens.add(tokenInfo.accessTokenId);\n      }\n    }\n  }\n\n  /**\n   * 获取用户的活跃会话\n   * @param {number} userId - 用户ID\n   * @returns {Array} 活跃会话列表\n   */\n  getUserActiveSessions(userId) {\n    const sessions = [];\n\n    for (const [tokenId, tokenInfo] of this.refreshTokenStore.entries()) {\n      if (tokenInfo.userId === userId) {\n        sessions.push({\n          tokenId,\n          createdAt: tokenInfo.createdAt,\n          lastUsed: tokenInfo.lastUsed,\n          userAgent: tokenInfo.userAgent,\n          ipAddress: tokenInfo.ipAddress\n        });\n      }\n    }\n\n    return sessions.sort((a, b) => b.lastUsed - a.lastUsed);\n  }\n\n  /**\n   * 解析过期时间字符串为秒数\n   * @param {string} expiry - 过期时间字符串（如'15m', '7d'）\n   * @returns {number} 秒数\n   */\n  parseExpiry(expiry) {\n    const units = {\n      s: 1,\n      m: 60,\n      h: 3600,\n      d: 86400,\n      w: 604800\n    };\n\n    const match = expiry.match(/^(\\d+)([smhdw])$/);\n    if (!match) {\n      throw new Error(`无效的过期时间格式: ${expiry}`);\n    }\n\n    const [, value, unit] = match;\n    return parseInt(value) * units[unit];\n  }\n\n  /**\n   * 启动清理定时器\n   */\n  startCleanupInterval() {\n    // 每小时清理一次过期的撤销token\n    setInterval(() => {\n      this.cleanupExpiredTokens();\n    }, 3600000); // 1小时\n  }\n\n  /**\n   * 清理过期的token\n   */\n  cleanupExpiredTokens() {\n    const now = new Date();\n    const refreshTokenExpiry = this.parseExpiry(this.refreshTokenExpiry) * 1000;\n\n    // 清理过期的刷新token\n    for (const [tokenId, tokenInfo] of this.refreshTokenStore.entries()) {\n      if (now - tokenInfo.createdAt > refreshTokenExpiry) {\n        this.refreshTokenStore.delete(tokenId);\n        this.revokedTokens.add(tokenInfo.accessTokenId);\n      }\n    }\n\n    console.log(\n      `[JWT] 清理完成，当前撤销token数量: ${this.revokedTokens.size}，活跃刷新token数量: ${this.refreshTokenStore.size}`\n    );\n  }\n\n  /**\n   * 获取统计信息\n   * @returns {Object} 统计信息\n   */\n  getStats() {\n    return {\n      revokedTokensCount: this.revokedTokens.size,\n      activeRefreshTokensCount: this.refreshTokenStore.size,\n      activeUsersCount: new Set([...this.refreshTokenStore.values()].map((info) => info.userId))\n        .size\n    };\n  }\n}\n\n/**\n * 认证中间件\n * @param {Array} requiredRoles - 需要的角色列表\n * @returns {Function} Express中间件函数\n */\nexport const authenticateToken =\n  (requiredRoles = []) =>\n    (req, res, next) => {\n    // 从请求头中获取 Authorization 字段\n      const authHeader = req.headers.authorization;\n      // 如果请求头存在，则提取 token 部分\n      const token = authHeader && authHeader.split(' ')[1]?.trim();\n\n      // 如果 token 不存在，则返回 401 Unauthorized\n      if (token === null) {\n        return res\n          .status(401)\n          .json({ error: { code: 'UNAUTHORIZED', message: '未提供身份验证令牌' } });\n      }\n\n      // 使用 jwt.verify 来验证 token\n      jwt.verify(token, config.jwt.secret, (err, user) => {\n        if (err) {\n        // 如果 token 无效或已过期，则返回 403 Forbidden\n          console.error('JWT 验证失败:', err);\n          return res\n            .status(403)\n            .json({ error: { code: 'FORBIDDEN', message: '无效或已过期的令牌' } });\n        }\n\n        // 检查角色权限\n        if (requiredRoles.length > 0 && (!user || !requiredRoles.includes(user.role))) {\n          return res.status(403).json({\n            error: { code: 'FORBIDDEN', message: `需要以下角色之一: ${requiredRoles.join(', ')}` }\n          });\n        }\n\n        // 如果 token 有效，则将解码后的用户信息附加到请求对象上\n        req.user = user;\n        // 调用 next() 将控制权交给下一个中间件或路由处理器\n        next();\n      });\n    };\n\n/**\n * 可选认证中间件（不强制要求认证）\n */\nexport const optionalAuth = () => {\n  const jwtManager = new JWTManager();\n\n  return async (req, res, next) => {\n    try {\n      const authHeader = req.headers.authorization;\n\n      if (authHeader) {\n        const parts = authHeader.split(' ');\n        if (parts.length === 2 && parts[0] === 'Bearer') {\n          const [, token] = parts;\n          const decoded = await jwtManager.verifyToken(token, 'access');\n\n          req.user = {\n            id: decoded.userId,\n            username: decoded.username,\n            role: decoded.role,\n            tokenId: decoded.jti\n          };\n        }\n      }\n    } catch (error) {\n      // 可选认证失败时不抛出错误，只是不设置用户信息\n      console.warn('可选认证失败:', error.message);\n    }\n\n    next();\n  };\n};\n\n// 创建默认的JWT管理器实例\nexport const defaultJWTManager = new JWTManager();\n\nexport default {\n  JWTManager,\n  authenticateToken,\n  optionalAuth,\n  defaultJWTManager\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/performanceMonitor.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.001.","line":13,"column":13,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":18},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.005.","line":13,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.01.","line":13,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":31},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.025.","line":13,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.05.","line":13,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.1.","line":13,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.25.","line":13,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":13,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":60},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 2.5.","line":13,"column":65,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":68},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":13,"column":70,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":71},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":13,"column":73,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":75},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[825,946],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":44,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":44,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":121,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":121,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":121,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":121,"endColumn":56},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":126,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":126,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2791,2850],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2855,2945],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":127,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":127,"endColumn":68},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":127,"column":71,"nodeType":"Literal","messageId":"noMagic","endLine":127,"endColumn":75},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":127,"column":79,"nodeType":"Literal","messageId":"noMagic","endLine":127,"endColumn":82},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":127,"column":86,"nodeType":"Literal","messageId":"noMagic","endLine":127,"endColumn":89},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2950,2997],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3002,3048],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5000.","line":132,"column":6,"nodeType":"Literal","messageId":"noMagic","endLine":132,"endColumn":10},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":155,"column":8,"nodeType":"Literal","messageId":"noMagic","endLine":155,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { performance } from 'node:perf_hooks';\nimport { Histogram } from 'prom-client';\nimport os from 'os'; // 引入操作系统模块\n\n// 全局变量跟踪活动连接数\nlet activeConnections = 0;\n\n// 创建API延迟指标直方图\nexport const apiLatencyHistogram = new Histogram({\n  name: 'api_latency_seconds',\n  help: 'API请求延迟分布',\n  labelNames: ['method', 'route', 'status_code'],\n  buckets: [0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]\n});\n\n// 性能监控中间件\nexport function monitorAPILatency(req, res, next) {\n  const start = performance.now();\n  let connectionCounted = false;\n\n  // 增加活动连接数\n  activeConnections++;\n\n  // 定义减少连接数的函数，确保只执行一次\n  const decreaseConnection = () => {\n    if (!connectionCounted) {\n      activeConnections--;\n      connectionCounted = true;\n    }\n  };\n\n  res.on('finish', () => {\n    const duration = performance.now() - start;\n    console.log(\n      `API: ${req.method} ${req.originalUrl} | 延迟: ${duration.toFixed(2)}ms | 状态码: ${res.statusCode}`\n    );\n    // 记录性能指标\n    apiLatencyHistogram.observe(\n      {\n        method: req.method,\n        route: req.route ? req.route.path : req.path,\n        status_code: res.statusCode\n      },\n      duration / 1000\n    ); // 转换为秒\n\n    // 减少活动连接数\n    decreaseConnection();\n  });\n\n  res.on('close', () => {\n    // 连接关闭时也减少计数\n    decreaseConnection();\n  });\n\n  next();\n}\n\n// 获取当前活动连接数\nexport function getActiveConnections() {\n  return activeConnections;\n}\n\n// 创建性能指标路由\nexport function setupPerformanceRoutes(app) {\n  // 获取系统性能指标\n  app.get('/api/performance/metrics', (req, res) => {\n    const [cpuLoad] = os.loadavg();\n    const metrics = {\n      apiLatency: collectAPILatencyMetrics(),\n      memoryUsage: process.memoryUsage(),\n      cpuLoad,\n      uptime: process.uptime(),\n      timestamp: new Date().toISOString()\n    };\n    res.json(metrics);\n  });\n\n  return app;\n}\n\n// 收集API延迟指标\nexport function collectAPILatencyMetrics() {\n  const metrics = {};\n\n  try {\n    // 获取直方图指标\n    const histogramData = apiLatencyHistogram.get();\n\n    // 返回基本的指标信息\n    metrics.summary = {\n      name: histogramData.name,\n      help: histogramData.help,\n      type: histogramData.type,\n      values: histogramData.values || []\n    };\n\n    // 添加简单的统计信息\n    metrics.totalRequests = histogramData.values ? histogramData.values.length : 0;\n  } catch (error) {\n    // 如果获取指标失败，返回默认值\n    metrics.summary = {\n      name: 'api_latency_seconds',\n      help: 'API请求延迟分布',\n      type: 'histogram',\n      values: []\n    };\n    metrics.totalRequests = 0;\n  }\n\n  return metrics;\n}\n\n// 启动性能监控\nexport function startPerformanceMonitoring() {\n  // 记录启动时间\n  const startTime = Date.now();\n\n  // 定期记录性能指标\n  setInterval(() => {\n    const uptime = (Date.now() - startTime) / 1000 / 60; // 运行时间（分钟）\n    const memoryUsage = process.memoryUsage();\n    const [cpuLoad] = os.loadavg();\n\n    // 记录性能日志\n    console.log(`\\n📊 系统性能报告 - 运行时间: ${uptime.toFixed(2)} 分钟`);\n    console.log(`💾 内存使用: ${Math.round((memoryUsage.heapUsed / 1024 / 1024) * 100) / 100}MB`);\n    console.log(`🧠 CPU负载: ${cpuLoad.toFixed(2)}`);\n    console.log(`📦 活动连接数: ${activeConnections}`);\n\n    // 如果需要，可以添加更多自定义性能指标\n  }, 5000); // 每5分钟记录一次性能数据\n}\n\n// 设置延迟测试路由\nexport function delayTestRoute(app, authenticateToken) {\n  // 添加需要身份验证的延迟测试端点\n  app.get('/test/delay', authenticateToken(), (req, res) => {\n    // 记录请求开始时间\n    const startTime = performance.now();\n\n    // 模拟处理延迟（100ms）\n    setTimeout(() => {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      // 返回延迟信息\n      res.json({\n        message: '延迟测试成功',\n        requestTime: startTime,\n        responseTime: endTime,\n        delay: duration,\n        unit: 'milliseconds'\n      });\n    }, 100);\n  });\n\n  return app;\n}\n\n// 创建性能监控实例\nexport const performanceMonitor = {\n  monitorAPILatency,\n  setupPerformanceRoutes,\n  collectAPILatencyMetrics,\n  apiLatencyHistogram,\n  delayTestRoute,\n  startPerformanceMonitoring\n};\n\n// 将性能监控中间件导出\nexport default performanceMonitor;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/permission.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":46,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":46,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":53,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":53,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":55,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":55,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":57,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":57,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":85,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":85,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":116,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":116,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":121,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":121,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":129,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":129,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3443,3483],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":146,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":146,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 引入必要的模块\nimport jwt from 'jsonwebtoken';\nimport { v4 as uuidv4 } from 'uuid';\nimport config from '../../shared/config/index.js';\n\n// 定义角色常量\nexport const roles = {\n  ADMIN: 0,\n  ENERGY_MANAGER: 1,\n  CARBON_CALCULATION_VIEWER: 2,\n  MANAGE_CARBON_CALCULATION: 3,\n  SYSTEM_MONITOR: 4\n};\n\n// 用户权限定义\nconst permissions = {\n  MANAGE_USERS: 'manage_users',\n  MANAGE_DEVICES: 'manage_devices',\n  VIEW_ENERGY_DATA: 'view_energy_data',\n  MANAGE_ENERGY_PREDICTION: 'manage_energy_prediction',\n  MANAGE_CARBON_CALCULATION: 'manage_carbon_calculation',\n  ACCESS_DASHBOARD: 'access_dashboard'\n};\n\n// 角色权限映射\nconst _rolePermissions = {\n  [roles.ADMIN]: Object.values(permissions),\n  [roles.ENERGY_MANAGER]: [\n    permissions.VIEW_ENERGY_DATA,\n    permissions.MANAGE_ENERGY_PREDICTION,\n    permissions.MANAGE_CARBON_CALCULATION,\n    permissions.ACCESS_DASHBOARD\n  ],\n  [roles.VIEWER]: [permissions.VIEW_ENERGY_DATA, permissions.ACCESS_DASHBOARD]\n};\n\n// 权限验证中间件\nexport function authenticateToken() {\n  return (req, res, next) => {\n    // 从请求头中获取令牌\n    const authHeader = req.headers.authorization;\n    const token = authHeader && authHeader.split(' ')[1];\n\n    // 如果没有令牌，返回401未授权\n    if (!token) {\n      return res.status(401).json({ error: '缺少访问令牌' });\n    }\n\n    // 验证令牌\n    jwt.verify(token, config.jwt.secret, (err, user) => {\n      if (err) {\n        if (err.name === 'TokenExpiredError') {\n          return res.status(401).json({ error: '访问令牌已过期' });\n        } else if (err.name === 'JsonWebTokenError') {\n          return res.status(403).json({ error: '无效的访问令牌' });\n        }\n        return res.status(500).json({ error: '令牌验证失败' });\n      }\n\n      req.user = user;\n      next();\n    });\n  };\n}\n\n// 生成新的访问令牌\nexport function generateAccessToken(user) {\n  // 签发新的令牌\n  return jwt.sign(\n    {\n      username: user.username,\n      role: user.role,\n      userId: user.userId || uuidv4()\n    },\n    config.jwt.secret,\n    { expiresIn: config.jwt.accessTokenExpiry }\n  );\n}\n\n// 检查用户权限\nexport function checkPermission(requiredRole) {\n  return (req, res, next) => {\n    // 检查用户是否有足够的权限\n    if (!req.user || !req.user.role || req.user.role < requiredRole) {\n      return res.status(403).json({ error: '没有足够的权限执行此操作' });\n    }\n\n    // 用户有足够权限，继续执行下一个中间件\n    next();\n  };\n}\n\n// 用户权限管理\nexport function setupUserRoutes(app, authenticateToken) {\n  // 获取所有用户\n  app.get('/users', authenticateToken(), (req, res) => {\n    // 模拟用户数据库\n    const mockUsers = [\n      { id: 1, username: 'admin', roles: ['ADMIN'] },\n      { id: 2, username: 'manager', roles: ['ENERGY_MANAGER'] }\n    ];\n    const users = mockUsers.map((user) => ({\n      id: user.id,\n      username: user.username,\n      roles: user.roles\n    }));\n\n    res.json(users);\n  });\n\n  // 创建新用户\n  app.post('/users', authenticateToken(), (req, res) => {\n    const { username, password, role } = req.body;\n\n    if (!username || !password || !role) {\n      res.status(400).json({ error: '缺少必要参数' });\n      return;\n    }\n\n    if (roles[role] === undefined) {\n      res.status(400).json({ error: '无效的角色' });\n      return;\n    }\n\n    // 检查用户名是否已存在 - 模拟检查\n    const mockUsers = ['admin', 'manager'];\n    const existingUser = mockUsers.includes(username);\n    if (existingUser) {\n      res.status(400).json({ error: '用户名已存在' });\n      return;\n    }\n\n    // 创建新用户 - 模拟创建\n    const newUser = {\n      id: Date.now(),\n      username,\n      password: `hashed_${password}`, // 模拟密码哈希\n      roles: [role]\n    };\n\n    // 模拟保存到数据库\n    console.log('用户已创建:', newUser.username);\n\n    // 返回创建的用户（不包含密码）\n    const { password: _, ...userWithoutPassword } = newUser;\n    res.status(201).json(userWithoutPassword);\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/core/services/recommendationService.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":85,"column":26,"nodeType":"Literal","messageId":"noMagic","endLine":85,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: -3.","line":156,"column":22,"nodeType":"UnaryExpression","messageId":"noMagic","endLine":156,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":156,"column":72,"nodeType":"Literal","messageId":"noMagic","endLine":156,"endColumn":73},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: -3.","line":221,"column":39,"nodeType":"UnaryExpression","messageId":"noMagic","endLine":221,"endColumn":41},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":298,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":298,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":309,"column":63,"nodeType":"Literal","messageId":"noMagic","endLine":309,"endColumn":67},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":309,"column":70,"nodeType":"Literal","messageId":"noMagic","endLine":309,"endColumn":72},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":309,"column":75,"nodeType":"Literal","messageId":"noMagic","endLine":309,"endColumn":77},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":434,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":434,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":442,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":442,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":540,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":540,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":540,"column":85,"nodeType":"Literal","messageId":"noMagic","endLine":540,"endColumn":86},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":540,"column":89,"nodeType":"Literal","messageId":"noMagic","endLine":540,"endColumn":90},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":540,"column":93,"nodeType":"Literal","messageId":"noMagic","endLine":540,"endColumn":94},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":541,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":541,"endColumn":67},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":555,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":555,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 30.","line":556,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":556,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":556,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":556,"endColumn":61},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":606,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":606,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":606,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":606,"endColumn":60},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 30.","line":609,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":609,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 365.","line":610,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":610,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":612,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":612,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 365.","line":612,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":612,"endColumn":60},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":612,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":612,"endColumn":68},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":624,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":624,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":624,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":624,"endColumn":57},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":625,"column":61,"nodeType":"Literal","messageId":"noMagic","endLine":625,"endColumn":63},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":625,"column":66,"nodeType":"Literal","messageId":"noMagic","endLine":625,"endColumn":67},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":652,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":652,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":652,"column":61,"nodeType":"Literal","messageId":"noMagic","endLine":652,"endColumn":64},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 30.","line":654,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":654,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 12.","line":656,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":656,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":671,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":671,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":671,"column":80,"nodeType":"Literal","messageId":"noMagic","endLine":671,"endColumn":81},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":672,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":672,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":672,"column":56,"nodeType":"Literal","messageId":"noMagic","endLine":672,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":673,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":673,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5000.","line":699,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":699,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":699,"column":61,"nodeType":"Literal","messageId":"noMagic","endLine":699,"endColumn":65},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.2.","line":702,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":702,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.2.","line":703,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":703,"endColumn":62},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":776,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":776,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21385,21430],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Recommendation from '../models/recommendation.js';\nimport EnergyData from '../models/energyData.js';\nimport CarbonData from '../models/carbonData.js';\nimport Device from '../models/Device.js';\nimport StorageDevice from '../models/storageDevice.js';\nimport { Op } from 'sequelize';\nimport moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * 推荐服务类，处理推荐规则评估和建议生成\n */\nclass RecommendationService {\n  /**\n   * 基于系统数据生成推荐\n   * @param {Object} userContext - 用户上下文\n   * @returns {Promise<Array>} 推荐结果列表\n   */\n  static async generateSystemRecommendations(userContext) {\n    // 获取系统数据\n    const systemData = await this._collectSystemData(userContext);\n\n    // 丰富用户上下文\n    const enrichedContext = {\n      ...userContext,\n      ...systemData\n    };\n\n    // 使用推荐模型生成推荐\n    const recommendations = await Recommendation.generateRecommendations(enrichedContext);\n\n    // 增强推荐内容\n    const enhancedRecommendations = await this._enhanceRecommendations(recommendations);\n\n    return enhancedRecommendations;\n  }\n\n  /**\n   * 收集系统数据用于推荐\n   * @param {Object} userContext - 用户上下文\n   * @returns {Promise<Object>} 系统数据\n   */\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 25 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 25 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 25 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 25 行)\n\n  static async _collectSystemData(userContext) {\n    const { parkId, buildingId, timeRange = '7d' } = userContext;\n    const endDate = new Date();\n    const startDate = moment().subtract(this._parseTimeRange(timeRange), 'days').toDate();\n\n    // 并行收集各类数据\n    const [energyConsumption, carbonEmissions, deviceStatus, storageDevices, peakLoadData] =\n      await Promise.all([\n        this._getEnergyConsumption(parkId, buildingId, startDate, endDate),\n        this._getCarbonEmissions(parkId, buildingId, startDate, endDate),\n        this._getDeviceStatus(parkId, buildingId),\n        this._getStorageDevices(parkId, buildingId),\n        this._getPeakLoadData(parkId, buildingId, startDate, endDate)\n      ]);\n\n    return {\n      energyConsumption,\n      carbonEmissions,\n      deviceStatus,\n      storageDevices,\n      peakLoadData,\n      timeRange,\n      currentTime: new Date()\n    };\n  }\n\n  /**\n   * 解析时间范围字符串\n   * @param {string} timeRange - 时间范围字符串，如 '7d' 表示7天\n   * @returns {number} 天数\n   */\n  static _parseTimeRange(timeRange) {\n    const days = parseInt(timeRange.replace('d', ''), 10);\n    return isNaN(days) ? 7 : days;\n  }\n\n  /**\n   * 获取能源消耗数据\n   * @param {string} parkId - 园区ID\n   * @param {string} buildingId - 建筑ID\n   * @param {Date} startDate - 开始日期\n   * @param {Date} endDate - 结束日期\n   * @returns {Promise<Object>} 能源消耗数据\n   */\n  static async _getEnergyConsumption(parkId, buildingId, startDate, endDate) {\n    // 构建查询条件\n    const whereClause = { timestamp: { [Op.between]: [startDate, endDate] } };\n    if (parkId) {\n      whereClause.park_id = parkId;\n    }\n    if (buildingId) {\n      whereClause.building_id = buildingId;\n    }\n\n    // 查询能源数据\n    const energyData = await EnergyData.findAll({\n      where: whereClause,\n      attributes: [\n        [\n          EnergyData.sequelize.fn('strftime', '%Y-%m-%d', EnergyData.sequelize.col('timestamp')),\n          'date'\n        ],\n        [EnergyData.sequelize.fn('SUM', EnergyData.sequelize.col('value')), 'total_consumption'],\n        'type'\n      ],\n      group: ['date', 'type'],\n      order: [['date', 'ASC']]\n    });\n\n    // 格式化数据\n    const formattedData = {};\n    energyData.forEach((item) => {\n      const date = item.get('date');\n      const type = item.get('type');\n      const consumption = parseFloat(item.get('total_consumption'));\n\n      if (!formattedData[date]) {\n        formattedData[date] = {};\n      }\n      formattedData[date][type] = consumption;\n    });\n\n    // 计算平均值和趋势\n    const dailyAverages = {};\n    const energyTypes = new Set();\n\n    Object.values(formattedData).forEach((dailyData) => {\n      Object.entries(dailyData).forEach(([type, value]) => {\n        energyTypes.add(type);\n        // TODO: 考虑使用早期返回或策略模式来减少嵌套\n        // TODO: 考虑使用早期返回或策略模式来减少嵌套\n        // TODO: 考虑使用早期返回或策略模式来减少嵌套\n        // TODO: 考虑使用早期返回或策略模式来减少嵌套\n        if (!dailyAverages[type]) {\n          dailyAverages[type] = [];\n        }\n        dailyAverages[type].push(value);\n      });\n    });\n\n    const trends = {};\n    Object.entries(dailyAverages).forEach(([type, values]) => {\n      const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n      const recentAvg =\n        values.slice(-3).reduce((sum, val) => sum + val, 0) / Math.min(3, values.length);\n      trends[type] = {\n        average: avg,\n        recentAverage: recentAvg,\n        trend: recentAvg > avg ? 'increasing' : recentAvg < avg ? 'decreasing' : 'stable',\n        changeRate: avg ? Math.abs((recentAvg - avg) / avg) : 0\n      };\n    });\n\n    return {\n      dailyData: formattedData,\n      trends,\n      types: Array.from(energyTypes)\n    };\n  }\n\n  /**\n   * 获取碳排放数据\n   * @param {string} parkId - 园区ID\n   * @param {string} buildingId - 建筑ID\n   * @param {Date} startDate - 开始日期\n   * @param {Date} endDate - 结束日期\n   * @returns {Promise<Object>} 碳排放数据\n   */\n  static async _getCarbonEmissions(parkId, buildingId, startDate, endDate) {\n    // 构建查询条件\n    const whereClause = { timestamp: { [Op.between]: [startDate, endDate] } };\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (parkId) {\n      whereClause.park_id = parkId;\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (buildingId) {\n      whereClause.building_id = buildingId;\n    }\n\n    // 查询碳排放数据\n    const carbonData = await CarbonData.findAll({\n      where: whereClause,\n      attributes: [\n        [\n          CarbonData.sequelize.fn('strftime', '%Y-%m-%d', CarbonData.sequelize.col('timestamp')),\n          'date'\n        ],\n        [CarbonData.sequelize.fn('SUM', CarbonData.sequelize.col('value')), 'total_emissions']\n      ],\n      group: ['date'],\n      order: [['date', 'ASC']]\n    });\n\n    // 格式化数据\n    const dailyData = {};\n    carbonData.forEach((item) => {\n      dailyData[item.get('date')] = parseFloat(item.get('total_emissions'));\n    });\n\n    // 计算趋势\n    const values = Object.values(dailyData);\n    const avg = values.length ? values.reduce((sum, val) => sum + val, 0) / values.length : 0;\n    const recentValues = values.slice(-3);\n    const recentAvg = recentValues.length\n      ? recentValues.reduce((sum, val) => sum + val, 0) / recentValues.length\n      : 0;\n    const trend = recentAvg > avg ? 'increasing' : recentAvg < avg ? 'decreasing' : 'stable';\n    const changeRate = avg ? Math.abs((recentAvg - avg) / avg) : 0;\n\n    return {\n      dailyData,\n      average: avg,\n      recentAverage: recentAvg,\n      trend,\n      changeRate,\n      total: values.reduce((sum, val) => sum + val, 0)\n    };\n  }\n\n  /**\n   * 获取设备状态\n   * @param {string} parkId - 园区ID\n   * @param {string} buildingId - 建筑ID\n   * @returns {Promise<Object>} 设备状态数据\n   */\n  static async _getDeviceStatus(parkId, buildingId) {\n    // 构建查询条件\n    const whereClause = {};\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (parkId) {\n      whereClause.park_id = parkId;\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (buildingId) {\n      whereClause.building_id = buildingId;\n    }\n\n    // 查询设备\n    const devices = await Device.findAll({\n      where: whereClause,\n      attributes: ['id', 'name', 'type', 'status', 'last_active', 'efficiency', 'model']\n    });\n\n    // 分类统计\n    const statusCounts = {\n      online: 0,\n      offline: 0,\n      warning: 0,\n      error: 0\n    };\n\n    const typeCounts = {};\n    const inefficientDevices = [];\n    const offlineDevices = [];\n\n    devices.forEach((device) => {\n      const status = device.status || 'unknown';\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (statusCounts[status] !== undefined) {\n        statusCounts[status]++;\n      }\n\n      const type = device.type || 'unknown';\n      typeCounts[type] = (typeCounts[type] || 0) + 1;\n\n      // 标记效率低下的设备\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (device.efficiency && device.efficiency < 0.7) {\n        inefficientDevices.push(device);\n      }\n\n      // 标记离线设备\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (status === 'offline' && device.last_active) {\n        const lastActive = new Date(device.last_active);\n        const hoursSinceActive = (new Date() - lastActive) / (1000 * 60 * 60);\n        // TODO: 考虑使用早期返回或策略模式来减少嵌套\n        // TODO: 考虑使用早期返回或策略模式来减少嵌套\n        // TODO: 考虑使用早期返回或策略模式来减少嵌套\n        // TODO: 考虑使用早期返回或策略模式来减少嵌套\n        if (hoursSinceActive > 2) {\n          offlineDevices.push({\n            ...device.toJSON(),\n            hoursOffline: hoursSinceActive\n          });\n        }\n      }\n    });\n\n    return {\n      total: devices.length,\n      statusCounts,\n      typeCounts,\n      inefficientDevices,\n      offlineDevices\n    };\n  }\n\n  /**\n   * 获取储能设备数据\n   * @param {string} parkId - 园区ID\n   * @param {string} buildingId - 建筑ID\n   * @returns {Promise<Array>} 储能设备列表\n   */\n  static async _getStorageDevices(parkId, buildingId) {\n    // 先查询设备\n    const whereClause = { type: 'energy_storage' };\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (parkId) {\n      whereClause.park_id = parkId;\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (buildingId) {\n      whereClause.building_id = buildingId;\n    }\n\n    const storageDevices = await Device.findAll({\n      where: whereClause,\n      attributes: ['id', 'name', 'status', 'last_active']\n    });\n\n    // 获取详细参数\n    const detailedDevices = await Promise.all(\n      storageDevices.map(async (device) => {\n        const params = await StorageDevice.findByDeviceId(device.id);\n        return {\n          ...device.toJSON(),\n          params\n        };\n      })\n    );\n\n    return detailedDevices;\n  }\n\n  /**\n   * 获取峰值负荷数据\n   * @param {string} parkId - 园区ID\n   * @param {string} buildingId - 建筑ID\n   * @param {Date} startDate - 开始日期\n   * @param {Date} endDate - 结束日期\n   * @returns {Promise<Object>} 峰值负荷数据\n   */\n  static async _getPeakLoadData(parkId, buildingId, startDate, endDate) {\n    // 构建查询条件\n    const whereClause = { timestamp: { [Op.between]: [startDate, endDate] } };\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (parkId) {\n      whereClause.park_id = parkId;\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (buildingId) {\n      whereClause.building_id = buildingId;\n    }\n\n    // 查询电力数据\n    const electricityData = await EnergyData.findAll({\n      where: {\n        ...whereClause,\n        type: 'electricity'\n      },\n      attributes: ['timestamp', 'value'],\n      order: [['timestamp', 'ASC']]\n    });\n\n    // 按小时聚合\n    const hourlyData = {};\n    electricityData.forEach((item) => {\n      const hour = moment(item.timestamp).format('YYYY-MM-DD HH:00');\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (!hourlyData[hour]) {\n        hourlyData[hour] = [];\n      }\n      hourlyData[hour].push(parseFloat(item.value));\n    });\n\n    // 计算每小时平均值\n    const hourlyAverages = {};\n    Object.entries(hourlyData).forEach(([hour, values]) => {\n      const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n      hourlyAverages[hour] = avg;\n    });\n\n    // 找出峰值时段\n    const sortedHours = Object.entries(hourlyAverages).sort((a, b) => b[1] - a[1]);\n    const peakHours = sortedHours.slice(0, 5).map(([hour, value]) => ({\n      hour: hour.split(' ')[1],\n      averageLoad: value,\n      date: hour.split(' ')[0]\n    }));\n\n    // 找出用电高峰时段（小时）\n    const hourDistribution = {};\n    for (let i = 0; i < 24; i++) {\n      hourDistribution[i] = [];\n    }\n\n    Object.entries(hourlyAverages).forEach(([hour, value]) => {\n      const hourOfDay = parseInt(hour.split(' ')[1].split(':')[0], 10);\n      hourDistribution[hourOfDay].push(value);\n    });\n\n    const hourlyDistribution = {};\n    Object.entries(hourDistribution).forEach(([hour, values]) => {\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (values.length) {\n        hourlyDistribution[hour] = values.reduce((sum, val) => sum + val, 0) / values.length;\n      }\n    });\n\n    // 找出用电高峰时段\n    const peakHour = Object.entries(hourlyDistribution).sort((a, b) => b[1] - a[1])[0] || [0, 0];\n\n    return {\n      hourlyAverages,\n      peakHours,\n      peakHour: parseInt(peakHour[0], 10),\n      peakLoad: peakHour[1]\n    };\n  }\n\n  /**\n   * 增强推荐内容，添加具体数据和实施步骤\n   * @param {Array} recommendations - 原始推荐列表\n   * @returns {Promise<Array>} 增强后的推荐列表\n   */\n  static async _enhanceRecommendations(recommendations) {\n    return Promise.all(\n      recommendations.map(async (recommendation) => {\n        // 根据推荐类型添加具体内容\n        let details = {};\n\n        // TODO: 考虑将此函数拆分为更小的函数 (当前 26 行)\n\n        // TODO: 考虑将此函数拆分为更小的函数 (当前 26 行)\n\n        // TODO: 考虑将此函数拆分为更小的函数 (当前 26 行)\n\n        // TODO: 考虑将此函数拆分为更小的函数 (当前 26 行)\n\n        let implementationSteps = [];\n        let potentialSavings = {};\n\n        switch (recommendation.type) {\n          case 'energy_saving':\n            details = await this._calculateEnergySavingDetails(recommendation);\n            implementationSteps = this._getEnergySavingSteps(recommendation);\n            potentialSavings = await this._estimateEnergySavings(recommendation);\n            break;\n          case 'cost_reduction':\n            details = await this._calculateCostReductionDetails(recommendation);\n            implementationSteps = this._getCostReductionSteps(recommendation);\n            potentialSavings = await this._estimateCostSavings(recommendation);\n            break;\n          case 'maintenance':\n            details = await this._getMaintenanceDetails(recommendation);\n            implementationSteps = this._getMaintenanceSteps(recommendation);\n            potentialSavings = await this._estimateMaintenanceSavings(recommendation);\n            break;\n          default:\n            details = { description: '推荐详情正在计算中' };\n            implementationSteps = [\n              '查看推荐详情',\n              '评估实施难度',\n              '制定实施计划',\n              '执行推荐措施',\n              '验证实施效果'\n            ];\n        }\n\n        return {\n          ...recommendation,\n          details,\n          implementationSteps,\n          potentialSavings,\n          estimatedImplementationTime: this._estimateImplementationTime(recommendation)\n        };\n      })\n    );\n  }\n\n  /**\n   * 估算实施时间\n   * @param {Object} recommendation - 推荐\n   * @returns {string} 估算时间\n   */\n  static _estimateImplementationTime(recommendation) {\n    // 根据优先级和类型估算实施时间\n    const baseHours = recommendation.priority >= 8 ? 2 : recommendation.priority >= 5 ? 4 : 8;\n    const typeFactor = recommendation.type === 'maintenance' ? 0.8 : 1;\n    const hours = Math.round(baseHours * typeFactor);\n\n    return hours <= 1 ? '1小时以内' : `${hours}小时`;\n  }\n\n  /**\n   * 计算节能推荐详情\n   * @param {Object} recommendation - 推荐\n   * @returns {Promise<Object>} 节能详情\n   */\n  static async _calculateEnergySavingDetails(recommendation) {\n    // 这里应该有更复杂的计算逻辑\n    return {\n      currentConsumption: Math.round(Math.random() * 1000),\n      potentialReduction: Math.round(Math.random() * 30 + 10),\n      unit: 'kWh/天',\n      affectedDevices: recommendation.actions?.deviceIds?.length || 1\n    };\n  }\n\n  /**\n   * 获取节能实施步骤\n   * @param {Object} recommendation - 推荐\n   * @returns {Array} 实施步骤\n   */\n  static _getEnergySavingSteps(recommendation) {\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (recommendation.actions?.type === 'schedule_adjustment') {\n      return [\n        '分析当前设备运行时间表',\n        '调整设备运行时段至非高峰时段',\n        '设置新的设备运行计划',\n        '监控调整后的能耗变化',\n        '根据效果微调运行计划'\n      ];\n    } else if (recommendation.actions?.type === 'device_adjustment') {\n      return [\n        '检查目标设备当前设置',\n        '调整设备参数至优化值',\n        '测试调整后的设备运行状态',\n        '记录能耗变化数据',\n        '确认节能效果'\n      ];\n    }\n\n    return [\n      '评估当前能源使用情况',\n      '制定节能措施实施计划',\n      '实施节能措施',\n      '监控能源消耗变化',\n      '优化调整节能措施'\n    ];\n  }\n\n  /**\n   * 估算节能效果\n   * @param {Object} recommendation - 推荐\n   * @returns {Promise<Object>} 节能估算\n   */\n  static async _estimateEnergySavings(_recommendation) {\n    // 这里应该有更复杂的估算逻辑\n    const dailySavings = Math.round(Math.random() * 50 + 10);\n    return {\n      daily: dailySavings,\n      monthly: Math.round(dailySavings * 30),\n      annual: Math.round(dailySavings * 365),\n      unit: 'kWh',\n      carbonReduction: Math.round((dailySavings * 0.5 * 365) / 1000) // 粗略估算碳排放减少\n    };\n  }\n\n  /**\n   * 计算成本降低详情\n   * @param {Object} recommendation - 推荐\n   * @returns {Promise<Object>} 成本详情\n   */\n  static async _calculateCostReductionDetails(_recommendation) {\n    // 这里应该有更复杂的计算逻辑\n    return {\n      currentCost: Math.round(Math.random() * 1000 + 500),\n      potentialReductionPercent: Math.round(Math.random() * 20 + 5),\n      unit: '元/月'\n    };\n  }\n\n  /**\n   * 获取成本降低实施步骤\n   * @param {Object} recommendation - 推荐\n   * @returns {Array} 实施步骤\n   */\n  static _getCostReductionSteps() {\n    return [\n      '分析当前能源成本结构',\n      '识别成本优化机会',\n      '制定成本优化方案',\n      '实施成本优化措施',\n      '监控成本变化并调整'\n    ];\n  }\n\n  /**\n   * 估算成本节约\n   * @param {Object} recommendation - 推荐\n   * @returns {Promise<Object>} 成本节约估算\n   */\n  static async _estimateCostSavings(_recommendation) {\n    // 这里应该有更复杂的估算逻辑\n    const monthlySavings = Math.round(Math.random() * 500 + 100);\n    return {\n      daily: Math.round(monthlySavings / 30),\n      monthly: monthlySavings,\n      annual: Math.round(monthlySavings * 12),\n      unit: '元'\n    };\n  }\n\n  /**\n   * 获取维护详情\n   * @param {Object} recommendation - 推荐\n   * @returns {Promise<Object>} 维护详情\n   */\n  static async _getMaintenanceDetails(recommendation) {\n    // 这里应该有更复杂的逻辑\n    return {\n      deviceName: recommendation.actions?.deviceName || '目标设备',\n      issue: recommendation.actions?.issue || '潜在故障风险',\n      urgency: recommendation.priority >= 8 ? '高' : recommendation.priority >= 5 ? '中' : '低',\n      estimatedCost: Math.round(Math.random() * 1000 + 200),\n      estimatedDowntime: Math.round(Math.random() * 4 + 1) // 小时\n    };\n  }\n\n  /**\n   * 获取维护实施步骤\n   * @param {Object} recommendation - 推荐\n   * @returns {Array} 实施步骤\n   */\n  static _getMaintenanceSteps() {\n    return [\n      '准备维护工具和备件',\n      '安排维护时间窗口',\n      '执行维护操作',\n      '测试设备运行状态',\n      '记录维护结果'\n    ];\n  }\n\n  /**\n   * 估算维护节约\n   * @param {Object} recommendation - 推荐\n   * @returns {Promise<Object>} 维护节约估算\n   */\n  static async _estimateMaintenanceSavings() {\n    // 这里应该有更复杂的估算逻辑\n    const potentialCost = Math.round(Math.random() * 5000 + 1000);\n    return {\n      potentialFailureCost: potentialCost,\n      maintenanceCost: Math.round(potentialCost * 0.2),\n      savings: potentialCost - Math.round(potentialCost * 0.2),\n      unit: '元'\n    };\n  }\n\n  /**\n   * 评估推荐实施效果\n   * @param {string} recommendationId - 推荐ID\n   * @param {Date} startDate - 开始日期\n   * @param {Date} endDate - 结束日期\n   * @returns {Promise<Object>} 评估结果\n   */\n  static async evaluateRecommendationEffectiveness(recommendationId, startDate, endDate) {\n    // 获取推荐详情 - 模拟数据库查询\n    const recommendation = {\n      id: recommendationId,\n      type: 'energy_saving',\n      title: '模拟推荐',\n      description: '这是一个模拟的推荐项目'\n    };\n    if (!recommendation) {\n      throw new Error('推荐不存在');\n    }\n\n    // 获取推荐应用前的数据\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 25 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 25 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 25 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 25 行)\n\n    const preStartDate = moment(startDate).subtract(1, 'month').toDate();\n    const preEndDate = moment(startDate).subtract(1, 'day').toDate();\n\n    // 根据推荐类型评估效果\n    let evaluation = {};\n\n    switch (recommendation.type) {\n      case 'energy_saving':\n        evaluation = await this._evaluateEnergySavingEffectiveness(\n          recommendation,\n          preStartDate,\n          preEndDate,\n          startDate,\n          endDate\n        );\n        break;\n      case 'cost_reduction':\n        evaluation = await this._evaluateCostReductionEffectiveness(\n          recommendation,\n          preStartDate,\n          preEndDate,\n          startDate,\n          endDate\n        );\n        break;\n      default:\n        evaluation = {\n          status: 'not_evaluated',\n          message: '暂不支持该类型推荐的自动评估'\n        };\n    }\n\n    // 保存评估结果 - 模拟保存\n    const evaluationRecord = {\n      id: uuidv4(),\n      recommendation_id: recommendationId,\n      evaluation_data: JSON.stringify(evaluation),\n      evaluated_at: new Date()\n    };\n    console.log('评估结果已保存:', evaluationRecord.id);\n\n    return evaluation;\n  }\n}\n\nexport default RecommendationService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/data/collector.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1883.","line":27,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":27,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1583,1613],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1971,2015],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2111,2139],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2239,2271],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2310,2345],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2562,2611],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2639,2673],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3012,3055],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":134,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3448,3487],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3524,3570],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4512,4538],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4626,4654],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":190,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":190,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":190,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":190,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":190,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":190,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":190,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":190,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":192,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":192,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4806,4838],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":197,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4933,4963],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":203,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":203,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5117,5145],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100000.","line":217,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":217,"endColumn":55},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5488,5549],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5963,6028],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":254,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":254,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6396,6422],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":260,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":260,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6537,6568],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":278,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":278,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6965,7009],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":298,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":298,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7330,7368],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7520,7564],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":312,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":312,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7726,7795],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":338,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":338,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8647,8750],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":342,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":342,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8779,8813],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":355,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":355,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[9043,9089],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":373,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":373,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9594,9626],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 32.","line":394,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":394,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":394,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":394,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9.","line":394,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":394,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 273.15.","line":395,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":395,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":411,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":411,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":411,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":411,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":422,"column":77,"nodeType":"Literal","messageId":"noMagic","endLine":422,"endColumn":78},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":430,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":430,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":437,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":437,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.3.","line":439,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":439,"endColumn":39},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":439,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":439,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":439,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":439,"endColumn":63},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":439,"column":67,"nodeType":"Literal","messageId":"noMagic","endLine":439,"endColumn":71},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":444,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":444,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11558,11590],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":455,"column":82,"nodeType":"Literal","messageId":"noMagic","endLine":455,"endColumn":84},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":457,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":457,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":468,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":468,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":483,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":483,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":489,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":489,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12812,12844],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":497,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":497,"endColumn":53},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":535,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":535,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13927,13961],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.001.","line":585,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":585,"endColumn":64},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.001.","line":587,"column":60,"nodeType":"Literal","messageId":"noMagic","endLine":587,"endColumn":65},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":632,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":632,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16314,16350],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":634,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":634,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16379,16411],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":646,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":646,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[16614,16662],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":652,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":652,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[16781,16828],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":656,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":656,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16877,16957],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":658,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":658,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16986,17021],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":670,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":670,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17203,17261],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":672,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":672,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17290,17324],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":756,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":756,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[19310,19353],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":775,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":775,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19848,19925],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4.","line":775,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":775,"endColumn":58},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":777,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":777,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[19954,19987],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":903,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":903,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22577,22610],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":910,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":910,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22674,22698],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":917,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":917,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22790,22814],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":72,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createRequire } from 'module';\nimport { v4 as uuidv4 } from 'uuid';\nimport { dbPromise } from '../database.js';\nimport { alertManager as _alertManager } from '../alerts/AlertManager.js';\n\nconst require = createRequire(import.meta.url);\nconst mqtt = require('mqtt');\n\n/**\n * 数据采集器类\n * 负责MQTT数据接收、验证、处理和存储\n */\nclass DataCollector {\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 22 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 22 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 22 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 22 行)\n\n  constructor(mqttConfig = {}) {\n    this.mqttClient = null;\n    this.config = {\n      host: mqttConfig.host || process.env.MQTT_HOST || 'localhost',\n      port: mqttConfig.port || process.env.MQTT_PORT || 1883,\n      username: mqttConfig.username || process.env.MQTT_USERNAME,\n      password: mqttConfig.password || process.env.MQTT_PASSWORD,\n      ...mqttConfig\n    };\n\n    this.topics = {\n      energy: 'energy/realtime/+',\n      carbon: 'carbon/realtime/+',\n      device_status: 'device/status/+',\n      sensor_data: 'sensor/data/+'\n    };\n\n    this.dataBuffer = new Map(); // 数据缓冲区\n    this.isConnected = false;\n    this.lastMessageTime = null;\n    this.connectionTime = null;\n  }\n\n  /**\n   * 初始化MQTT连接\n   */\n  async initialize() {\n    try {\n      const mqttUrl = `mqtt://${this.config.host}:${this.config.port}`;\n\n      this.mqttClient = mqtt.connect(mqttUrl, {\n        username: this.config.username,\n        password: this.config.password,\n        keepalive: 60,\n        reconnectPeriod: 5000,\n        connectTimeout: 30000\n      });\n\n      this.mqttClient.on('connect', () => {\n        console.log('✅ MQTT数据采集器已连接');\n        this.isConnected = true;\n        this.connectionTime = new Date().toISOString();\n        this.subscribeToTopics();\n      });\n\n      this.mqttClient.on('message', (topic, message) => {\n        this.lastMessageTime = new Date().toISOString();\n        this.handleMessage(topic, message);\n      });\n\n      this.mqttClient.on('error', error => {\n        console.error('❌ MQTT连接错误:', error.message);\n        this.isConnected = false;\n      });\n\n      this.mqttClient.on('close', () => {\n        console.log('🔌 MQTT连接已断开');\n        this.isConnected = false;\n      });\n\n      this.mqttClient.on('reconnect', () => {\n        console.log('🔄 正在重新连接MQTT...');\n      });\n    } catch (error) {\n      console.error('MQTT初始化失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 订阅所有主题\n   */\n  subscribeToTopics() {\n    Object.entries(this.topics).forEach(([_key, topic]) => {\n      this.mqttClient.subscribe(topic, err => {\n        if (err) {\n          console.error(`❌ 订阅主题失败 ${topic}:`, err.message);\n        } else {\n          console.log(`📡 已订阅主题: ${topic}`);\n        }\n      });\n    });\n  }\n\n  /**\n   * 处理接收到的MQTT消息\n   */\n  async handleMessage(topic, message) {\n    try {\n      const payload = JSON.parse(message.toString());\n      const topicParts = topic.split('/');\n      const [dataType, , deviceId] = topicParts;\n\n      // 验证数据格式\n      if (!this.validatePayload(payload, dataType)) {\n        console.error(`❌ 数据格式验证失败 - 主题: ${topic}`);\n        return;\n      }\n\n      // 根据数据类型处理\n      switch (dataType) {\n        case 'energy':\n          await this.handleEnergyData(deviceId, payload);\n          break;\n        case 'sensor':\n          await this.handleSensorData(deviceId, payload);\n          break;\n        case 'device':\n          await this.handleDeviceStatus(deviceId, payload);\n          break;\n        default:\n          console.warn(`⚠️ 未知数据类型: ${dataType}`);\n      }\n    } catch (error) {\n      console.error(`消息处理失败 - 主题: ${topic}`, error);\n    }\n  }\n\n  /**\n   * 验证数据载荷格式\n   */\n  validatePayload(payload, dataType) {\n    const requiredFields = {\n      energy: ['timestamp', 'value', 'unit', 'type'],\n      sensor: ['timestamp', 'value', 'unit', 'sensor_id'],\n      device: ['timestamp', 'status']\n    };\n\n    const required = requiredFields[dataType];\n    if (!required) {return false;}\n\n    // 检查必填字段\n    if (!required.every(field => Object.prototype.hasOwnProperty.call(payload, field))) {\n      return false;\n    }\n\n    // 数据类型和范围验证\n    switch (dataType) {\n      case 'energy':\n        return this.validateEnergyData(payload);\n      case 'sensor':\n        return this.validateSensorData(payload);\n      case 'device':\n        return this.validateDeviceData(payload);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * 验证能源数据\n   */\n  validateEnergyData(payload) {\n    // 验证时间戳\n    const timestamp = new Date(payload.timestamp);\n    if (isNaN(timestamp.getTime())) {\n      console.error('无效的时间戳格式');\n      return false;\n    }\n\n    // 验证时间戳不能是未来时间\n    if (timestamp > new Date()) {\n      console.error('时间戳不能是未来时间');\n      return false;\n    }\n\n    // 验证时间戳不能太旧（超过24小时）\n    const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    if (timestamp < dayAgo) {\n      console.warn('数据时间戳过旧，可能是历史数据');\n    }\n\n    // 验证数值\n    if (typeof payload.value !== 'number' || isNaN(payload.value)) {\n      console.error('能源数据值必须是有效数字');\n      return false;\n    }\n\n    // 验证数值范围（不能为负数，除非是特殊类型如净能耗）\n    if (payload.value < 0 && !['net_energy', 'power_factor'].includes(payload.type)) {\n      console.error('能源数据值不能为负数');\n      return false;\n    }\n\n    // 验证数值上限（防止异常大的数值）\n    const maxValues = {\n      electricity: 10000, // kWh\n      water: 1000, // m³\n      gas: 1000, // m³\n      power: 5000, // kW\n      temperature: 100, // °C\n      humidity: 100 // %\n    };\n\n    const maxValue = maxValues[payload.type] || 100000;\n    if (payload.value > maxValue) {\n      console.error(`能源数据值超出合理范围: ${payload.value} > ${maxValue}`);\n      return false;\n    }\n\n    // 验证单位\n    const validUnits = {\n      electricity: ['kWh', 'MWh', 'kW', 'MW'],\n      water: ['m³', 'L', 'gal'],\n      gas: ['m³', 'L', 'ft³'],\n      power: ['kW', 'MW', 'W'],\n      temperature: ['°C', '°F', 'K'],\n      humidity: ['%']\n    };\n\n    const allowedUnits = validUnits[payload.type] || [];\n    if (allowedUnits.length > 0 && !allowedUnits.includes(payload.unit)) {\n      console.error(`无效的单位: ${payload.unit} for type ${payload.type}`);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * 验证传感器数据\n   */\n  validateSensorData(payload) {\n    // 验证时间戳\n    const timestamp = new Date(payload.timestamp);\n    if (isNaN(timestamp.getTime()) || timestamp > new Date()) {\n      return false;\n    }\n\n    // 验证传感器ID格式\n    if (typeof payload.sensor_id !== 'string' || payload.sensor_id.length === 0) {\n      console.error('无效的传感器ID');\n      return false;\n    }\n\n    // 验证数值\n    if (typeof payload.value !== 'number' || isNaN(payload.value)) {\n      console.error('传感器数据值必须是有效数字');\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * 验证设备数据\n   */\n  validateDeviceData(payload) {\n    // 验证时间戳\n    const timestamp = new Date(payload.timestamp);\n    if (isNaN(timestamp.getTime()) || timestamp > new Date()) {\n      return false;\n    }\n\n    // 验证状态值\n    const validStatuses = [0, 1, 2, 3]; // 0:离线, 1:在线, 2:故障, 3:维护\n    if (!validStatuses.includes(payload.status)) {\n      console.error(`无效的设备状态: ${payload.status}`);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * 处理能源数据\n   */\n  async handleEnergyData(deviceId, payload) {\n    try {\n      const energyDataId = uuidv4();\n      const timestamp = new Date(payload.timestamp);\n\n      // 验证设备是否存在\n      const device = await this.getDevice(deviceId);\n      if (!device) {\n        console.warn(`⚠️ 设备不存在: ${deviceId}`);\n        return;\n      }\n\n      // 数据清洗和异常检测\n      const cleanedData = await this.cleanEnergyData(deviceId, payload);\n      if (!cleanedData) {\n        console.warn(`⚠️ 数据清洗失败，跳过数据: ${deviceId}`);\n        return;\n      }\n\n      // 异常检测\n      const anomalyResult = await this.detectAnomaly(deviceId, cleanedData);\n      if (anomalyResult.isAnomaly) {\n        console.warn(`🚨 检测到异常数据: ${deviceId}, 原因: ${anomalyResult.reason}`);\n        // 可以选择是否存储异常数据，这里我们标记但仍然存储\n        cleanedData.is_anomaly = true;\n        cleanedData.anomaly_reason = anomalyResult.reason;\n      }\n\n      // 存储能源数据\n      await this.saveEnergyData({\n        id: energyDataId,\n        device_id: deviceId,\n        sensor_id: payload.sensor_id || null,\n        data_type: this.getEnergyDataType(payload.type),\n        value: cleanedData.value,\n        unit: cleanedData.unit,\n        timestamp: timestamp.toISOString(),\n        created_at: new Date().toISOString(),\n        is_anomaly: cleanedData.is_anomaly || false,\n        anomaly_reason: cleanedData.anomaly_reason || null\n      });\n\n      // 计算并存储碳排放数据\n      await this.calculateAndStoreCarbonEmission(energyDataId, payload.type, cleanedData.value);\n\n      // 检查是否需要触发告警\n      await this.checkAlertRules(deviceId, payload.sensor_id, cleanedData);\n\n      console.log(\n        `✅ 能源数据已保存 - 设备: ${deviceId}, 值: ${cleanedData.value}${cleanedData.unit}`\n      );\n    } catch (error) {\n      console.error('能源数据处理失败:', error);\n    }\n  }\n\n  /**\n   * 数据清洗\n   */\n  async cleanEnergyData(deviceId, payload) {\n    try {\n      let cleanedValue = payload.value;\n\n      // 1. 去除明显的错误值（如负数电量）\n      if (payload.type === 'electricity' && cleanedValue < 0) {\n        console.warn(`修正负数电量值: ${cleanedValue} -> 0`);\n        cleanedValue = 0;\n      }\n\n      // 2. 单位标准化\n      const standardizedData = this.standardizeUnit(cleanedValue, payload.unit, payload.type);\n      cleanedValue = standardizedData.value;\n      const standardUnit = standardizedData.unit;\n\n      // 3. 数值平滑（移动平均）\n      const smoothedValue = await this.applySmoothingFilter(deviceId, payload.type, cleanedValue);\n\n      return {\n        value: smoothedValue,\n        unit: standardUnit,\n        type: payload.type\n      };\n    } catch (error) {\n      console.error('数据清洗失败:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 单位标准化\n   */\n  standardizeUnit(value, unit, type) {\n    const conversions = {\n      electricity: {\n        MWh: { factor: 1000, standardUnit: 'kWh' },\n        Wh: { factor: 0.001, standardUnit: 'kWh' },\n        MW: { factor: 1000, standardUnit: 'kW' },\n        W: { factor: 0.001, standardUnit: 'kW' }\n      },\n      water: {\n        L: { factor: 0.001, standardUnit: 'm³' },\n        gal: { factor: 0.00378541, standardUnit: 'm³' }\n      },\n      temperature: {\n        '°F': { factor: f => ((f - 32) * 5) / 9, standardUnit: '°C' },\n        K: { factor: k => k - 273.15, standardUnit: '°C' }\n      }\n    };\n\n    const typeConversions = conversions[type];\n    if (!typeConversions || !typeConversions[unit]) {\n      return { value, unit }; // 无需转换\n    }\n\n    const conversion = typeConversions[unit];\n    const convertedValue =\n      typeof conversion.factor === 'function' ?\n        conversion.factor(value) :\n        value * conversion.factor;\n\n    return {\n      value: Math.round(convertedValue * 1000) / 1000, // 保留3位小数\n      unit: conversion.standardUnit\n    };\n  }\n\n  /**\n   * 应用平滑滤波器\n   */\n  async applySmoothingFilter(deviceId, dataType, value) {\n    try {\n      // 获取最近的几个数据点\n      const recentData = await this.getRecentEnergyData(deviceId, dataType, 5);\n\n      if (recentData.length < 2) {\n        return value; // 数据不足，不进行平滑\n      }\n\n      // 计算移动平均\n      const values = [...recentData.map(d => d.value), value];\n      const windowSize = Math.min(3, values.length);\n      const recentValues = values.slice(-windowSize);\n\n      const average = recentValues.reduce((sum, v) => sum + v, 0) / recentValues.length;\n\n      // 如果当前值与平均值差异过大，使用加权平均\n      const deviation = Math.abs(value - average) / average;\n      if (deviation > 0.5) {\n        // 偏差超过50%\n        return Math.round((value * 0.3 + average * 0.7) * 1000) / 1000;\n      }\n\n      return value;\n    } catch (error) {\n      console.error('平滑滤波失败:', error);\n      return value;\n    }\n  }\n\n  /**\n   * 异常检测\n   */\n  async detectAnomaly(deviceId, data) {\n    try {\n      // 获取历史数据进行统计分析\n      const historicalData = await this.getRecentEnergyData(deviceId, data.type, 50);\n\n      if (historicalData.length < 10) {\n        return { isAnomaly: false }; // 历史数据不足\n      }\n\n      const values = historicalData.map(d => d.value);\n      const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n      const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n      const stdDev = Math.sqrt(variance);\n\n      // Z-score异常检测\n      const zScore = Math.abs(data.value - mean) / stdDev;\n      if (zScore > 3) {\n        // 3-sigma规则\n        return {\n          isAnomaly: true,\n          reason: `Z-score异常: ${zScore.toFixed(2)} (阈值: 3.0)`\n        };\n      }\n\n      // 检查是否为突然的大幅变化\n      const lastValue = values[values.length - 1];\n      const changeRate = Math.abs(data.value - lastValue) / lastValue;\n      if (changeRate > 2.0) {\n        // 变化超过200%\n        return {\n          isAnomaly: true,\n          reason: `突然变化: ${(changeRate * 100).toFixed(1)}% (阈值: 200%)`\n        };\n      }\n\n      return { isAnomaly: false };\n    } catch (error) {\n      console.error('异常检测失败:', error);\n      return { isAnomaly: false };\n    }\n  }\n\n  /**\n   * 获取最近的能源数据\n   */\n  getRecentEnergyData(deviceId, dataType, limit = 10) {\n    return new Promise((resolve, reject) => {\n      const sql = `\n        SELECT value, timestamp \n        FROM energy_data \n        WHERE device_id = ? AND data_type = ?\n        ORDER BY timestamp DESC \n        LIMIT ?\n      `;\n\n      (async () => {\n        try {\n          const db = await dbPromise;\n          const result = await db.raw(sql, [deviceId, this.getEnergyDataType(dataType), limit]);\n          resolve(result.rows || []);\n        } catch (err) {\n          reject(err);\n        }\n      })();\n    });\n  }\n\n  /**\n   * 检查告警规则\n   */\n  async checkAlertRules(deviceId, sensorId, data) {\n    try {\n      // 获取相关的告警规则\n      const rules = await this.getActiveAlertRules(deviceId, sensorId);\n\n      for (const rule of rules) {\n        const shouldAlert = this.evaluateAlertCondition(rule, data.value);\n\n        if (shouldAlert) {\n          await this.createAlert(rule, deviceId, sensorId, data.value);\n        }\n      }\n    } catch (error) {\n      console.error('告警规则检查失败:', error);\n    }\n  }\n\n  /**\n   * 获取活跃的告警规则\n   */\n  getActiveAlertRules(deviceId, sensorId) {\n    return new Promise((resolve, reject) => {\n      let sql = `\n        SELECT * FROM alert_rules \n        WHERE is_active = 1 AND (\n          device_id = ? OR device_id IS NULL\n        )\n      `;\n      const params = [deviceId];\n\n      if (sensorId) {\n        sql += ' AND (sensor_id = ? OR sensor_id IS NULL)';\n        params.push(sensorId);\n      }\n\n      (async () => {\n        try {\n          const db = await dbPromise;\n          const result = await db.raw(sql, params);\n          resolve(result.rows || []);\n        } catch (err) {\n          reject(err);\n        }\n      })();\n    });\n  }\n\n  /**\n   * 评估告警条件\n   */\n  evaluateAlertCondition(rule, currentValue) {\n    const { condition_operator, threshold_value } = rule;\n\n    switch (condition_operator) {\n      case '>':\n        return currentValue > threshold_value;\n      case '<':\n        return currentValue < threshold_value;\n      case '>=':\n        return currentValue >= threshold_value;\n      case '<=':\n        return currentValue <= threshold_value;\n      case '=':\n        return Math.abs(currentValue - threshold_value) < 0.001;\n      case '!=':\n        return Math.abs(currentValue - threshold_value) >= 0.001;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * 创建告警\n   */\n  async createAlert(rule, deviceId, sensorId, currentValue) {\n    try {\n      const alertId = uuidv4();\n      const message = `${rule.name}: 当前值 ${currentValue} ${rule.condition_operator} 阈值 ${rule.threshold_value}`;\n\n      const sql = `\n        INSERT INTO alerts (\n          id, rule_id, device_id, sensor_id, alert_level, message,\n          current_value, threshold_value, created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\n      `;\n\n      await new Promise((resolve, reject) => {\n        (async () => {\n          try {\n            const db = await dbPromise;\n            await db.raw(\n              sql,\n              [\n                alertId,\n                rule.id,\n                deviceId,\n                sensorId,\n                rule.severity,\n                message,\n                currentValue,\n                rule.threshold_value\n              ]\n            );\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        })();\n      });\n\n      console.log(`🚨 告警已创建: ${message}`);\n    } catch (error) {\n      console.error('创建告警失败:', error);\n    }\n  }\n\n  /**\n   * 处理传感器数据\n   */\n  async handleSensorData(deviceId, payload) {\n    try {\n      // 验证传感器是否存在\n      const sensor = await this.getSensor(payload.sensor_id);\n      if (!sensor) {\n        console.warn(`⚠️ 传感器不存在: ${payload.sensor_id}`);\n        return;\n      }\n\n      // 检查数据是否在合理范围内\n      if (!this.isValueInRange(payload.value, sensor.range)) {\n        console.warn(`⚠️ 传感器数据超出范围: ${payload.value}`);\n      }\n\n      // 存储传感器数据（可以扩展为独立的传感器数据表）\n      console.log(`📊 传感器数据 - ${payload.sensor_id}: ${payload.value}${payload.unit}`);\n    } catch (error) {\n      console.error('传感器数据处理失败:', error);\n    }\n  }\n\n  /**\n   * 处理设备状态数据\n   */\n  async handleDeviceStatus(deviceId, payload) {\n    try {\n      // 更新设备状态\n      await this.updateDeviceStatus(deviceId, payload.status);\n\n      console.log(`🔧 设备状态更新 - ${deviceId}: ${payload.status}`);\n    } catch (error) {\n      console.error('设备状态处理失败:', error);\n    }\n  }\n\n  /**\n   * 获取设备信息\n   */\n  getDevice(deviceId) {\n    return new Promise((resolve, reject) => {\n      (async () => {\n        try {\n          const db = await dbPromise;\n          const result = await db.raw('SELECT * FROM devices WHERE id = ?', [deviceId]);\n          resolve(result.rows ? result.rows[0] : undefined);\n        } catch (err) {\n          reject(err);\n        }\n      })();\n    });\n  }\n\n  /**\n   * 获取传感器信息\n   */\n  getSensor(sensorId) {\n    return new Promise((resolve, reject) => {\n      (async () => {\n        try {\n          const db = await dbPromise;\n          const result = await db.raw('SELECT * FROM sensors WHERE id = ?', [sensorId]);\n          resolve(result.rows ? result.rows[0] : undefined);\n        } catch (err) {\n          reject(err);\n        }\n      })();\n    });\n  }\n\n  /**\n   * 保存能源数据\n   */\n  saveEnergyData(data) {\n    return new Promise((resolve, reject) => {\n      const sql = `\n        INSERT INTO energy_data \n        (id, device_id, sensor_id, data_type, value, unit, timestamp, created_at, is_anomaly, anomaly_reason, quality_score)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `;\n\n      (async () => {\n        try {\n          const db = await dbPromise;\n          await db.raw(\n            sql,\n            [\n              data.id,\n              data.device_id,\n              data.sensor_id,\n              data.data_type,\n              data.value,\n              data.unit,\n              data.timestamp,\n              data.created_at,\n              data.is_anomaly ? 1 : 0,\n              data.anomaly_reason || null,\n              data.quality_score || 1.0\n            ]\n          );\n          resolve();\n        } catch (err) {\n          reject(err);\n        }\n      })();\n    });\n  }\n\n  /**\n   * 计算并存储碳排放数据\n   */\n  async calculateAndStoreCarbonEmission(energyDataId, energyType, energyValue) {\n    try {\n      // 获取碳排放因子\n      const carbonFactor = await this.getCarbonFactor(energyType);\n      if (!carbonFactor) {\n        console.warn(`⚠️ 未找到碳排放因子: ${energyType}`);\n        return;\n      }\n\n      // 计算碳排放量\n      const emissionValue = energyValue * carbonFactor.factor_value;\n\n      // 存储碳排放数据\n      const carbonDataId = uuidv4();\n      await this.saveCarbonData({\n        id: carbonDataId,\n        energy_data_id: energyDataId,\n        carbon_factor_id: carbonFactor.id,\n        emission_value: emissionValue,\n        emission_unit: carbonFactor.unit,\n        calculation_method: 'direct_factor',\n        created_at: new Date().toISOString()\n      });\n\n      console.log(`🌱 碳排放计算完成 - ${emissionValue.toFixed(4)} ${carbonFactor.unit}`);\n    } catch (error) {\n      console.error('碳排放计算失败:', error);\n    }\n  }\n\n  /**\n   * 获取碳排放因子\n   */\n  getCarbonFactor(energyType) {\n    return new Promise((resolve, reject) => {\n      const sql = `\n        SELECT * FROM carbon_factors \n        WHERE energy_type = ? AND is_active = 1 \n        AND (valid_to IS NULL OR valid_to > date('now'))\n        ORDER BY valid_from DESC LIMIT 1\n      `;\n\n      (async () => {\n        try {\n          const db = await dbPromise;\n          const result = await db.raw(sql, [energyType]);\n          resolve(result.rows ? result.rows[0] : undefined);\n        } catch (err) {\n          reject(err);\n        }\n      })();\n    });\n  }\n\n  /**\n   * 保存碳排放数据\n   */\n  saveCarbonData(data) {\n    return new Promise((resolve, reject) => {\n      const sql = `\n        INSERT INTO carbon_data \n        (id, energy_data_id, carbon_factor_id, emission_value, emission_unit, calculation_method, created_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?)\n      `;\n\n      (async () => {\n        try {\n          const db = await dbPromise;\n          await db.raw(\n            sql,\n            [\n              data.id,\n              data.energy_data_id,\n              data.carbon_factor_id,\n              data.emission_value,\n              data.emission_unit,\n              data.calculation_method,\n              data.created_at\n            ]\n          );\n          resolve();\n        } catch (err) {\n          reject(err);\n        }\n      })();\n    });\n  }\n\n  /**\n   * 更新设备状态\n   */\n  updateDeviceStatus(deviceId, status) {\n    return new Promise((resolve, reject) => {\n      const sql = 'UPDATE devices SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?';\n\n      (async () => {\n        try {\n          const db = await dbPromise;\n          await db.raw(sql, [status, deviceId]);\n          resolve();\n        } catch (err) {\n          reject(err);\n        }\n      })();\n    });\n  }\n\n  /**\n   * 获取能源数据类型编码\n   */\n  getEnergyDataType(type) {\n    const typeMap = {\n      electricity: 1,\n      natural_gas: 2,\n      diesel: 3,\n      solar: 4,\n      wind: 5\n    };\n    return typeMap[type] || 0;\n  }\n\n  /**\n   * 检查数值是否在合理范围内\n   */\n  isValueInRange(value, range) {\n    if (!range) {return true;}\n\n    try {\n      const [min, max] = range.split('-').map(Number);\n      return value >= min && value <= max;\n    } catch {\n      return true;\n    }\n  }\n\n  /**\n   * 获取连接状态\n   */\n  getConnectionStatus() {\n    return {\n      connected: this.isConnected,\n      topics: Object.keys(this.topics).length,\n      bufferSize: this.dataBuffer.size\n    };\n  }\n\n  /**\n   * 断开连接\n   */\n  disconnect() {\n    if (this.mqttClient) {\n      this.mqttClient.end();\n      console.log('🔌 MQTT数据采集器已断开连接');\n    }\n  }\n\n  // 启动数据采集器\n  start() {\n    this.initialize();\n    console.log('数据采集器已启动');\n  }\n\n  // 停止数据采集器\n  stop() {\n    if (this.mqttClient) {\n      this.mqttClient.end();\n      console.log('数据采集器已停止');\n    }\n  }\n\n  // 获取详细连接状态\n  getDetailedConnectionStatus() {\n    return {\n      mqtt_connected: this.mqttClient && this.isConnected,\n      mqtt_broker: process.env.MQTT_BROKER_URL || 'mqtt://localhost:1883',\n      subscribed_topics: this.topics,\n      last_message_time: this.lastMessageTime,\n      connection_time: this.connectionTime\n    };\n  }\n}\n\nexport default DataCollector;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/database/redisClient.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/index.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":10,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":10,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[160,200],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 零碳园区数字孪生能碳管理系统 - 主入口文件\n * 启动HTTP服务器和相关服务\n */\n\nimport './interfaces/http/index.js';\n\n// 主入口文件只需要导入HTTP服务器模块\n// 所有的服务器配置和启动逻辑都在 interfaces/http/index.js 中\nconsole.log('🚀 零碳园区数字孪生能碳管理系统正在启动...');\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/infrastructure/database/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/DigitalTwinController.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'generateSecureRandom' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 16.","line":4,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":4,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[693,721],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1028,1055],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1084,1121],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1851,1884],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2364,2398],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":192,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":192,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":192,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":192,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":193,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":193,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":193,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":193,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":204,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":204,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":204,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":204,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":206,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":206,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":206,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":206,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'message' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":256,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":256,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 36.","line":261,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":261,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9.","line":261,"column":71,"nodeType":"Literal","messageId":"noMagic","endLine":261,"endColumn":72},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":265,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":265,"endColumn":33},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":266,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":266,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xff0000.","line":285,"column":19,"nodeType":"Literal","messageId":"noMagic","endLine":285,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xffa500.","line":288,"column":19,"nodeType":"Literal","messageId":"noMagic","endLine":288,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xffff00.","line":291,"column":19,"nodeType":"Literal","messageId":"noMagic","endLine":291,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3000.","line":301,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":301,"endColumn":14},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":321,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":321,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6972,7006],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":345,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":345,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7533,7567],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":369,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":369,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8094,8129],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":389,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":389,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":389,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":389,"endColumn":66},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":389,"column":84,"nodeType":"Literal","messageId":"noMagic","endLine":389,"endColumn":86},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":394,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":394,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import crypto from 'crypto';\n// 安全随机数生成函数\nfunction generateSecureRandom() {\n  return crypto.randomBytes(16).toString('hex');\n}\n\n/**\n * 数字孪生控制器\n * 整合场景管理和数据管理，提供统一的数字孪生接口\n */\n\nimport SceneManager from './SceneManager.js';\nimport DataManager from './DataManager.js';\n\nclass DigitalTwinController {\n  constructor(container, options = {}) {\n    this.container = container;\n    this.options = {\n      apiBaseUrl: '/api',\n      updateInterval: 11250,\n      enableRealtime: true,\n      ...options\n    };\n\n    this.sceneManager = null;\n    this.dataManager = null;\n    this.isInitialized = false;\n    this.parkData = null;\n    this.alerts = [];\n\n    this.init();\n  }\n\n  async init() {\n    try {\n      console.log('初始化数字孪生系统...');\n\n      // 初始化场景管理器\n      this.sceneManager = new SceneManager(this.container);\n\n      // 初始化数据管理器\n      this.dataManager = new DataManager(this.options.apiBaseUrl);\n\n      // 设置事件监听\n      this.setupEventListeners();\n\n      // 加载园区数据\n      await this.loadParkData();\n\n      this.isInitialized = true;\n      console.log('数字孪生系统初始化完成');\n    } catch (error) {\n      console.error('数字孪生系统初始化失败:', error);\n      throw error;\n    }\n  }\n\n  // 设置事件监听\n  setupEventListeners() {\n    // 监听设备数据加载完成\n    this.dataManager.on('devicesLoaded', (devices) => {\n      this.createDevicesInScene(devices);\n    });\n\n    // 监听实时能源数据\n    this.dataManager.on('realtimeEnergyData', (data) => {\n      this.updateDeviceVisualization(data);\n    });\n\n    // 监听设备状态变化\n    this.dataManager.on('deviceStatusChanged', (data) => {\n      this.updateDeviceStatus(data);\n    });\n\n    // 监听告警\n    this.dataManager.on('alert', (alert) => {\n      this.handleAlert(alert);\n    });\n\n    // 监听碳排放数据\n    this.dataManager.on('realtimeCarbonData', (data) => {\n      this.updateCarbonVisualization(data);\n    });\n\n    // 监听错误\n    this.dataManager.on('error', (error) => {\n      console.error('数据管理器错误:', error);\n    });\n  }\n\n  // 加载园区数据\n  async loadParkData() {\n    try {\n      const response = await fetch(`${this.options.apiBaseUrl}/parks`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('获取园区数据失败');\n      }\n\n      const result = await response.json();\n      this.parkData = result.data || [];\n\n      // 创建园区建筑\n      this.createBuildingsInScene();\n    } catch (error) {\n      console.error('加载园区数据失败:', error);\n      // 使用模拟数据\n      this.createMockParkData();\n    }\n  }\n\n  // 创建模拟园区数据\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 34 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 34 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 34 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 34 行)\n\n  createMockParkData() {\n    this.parkData = {\n      id: 'park_001',\n      name: '零碳示范园区',\n      buildings: [\n        {\n          id: 'building_001',\n          name: '办公楼A',\n          type: 'office',\n          position: { x: 0, y: 0, z: 0 },\n          dimensions: { width: 30, height: 40, depth: 20 },\n          color: 0x66c2a5\n        },\n        {\n          id: 'building_002',\n          name: '生产车间B',\n          type: 'industrial',\n          position: { x: 50, y: 0, z: 0 },\n          dimensions: { width: 40, height: 25, depth: 30 },\n          color: 0x4a90e2\n        },\n        {\n          id: 'building_003',\n          name: '仓储中心C',\n          type: 'warehouse',\n          position: { x: -40, y: 0, z: 30 },\n          dimensions: { width: 35, height: 15, depth: 25 },\n          color: 0xfc8d62\n        }\n      ]\n    };\n\n    this.createBuildingsInScene();\n  }\n\n  // 在场景中创建建筑\n  createBuildingsInScene() {\n    if (!this.parkData || !this.parkData.buildings) {\n      return;\n    }\n\n    this.parkData.buildings.forEach((building) => {\n      this.sceneManager.createBuilding(building);\n    });\n  }\n\n  // 在场景中创建设备\n  createDevicesInScene(devices) {\n    devices.forEach((device) => {\n      // 为设备分配位置（如果没有指定）\n      if (!device.position) {\n        device.position = this.generateDevicePosition(device);\n      }\n\n      this.sceneManager.createDevice(device);\n    });\n  }\n\n  // 生成设备位置\n  generateDevicePosition(device) {\n    // 根据设备类型和建筑ID生成合理的位置\n    const buildingId = device.building_id;\n    const building = this.parkData?.buildings?.find((b) => b.id === buildingId);\n\n    if (building) {\n      // 在建筑周围随机分布\n      const offsetX = (Math.random() - 0.5) * 20;\n      const offsetZ = (Math.random() - 0.5) * 20;\n\n      return {\n        x: building.position.x + offsetX,\n        y: 2,\n        z: building.position.z + offsetZ\n      };\n    }\n\n    // 默认随机位置\n    return {\n      x: (Math.random() - 0.5) * 100,\n      y: 2,\n      z: (Math.random() - 0.5) * 100\n    };\n  }\n\n  // 更新设备可视化\n  updateDeviceVisualization(data) {\n    const { deviceId, value, unit } = data;\n\n    // 更新设备的数据可视化\n    this.sceneManager.addDataVisualization(deviceId, value);\n\n    // 触发自定义事件\n    this.dispatchEvent('deviceDataUpdated', {\n      deviceId,\n      value,\n      unit,\n      timestamp: new Date()\n    });\n  }\n\n  // 更新设备状态\n  updateDeviceStatus(data) {\n    const { deviceId, status, device } = data;\n\n    this.sceneManager.updateDeviceStatus(deviceId, status, device);\n\n    // 触发自定义事件\n    this.dispatchEvent('deviceStatusUpdated', {\n      deviceId,\n      status,\n      device\n    });\n  }\n\n  // 更新碳排放可视化\n  updateCarbonVisualization(data) {\n    const { deviceId, emissionValue } = data;\n\n    // 可以在这里添加碳排放的特殊可视化效果\n    // 比如粒子效果、颜色变化等\n\n    this.dispatchEvent('carbonDataUpdated', {\n      deviceId,\n      emissionValue,\n      timestamp: new Date()\n    });\n  }\n\n  // 处理告警\n  handleAlert(alert) {\n    const { deviceId, level, message } = alert;\n\n    // 添加到告警列表\n    this.alerts.unshift({\n      ...alert,\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n    });\n\n    // 保持最近100条告警\n    if (this.alerts.length > 100) {\n      this.alerts = this.alerts.slice(0, 100);\n    }\n\n    // 在场景中显示告警效果\n    this.showAlertInScene(deviceId, level);\n\n    // 触发自定义事件\n    this.dispatchEvent('alert', alert);\n  }\n\n  // 在场景中显示告警效果\n  showAlertInScene(deviceId, level) {\n    // 可以添加闪烁效果、颜色变化等\n    const device = this.sceneManager.devices.get(deviceId);\n    if (device) {\n      // 根据告警级别设置颜色\n      let color;\n      switch (level) {\n        case 'critical':\n          color = 0xff0000;\n          break;\n        case 'warning':\n          color = 0xffa500;\n          break;\n        default:\n          color = 0xffff00;\n      }\n\n      // 临时改变设备颜色\n      const originalColor = device.material.color.getHex();\n      device.material.color.setHex(color);\n\n      // 3秒后恢复原色\n      setTimeout(() => {\n        device.material.color.setHex(originalColor);\n      }, 3000);\n    }\n  }\n\n  // 获取设备详细信息\n  async getDeviceDetails(deviceId) {\n    try {\n      const response = await fetch(`${this.options.apiBaseUrl}/devices/${deviceId}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('获取设备详情失败');\n      }\n\n      const result = await response.json();\n      return result.data;\n    } catch (error) {\n      console.error('获取设备详情失败:', error);\n      return null;\n    }\n  }\n\n  // 获取能源数据统计\n  async getEnergyStatistics(timeRange = '24h') {\n    try {\n      const response = await fetch(\n        `${this.options.apiBaseUrl}/energy-data/statistics?time_range=${timeRange}`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('获取能源统计失败');\n      }\n\n      const result = await response.json();\n      return result.data;\n    } catch (error) {\n      console.error('获取能源统计失败:', error);\n      return null;\n    }\n  }\n\n  // 获取碳排放统计\n  async getCarbonStatistics(timeRange = '24h') {\n    try {\n      const response = await fetch(\n        `${this.options.apiBaseUrl}/carbon-data/statistics?time_range=${timeRange}`,\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('获取碳排放统计失败');\n      }\n\n      const result = await response.json();\n      return result.data;\n    } catch (error) {\n      console.error('获取碳排放统计失败:', error);\n      return null;\n    }\n  }\n\n  // 设置相机视角\n  setCameraView(position, target) {\n    if (this.sceneManager && this.sceneManager.camera) {\n      this.sceneManager.camera.position.set(position.x, position.y, position.z);\n      if (target) {\n        this.sceneManager.camera.lookAt(target.x, target.y, target.z);\n      }\n    }\n  }\n\n  // 聚焦到设备\n  focusOnDevice(deviceId) {\n    const device = this.sceneManager.devices.get(deviceId);\n    if (device) {\n      const { position } = device;\n      this.setCameraView({ x: position.x + 20, y: position.y + 20, z: position.z + 20 }, position);\n    }\n  }\n\n  // 获取告警列表\n  getAlerts(limit = 10) {\n    return this.alerts.slice(0, limit);\n  }\n\n  // 清除告警\n  clearAlert(alertId) {\n    this.alerts = this.alerts.filter((alert) => alert.id !== alertId);\n  }\n\n  // 自定义事件分发\n  dispatchEvent(eventType, data) {\n    const event = new CustomEvent(eventType, { detail: data });\n    this.container.dispatchEvent(event);\n  }\n\n  // 添加事件监听\n  addEventListener(eventType, callback) {\n    this.container.addEventListener(eventType, callback);\n  }\n\n  // 移除事件监听\n  removeEventListener(eventType, callback) {\n    this.container.removeEventListener(eventType, callback);\n  }\n\n  // 销毁数字孪生系统\n  dispose() {\n    if (this.sceneManager) {\n      this.sceneManager.dispose();\n      this.sceneManager = null;\n    }\n\n    if (this.dataManager) {\n      this.dataManager.dispose();\n      this.dataManager = null;\n    }\n\n    this.alerts = [];\n    this.parkData = null;\n    this.isInitialized = false;\n  }\n}\n\nexport default DigitalTwinController;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/components/optimization/EnergyStorageOptimization.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":207,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Grid,\n  Card,\n  CardContent,\n  Divider,\n  CircularProgress,\n  Alert,\n} from '@mui/material';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { getEnergyStorageDevices } from '../../controllers/deviceController.js';\nimport { generateOptimizationStrategies } from '../../optimization/battery.js';\n\n// 注册Chart.js组件\nChart.register(...registerables);\n\nconst EnergyStorageOptimization = () => {\n  const [devices, setDevices] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(null);\n  const [strategies, setStrategies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [timeRange, setTimeRange] = useState('24h');\n\n  // 获取储能设备列表\n  useEffect(() => {\n    const fetchDevices = async () => {\n      try {\n        const data = await getEnergyStorageDevices();\n        setDevices(data);\n        if (data.length > 0) {\n          setSelectedDevice(data[0]);\n        }\n      } catch (err) {\n        setError('获取储能设备失败: ' + err.message);\n        console.error(err);\n      }\n    };\n\n    fetchDevices();\n  }, []);\n\n  // 当选择设备或时间范围变化时，重新生成优化策略\n  useEffect(() => {\n    if (selectedDevice) {\n      generateStrategies();\n    }\n  }, [selectedDevice, timeRange]);\n\n  // 生成优化策略\n  const generateStrategies = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // 计算时间范围\n      const endTime = new Date();\n      const startTime = new Date();\n\n      switch (timeRange) {\n        case '24h':\n          startTime.setHours(endTime.getHours() - 24);\n          break;\n        case '7d':\n          startTime.setDate(endTime.getDate() - 7);\n          break;\n        case '30d':\n          startTime.setMonth(endTime.getMonth() - 1);\n          break;\n        default:\n          startTime.setHours(endTime.getHours() - 24);\n      }\n\n      // 获取预测数据（实际应用中应从API获取）\n      // 这里使用模拟数据\n      const predictions = generateMockSOCData(timeRange);\n\n      // 生成优化策略\n      const result = await generateOptimizationStrategies(\n        predictions,\n        '1h',\n        selectedDevice.id,\n        startTime.toISOString(),\n        endTime.toISOString()\n      );\n\n      setStrategies(result);\n    } catch (err) {\n      setError('生成优化策略失败: ' + err.message);\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 生成模拟SOC数据\n  const generateMockSOCData = (range) => {\n    const dataPoints = range === '24h' ? 24 : range === '7d' ? 168 : 720;\n    const data = [];\n\n    for (let i = 0; i < dataPoints; i++) {\n      // 生成0.3-0.7之间的随机SOC值，添加一些波动趋势\n      const baseValue = 0.5 + Math.sin((i / 12) * Math.PI) * 0.2;\n      const noise = (Math.random() - 0.5) * 0.1;\n      const value = Math.max(0.2, Math.min(0.8, baseValue + noise));\n      data.push(value);\n    }\n\n    return data;\n  };\n\n  // 准备图表数据\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 33 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 33 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 33 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 33 行)\n\n  const prepareChartData = () => {\n    if (!strategies || strategies.length === 0) return null;\n\n    const timestamps = strategies.map((s) => new Date(s.timestamp).toLocaleTimeString());\n    const socData = strategies.map((_, index) => generateMockSOCData(timeRange)[index] * 100);\n    const prices = strategies.map((s) =>\n      s.economicImpact ? parseFloat(s.economicImpact.split(':')[1]) : 0\n    );\n\n    return {\n      labels: timestamps,\n      datasets: [\n        {\n          label: 'SOC (%)',\n          data: socData,\n          borderColor: '#3f51b5',\n          backgroundColor: 'rgba(63, 81, 181, 0.1)',\n          borderWidth: 2,\n          fill: true,\n          yAxisID: 'y',\n        },\n        {\n          label: '经济效益 (元)',\n          data: prices,\n          borderColor: '#4caf50',\n          backgroundColor: 'rgba(76, 175, 80, 0.1)',\n          borderWidth: 2,\n          fill: true,\n          yAxisID: 'y1',\n        },\n      ],\n    };\n  };\n\n  // 图表配置\n  const chartOptions = {\n    responsive: true,\n    interaction: {\n      mode: 'index',\n      intersect: false,\n    },\n    scales: {\n      y: {\n        type: 'linear',\n        display: true,\n        position: 'left',\n        title: {\n          display: true,\n          text: 'SOC (%)',\n        },\n        min: 0,\n        max: 100,\n      },\n      y1: {\n        type: 'linear',\n        display: true,\n        position: 'right',\n        title: {\n          display: true,\n          text: '经济效益 (元)',\n        },\n        grid: {\n          drawOnChartArea: false,\n        },\n      },\n    },\n  };\n\n  // 策略优先级颜色映射\n  const getPriorityColor = (priority) => {\n    if (priority >= 8) return '#f44336'; // 高优先级 - 红色\n    if (priority >= 5) return '#ff9800'; // 中高优先级 - 橙色\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (priority >= 3) return '#ffeb3b'; // 中优先级 - 黄色\n    return '#4caf50'; // 低优先级 - 绿色\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        储能优化策略\n      </Typography>\n\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              储能设备选择\n            </Typography>\n            <select\n              value={selectedDevice?.id || ''}\n              onChange={(e) => {\n                const device = devices.find((d) => d.id === e.target.value);\n                setSelectedDevice(device);\n              }}\n              style={{\n                width: '100%',\n                padding: '8px',\n                borderRadius: '4px',\n                border: '1px solid #ccc',\n              }}\n            >\n              {devices.map((device) => (\n                <option key={device.id} value={device.id}>\n                  {device.name} ({device.model})\n                </option>\n              ))}\n            </select>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              时间范围\n            </Typography>\n            <select\n              value={timeRange}\n              onChange={(e) => setTimeRange(e.target.value)}\n              style={{\n                width: '100%',\n                padding: '8px',\n                borderRadius: '4px',\n                border: '1px solid #ccc',\n              }}\n            >\n              <option value=\"24h\">24小时</option>\n              <option value=\"7d\">7天</option>\n              <option value=\"30d\">30天</option>\n            </select>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <Paper\n            sx={{\n              p: 2,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: '100%',\n            }}\n          >\n            {loading ? (\n              <CircularProgress />\n            ) : (\n              <button\n                onClick={generateStrategies}\n                style={{\n                  padding: '8px 16px',\n                  backgroundColor: '#3f51b5',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                  fontSize: '16px',\n                }}\n              >\n                生成优化策略\n              </button>\n            )}\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {strategies.length > 0 && (\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Paper sx={{ p: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                储能优化趋势\n              </Typography>\n              <Box sx={{ height: 400 }}>\n                <Line data={prepareChartData()} options={chartOptions} />\n              </Box>\n            </Paper>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Paper sx={{ p: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                推荐策略列表\n              </Typography>\n              <Divider sx={{ mb: 2 }} />\n              <Box sx={{ maxHeight: 400, overflowY: 'auto' }}>\n                {strategies\n                  .filter((s) => s.strategy !== 'maintenance')\n                  .sort((a, b) => b.priority - a.priority)\n                  .map((strategy, index) => (\n                    <Card\n                      key={index}\n                      sx={{ mb: 2, borderLeft: `4px solid ${getPriorityColor(strategy.priority)}` }}\n                    >\n                      <CardContent>\n                        <Grid container spacing={2} alignItems=\"center\">\n                          <Grid item xs={12} md={2}>\n                            <Typography variant=\"subtitle2\">\n                              {new Date(strategy.timestamp).toLocaleString()}\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={12} md={2}>\n                            <Typography\n                              variant=\"body1\"\n                              sx={{\n                                fontWeight: 'bold',\n                                color: getPriorityColor(strategy.priority),\n                              }}\n                            >\n                              {strategy.strategy === 'charge' && '充电'}\n                              {strategy.strategy === 'discharge' && '放电'}\n                              {strategy.strategy === 'stop_charge' && '停止充电'}\n                              {strategy.strategy === 'stop_discharge' && '停止放电'}\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={12} md={4}>\n                            <Typography variant=\"body2\">{strategy.description}</Typography>\n                          </Grid>\n                          <Grid item xs={12} md={2}>\n                            <Typography variant=\"body2\">{strategy.economicImpact}</Typography>\n                          </Grid>\n                          <Grid item xs={12} md={2}>\n                            <Typography variant=\"body2\">\n                              {strategy.carbonImpact || '无碳排放数据'}\n                            </Typography>\n                          </Grid>\n                        </Grid>\n                      </CardContent>\n                    </Card>\n                  ))}\n              </Box>\n            </Paper>\n          </Grid>\n        </Grid>\n      )}\n    </Box>\n  );\n};\n\nexport default EnergyStorageOptimization;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/controllers/AuthController.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":136,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":136,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import bcrypt from 'bcrypt';\nimport { validationResult } from 'express-validator';\nimport BaseController from './BaseController.js';\nimport User from '../../../core/entities/User.js';\nimport config from '../../../shared/config/index.js';\nimport logger from '../../../shared/utils/logger.js';\nimport { defaultJWTManager } from '../../../core/services/jwtManager.js';\n\n/**\n * 认证控制器\n * 处理用户认证相关的业务逻辑\n */\nclass AuthController extends BaseController {\n  constructor() {\n    super();\n    this.saltRounds = 12;\n    this.jwtManager = defaultJWTManager;\n  }\n\n  /**\n   * 用户登录\n   */\n  login = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    const { username, password } = req.body;\n\n    try {\n      // 查找用户\n      const user = await User.findByUsername(username);\n      if (!user) {\n        this.logOperation(req, 'LOGIN_FAILED', { username, reason: 'USER_NOT_FOUND' });\n        return res.unauthorized('用户名或密码错误');\n      }\n\n      // 验证密码\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        this.logOperation(req, 'LOGIN_FAILED', { username, reason: 'INVALID_PASSWORD' });\n        return res.unauthorized('用户名或密码错误');\n      }\n\n      // 检查用户状态\n      if (user.status !== 'active') {\n        this.logOperation(req, 'LOGIN_FAILED', { username, reason: 'USER_INACTIVE' });\n        return res.forbidden('用户账户已被禁用');\n      }\n\n      // 生成JWT令牌\n      const tokenPayload = {\n        id: user.id,\n        username: user.username,\n        role: user.role,\n        permissions: user.permissions || []\n      };\n\n      const accessToken = this.jwtManager.generateToken(tokenPayload);\n      const refreshToken = this.jwtManager.generateRefreshToken(tokenPayload);\n\n      // 更新最后登录时间\n      await User.updateLastLogin(user.id);\n\n      // 清理敏感数据\n      const userResponse = this.sanitizeUser(user);\n\n      this.logOperation(req, 'LOGIN_SUCCESS', { userId: user.id, username });\n\n      res.success(\n        {\n          user: userResponse,\n          tokens: {\n            accessToken,\n            refreshToken,\n            expiresIn: config.jwt.expiresIn\n          }\n        },\n        '登录成功'\n      );\n    } catch (error) {\n      logger.error('登录失败', {\n        error: error.message,\n        username,\n        ip: req.ip\n      });\n      res.internalError('登录失败，请稍后重试');\n    }\n  });\n\n  /**\n   * 用户注册\n   */\n  register = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    const { username, password, email, role = 'viewer' } = req.body;\n\n    try {\n      // 检查用户名是否已存在\n      const existingUser = await User.findByUsername(username);\n      if (existingUser) {\n        return res.conflict('用户名已存在');\n      }\n\n      // 检查邮箱是否已存在\n      if (email) {\n        const existingEmail = await User.findByEmail(email);\n        if (existingEmail) {\n          return res.conflict('邮箱已被使用');\n        }\n      }\n\n      // 加密密码\n      const hashedPassword = await bcrypt.hash(password, this.saltRounds);\n\n      // 创建用户\n      const userData = {\n        username,\n        password: hashedPassword,\n        email,\n        role,\n        status: 'active',\n        createdAt: new Date().toISOString()\n      };\n\n      const newUser = await User.create(userData);\n      const userResponse = this.sanitizeUser(newUser);\n\n      this.logOperation(req, 'USER_REGISTER', { userId: newUser.id, username });\n\n      res.success(userResponse, '注册成功', 201);\n    } catch (error) {\n      logger.error('注册失败', {\n        error: error.message,\n        username,\n        email,\n        ip: req.ip\n      });\n      res.internalError('注册失败，请稍后重试');\n    }\n  });\n\n  /**\n   * 获取当前用户信息\n   */\n  getCurrentUser = this.asyncHandler(async (req, res) => {\n    try {\n      const user = await User.findById(req.user.id);\n      if (!user) {\n        return res.notFound('用户不存在');\n      }\n\n      const userResponse = this.sanitizeUser(user);\n      res.success(userResponse);\n    } catch (error) {\n      logger.error('获取用户信息失败', {\n        error: error.message,\n        userId: req.user?.id\n      });\n      res.internalError('获取用户信息失败');\n    }\n  });\n\n  /**\n   * 更新用户信息\n   */\n  updateProfile = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    const { email, currentPassword, newPassword } = req.body;\n    const userId = req.user.id;\n\n    try {\n      const user = await User.findById(userId);\n      if (!user) {\n        return res.notFound('用户不存在');\n      }\n\n      const updateData = {};\n\n      // 更新邮箱\n      if (email && email !== user.email) {\n        const existingEmail = await User.findByEmail(email);\n        if (existingEmail && existingEmail.id !== userId) {\n          return res.conflict('邮箱已被使用');\n        }\n        updateData.email = email;\n      }\n\n      // 更新密码\n      if (newPassword) {\n        if (!currentPassword) {\n          return res.badRequest('更新密码需要提供当前密码');\n        }\n\n        const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n        if (!isValidPassword) {\n          return res.unauthorized('当前密码错误');\n        }\n\n        updateData.password = await bcrypt.hash(newPassword, this.saltRounds);\n      }\n\n      if (Object.keys(updateData).length === 0) {\n        return res.badRequest('没有需要更新的数据');\n      }\n\n      updateData.updatedAt = new Date().toISOString();\n      const updatedUser = await User.update(userId, updateData);\n      const userResponse = this.sanitizeUser(updatedUser);\n\n      this.logOperation(req, 'PROFILE_UPDATE', { userId, fields: Object.keys(updateData) });\n\n      res.success(userResponse, '用户信息更新成功');\n    } catch (error) {\n      logger.error('更新用户信息失败', {\n        error: error.message,\n        userId\n      });\n      res.internalError('更新用户信息失败');\n    }\n  });\n\n  /**\n   * 用户登出\n   */\n  logout = this.asyncHandler(async (req, res) => {\n    try {\n      const token = req.headers.authorization?.replace('Bearer ', '');\n      if (token) {\n        // 将令牌加入黑名单\n        await this.jwtManager.blacklistToken(token);\n      }\n\n      this.logOperation(req, 'LOGOUT', { userId: req.user?.id });\n\n      res.success(null, '登出成功');\n    } catch (error) {\n      logger.error('登出失败', {\n        error: error.message,\n        userId: req.user?.id\n      });\n      res.internalError('登出失败');\n    }\n  });\n\n  /**\n   * 刷新访问令牌\n   */\n  refreshToken = this.asyncHandler(async (req, res) => {\n    const { refreshToken } = req.body;\n\n    if (!refreshToken) {\n      return res.badRequest('缺少刷新令牌');\n    }\n\n    try {\n      // 验证刷新令牌\n      const decoded = this.jwtManager.verifyRefreshToken(refreshToken);\n\n      // 检查用户是否仍然存在且活跃\n      const user = await User.findById(decoded.id);\n      if (!user || user.status !== 'active') {\n        return res.unauthorized('用户不存在或已被禁用');\n      }\n\n      // 生成新的访问令牌\n      const tokenPayload = {\n        id: user.id,\n        username: user.username,\n        role: user.role,\n        permissions: user.permissions || []\n      };\n\n      const newAccessToken = this.jwtManager.generateToken(tokenPayload);\n      const newRefreshToken = this.jwtManager.generateRefreshToken(tokenPayload);\n\n      // 将旧的刷新令牌加入黑名单\n      await this.jwtManager.blacklistToken(refreshToken);\n\n      res.success(\n        {\n          accessToken: newAccessToken,\n          refreshToken: newRefreshToken,\n          expiresIn: config.jwt.expiresIn\n        },\n        '令牌刷新成功'\n      );\n    } catch (error) {\n      logger.error('刷新令牌失败', {\n        error: error.message,\n        ip: req.ip\n      });\n\n      if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') {\n        return res.unauthorized('无效的刷新令牌');\n      }\n\n      res.internalError('令牌刷新失败');\n    }\n  });\n\n  /**\n   * 清理用户敏感数据\n   */\n  sanitizeUser(user) {\n    const { password: _password, ...sanitizedUser } = user;\n    return sanitizedUser;\n  }\n\n  /**\n   * 验证用户权限\n   */\n  checkPermission = this.asyncHandler(async (req, res) => {\n    const { permission } = req.params;\n    const userPermissions = req.user.permissions || [];\n    const hasPermission = userPermissions.includes(permission) || req.user.role === 'admin';\n\n    res.success({ hasPermission }, '权限检查完成');\n  });\n}\n\nexport default new AuthController();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/controllers/BaseController.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1077,1369],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":104,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":104,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":109,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":109,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":359,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":359,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10029,10312],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":404,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":404,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":415,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":415,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 基础控制器类\n * 提供通用的控制器功能和错误处理\n */\n\nimport responseFormatter from '../middleware/responseFormatter.js';\n\nclass BaseController {\n  constructor() {\n    // 绑定方法到实例，确保正确的this上下文\n    this.handleRequest = this.handleRequest.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.validateRequest = this.validateRequest.bind(this);\n    this.getPaginationParams = this.getPaginationParams.bind(this);\n    this.getSortingParams = this.getSortingParams.bind(this);\n    this.getFilterParams = this.getFilterParams.bind(this);\n  }\n\n  /**\n   * 通用请求处理包装器\n   * @param {Function} handler - 处理函数\n   * @returns {Function} Express路由处理函数\n   */\n  handleRequest(handler) {\n    return async (req, res, next) => {\n      try {\n        await handler(req, res, next);\n      } catch (error) {\n        this.handleError(error, req, res, next);\n      }\n    };\n  }\n\n  /**\n   * 统一错误处理\n   * @param {Error} error - 错误对象\n   * @param {Object} req - Express请求对象\n   * @param {Object} res - Express响应对象\n   * @param {Function} next - Express next函数\n   */\n  handleError(error, req, res, _next) {\n    console.error(`[${new Date().toISOString()}] Controller Error:`, {\n      error: error.message,\n      stack: error.stack,\n      url: req.url,\n      method: req.method,\n      user: req.user?.username || 'anonymous',\n      body: req.body,\n      params: req.params,\n      query: req.query\n    });\n\n    // 根据错误类型返回相应的响应\n    if (error.name === 'ValidationError') {\n      return responseFormatter.validationError(res, '数据验证失败', error.details);\n    } else if (error.name === 'UnauthorizedError') {\n      return responseFormatter.unauthorized(res, error.message);\n    } else if (error.name === 'ForbiddenError') {\n      return responseFormatter.forbidden(res, error.message);\n    } else if (error.name === 'NotFoundError') {\n      return responseFormatter.notFound(res, error.message);\n    } else if (error.name === 'ConflictError') {\n      return responseFormatter.conflict(res, error.message);\n    } else if (error.name === 'TooManyRequestsError') {\n      return responseFormatter.tooManyRequests(res, error.message);\n    } \n    return responseFormatter.internalError(res, '服务器内部错误', error);\n    \n  }\n\n  /**\n   * 验证请求数据\n   * @param {Object} req - Express请求对象\n   * @param {Object} schema - 验证模式\n   * @throws {ValidationError} 验证失败时抛出错误\n   */\n  validateRequest(req, schema) {\n    const { error, value } = schema.validate(req.body, {\n      abortEarly: false,\n      stripUnknown: true\n    });\n\n    if (error) {\n      const validationError = new Error('数据验证失败');\n      validationError.name = 'ValidationError';\n      validationError.details = error.details.map((detail) => ({\n        field: detail.path.join('.'),\n        message: detail.message,\n        value: detail.context?.value\n      }));\n      throw validationError;\n    }\n\n    return value;\n  }\n\n  /**\n   * 获取分页参数\n   * @param {Object} req - Express请求对象\n   * @returns {Object} 分页参数\n   */\n  getPaginationParams(req) {\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 20;\n    const offset = parseInt(req.query.offset) || (page - 1) * limit;\n\n    return {\n      page: Math.max(1, page),\n      limit: Math.min(100, Math.max(1, limit)),\n      offset: Math.max(0, offset)\n    };\n  }\n\n  /**\n   * 获取排序参数\n   * @param {Object} req - Express请求对象\n   * @param {Array} allowedFields - 允许排序的字段\n   * @returns {Object} 排序参数\n   */\n  getSortingParams(req, allowedFields = []) {\n    const sortBy = req.query.sortBy || 'createdAt';\n    const sortOrder = (req.query.sortOrder || 'desc').toLowerCase();\n\n    // 验证排序字段\n    const validSortBy =\n      allowedFields.length > 0 && !allowedFields.includes(sortBy) ? allowedFields[0] : sortBy;\n\n    // 验证排序方向\n    const validSortOrder = ['asc', 'desc'].includes(sortOrder) ? sortOrder : 'desc';\n\n    return {\n      sortBy: validSortBy,\n      sortOrder: validSortOrder,\n      orderBy: `${validSortBy} ${validSortOrder.toUpperCase()}`\n    };\n  }\n\n  /**\n   * 获取过滤参数\n   * @param {Object} req - Express请求对象\n   * @param {Array} allowedFilters - 允许的过滤字段\n   * @returns {Object} 过滤参数\n   */\n  getFilterParams(req, allowedFilters = []) {\n    const filters = {};\n\n    // 处理查询参数中的过滤条件\n    for (const [key, value] of Object.entries(req.query)) {\n      if (allowedFilters.includes(key) && value !== undefined && value !== '') {\n        // 处理不同类型的过滤条件\n        if (key.endsWith('_min') || key.endsWith('_max')) {\n          // 数值范围过滤\n          const fieldName = key.replace(/_min$|_max$/, '');\n          if (!filters[fieldName]) {filters[fieldName] = {};}\n\n          if (key.endsWith('_min')) {\n            filters[fieldName].min = parseFloat(value);\n          } else {\n            filters[fieldName].max = parseFloat(value);\n          }\n        } else if (key.endsWith('_like')) {\n          // 模糊匹配\n          const fieldName = key.replace(/_like$/, '');\n          filters[fieldName] = { like: `%${value}%` };\n        } else if (key.endsWith('_in')) {\n          // 数组包含\n          const fieldName = key.replace(/_in$/, '');\n          filters[fieldName] = { in: Array.isArray(value) ? value : value.split(',') };\n        } else {\n          // 精确匹配\n          filters[key] = value;\n        }\n      }\n    }\n\n    return filters;\n  }\n\n  /**\n   * 获取搜索参数\n   * @param {Object} req - Express请求对象\n   * @returns {Object} 搜索参数\n   */\n  getSearchParams(req) {\n    const keyword = req.query.keyword || req.query.q || '';\n    const searchFields = req.query.searchFields\n      ? req.query.searchFields.split(',').map((field) => field.trim())\n      : [];\n\n    return {\n      keyword: keyword.trim(),\n      searchFields,\n      hasSearch: keyword.trim().length > 0\n    };\n  }\n\n  /**\n   * 获取日期范围参数\n   * @param {Object} req - Express请求对象\n   * @returns {Object} 日期范围参数\n   */\n  getDateRangeParams(req) {\n    const startDate = req.query.startDate ? new Date(req.query.startDate) : null;\n    const endDate = req.query.endDate ? new Date(req.query.endDate) : null;\n\n    // 验证日期有效性\n    const validStartDate = startDate && !isNaN(startDate.getTime()) ? startDate : null;\n    const validEndDate = endDate && !isNaN(endDate.getTime()) ? endDate : null;\n\n    // 确保结束日期不早于开始日期\n    let finalStartDate = validStartDate;\n    let finalEndDate = validEndDate;\n    if (finalStartDate && finalEndDate && finalEndDate < finalStartDate) {\n      const temp = finalStartDate;\n      finalStartDate = finalEndDate;\n      finalEndDate = temp;\n    }\n\n    return {\n      startDate: finalStartDate,\n      endDate: finalEndDate,\n      hasDateRange: finalStartDate || finalEndDate\n    };\n  }\n\n  /**\n   * 构建查询条件\n   * @param {Object} req - Express请求对象\n   * @param {Object} options - 查询选项\n   * @returns {Object} 查询条件\n   */\n  buildQueryConditions(req, options = {}) {\n    const {\n      allowedFilters = [],\n      allowedSortFields = [],\n      defaultSort: _defaultSort = 'createdAt',\n      searchFields = []\n    } = options;\n\n    const pagination = this.getPaginationParams(req);\n    const sorting = this.getSortingParams(req, allowedSortFields);\n    const filters = this.getFilterParams(req, allowedFilters);\n    const search = this.getSearchParams(req);\n    const dateRange = this.getDateRangeParams(req);\n\n    return {\n      pagination,\n      sorting,\n      filters,\n      search,\n      dateRange,\n      // 构建完整的查询对象\n      query: {\n        ...filters,\n        ...(search.hasSearch && searchFields.length > 0\n          ? {\n            $or: searchFields.map((field) => ({\n              [field]: { $regex: search.keyword, $options: 'i' }\n            }))\n          }\n          : {}),\n        ...(dateRange.hasDateRange\n          ? {\n            ...(dateRange.startDate ? { createdAt: { $gte: dateRange.startDate } } : {}),\n            ...(dateRange.endDate\n              ? { createdAt: { ...filters.createdAt, $lte: dateRange.endDate } }\n              : {})\n          }\n          : {})\n      }\n    };\n  }\n\n  /**\n   * 格式化分页响应\n   * @param {Array} data - 数据数组\n   * @param {number} total - 总数\n   * @param {Object} pagination - 分页参数\n   * @returns {Object} 分页响应对象\n   */\n  formatPaginatedResponse(data, total, pagination) {\n    const { page, limit } = pagination;\n    const totalPages = Math.ceil(total / limit);\n    const hasNextPage = page < totalPages;\n    const hasPrevPage = page > 1;\n\n    return {\n      data,\n      pagination: {\n        current: page,\n        total: totalPages,\n        count: data.length,\n        totalCount: total,\n        limit,\n        hasNext: hasNextPage,\n        hasPrev: hasPrevPage,\n        nextPage: hasNextPage ? page + 1 : null,\n        prevPage: hasPrevPage ? page - 1 : null\n      }\n    };\n  }\n\n  /**\n   * 检查资源是否存在\n   * @param {*} resource - 资源对象\n   * @param {string} resourceName - 资源名称\n   * @throws {NotFoundError} 资源不存在时抛出错误\n   */\n  checkResourceExists(resource, resourceName = '资源') {\n    if (!resource) {\n      const error = new Error(`${resourceName}不存在`);\n      error.name = 'NotFoundError';\n      throw error;\n    }\n  }\n\n  /**\n   * 检查用户权限\n   * @param {Object} req - Express请求对象\n   * @param {string|Array} requiredRoles - 需要的角色\n   * @throws {ForbiddenError} 权限不足时抛出错误\n   */\n  checkPermission(req, requiredRoles) {\n    const userRole = req.user?.role;\n    const roles = Array.isArray(requiredRoles) ? requiredRoles : [requiredRoles];\n\n    if (!userRole || !roles.includes(userRole)) {\n      const error = new Error('权限不足');\n      error.name = 'ForbiddenError';\n      throw error;\n    }\n  }\n\n  /**\n   * 检查资源所有权\n   * @param {Object} req - Express请求对象\n   * @param {Object} resource - 资源对象\n   * @param {string} ownerField - 所有者字段名\n   * @throws {ForbiddenError} 不是资源所有者时抛出错误\n   */\n  checkOwnership(req, resource, ownerField = 'userId') {\n    const userId = req.user?.userId;\n    const resourceOwnerId = resource[ownerField];\n\n    if (req.user?.role !== 'admin' && userId !== resourceOwnerId) {\n      const error = new Error('只能操作自己的资源');\n      error.name = 'ForbiddenError';\n      throw error;\n    }\n  }\n\n  /**\n   * 记录操作日志\n   * @param {Object} req - Express请求对象\n   * @param {string} action - 操作类型\n   * @param {Object} details - 操作详情\n   */\n  logOperation(req, action, details = {}) {\n    console.log(`[${new Date().toISOString()}] Operation Log:`, {\n      action,\n      user: req.user?.username || 'anonymous',\n      userId: req.user?.userId,\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      url: req.url,\n      method: req.method,\n      ...details\n    });\n  }\n\n  /**\n   * 清理敏感数据\n   * @param {Object} data - 数据对象\n   * @param {Array} sensitiveFields - 敏感字段列表\n   * @returns {Object} 清理后的数据\n   */\n  sanitizeData(data, sensitiveFields = ['password', 'token', 'secret']) {\n    if (!data || typeof data !== 'object') {\n      return data;\n    }\n\n    const sanitized = Array.isArray(data) ? [] : {};\n\n    for (const [key, value] of Object.entries(data)) {\n      if (sensitiveFields.includes(key)) {\n        sanitized[key] = '[REDACTED]';\n      } else if (typeof value === 'object' && value !== null) {\n        sanitized[key] = this.sanitizeData(value, sensitiveFields);\n      } else {\n        sanitized[key] = value;\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * 成功响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 响应消息\n   * @param {Object} data - 响应数据\n   * @param {number} statusCode - HTTP状态码\n   */\n  success(res, message, data = null, statusCode = 200) {\n    return responseFormatter.success(res, message, data, statusCode);\n  }\n\n  /**\n   * 错误响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   * @param {number} statusCode - HTTP状态码\n   * @param {Object} details - 错误详情\n   */\n  error(res, message, statusCode = 500, details = null) {\n    return responseFormatter.error(res, message, statusCode, details);\n  }\n\n  /**\n   * 验证错误响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   * @param {Object} details - 验证错误详情\n   */\n  validationError(res, message, details = null) {\n    return responseFormatter.validationError(res, message, details);\n  }\n\n  /**\n   * 未授权响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   */\n  unauthorized(res, message = '未授权访问') {\n    return responseFormatter.unauthorized(res, message);\n  }\n\n  /**\n   * 禁止访问响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   */\n  forbidden(res, message = '禁止访问') {\n    return responseFormatter.forbidden(res, message);\n  }\n\n  /**\n   * 资源未找到响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   */\n  notFound(res, message = '资源未找到') {\n    return responseFormatter.notFound(res, message);\n  }\n}\n\nexport default BaseController;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/controllers/CarbonController.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":102,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":102,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":172,"column":9,"nodeType":"Literal","messageId":"noMagic","endLine":172,"endColumn":12},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":301,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":301,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":487,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":487,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { validationResult } from 'express-validator';\nimport BaseController from './BaseController.js';\nimport CarbonEmission from '../../../core/entities/CarbonEmission.js';\nimport CarbonFactor from '../../../core/entities/CarbonFactor.js';\nimport EnergyData from '../../../core/entities/EnergyData.js';\nimport logger from '../../../shared/utils/logger.js';\nimport { calculateTotalEmissions } from '../../../core/services/emission.js';\n\n/**\n * 碳排放控制器\n * 处理碳排放相关的业务逻辑\n */\nclass CarbonController extends BaseController {\n  constructor() {\n    super();\n  }\n\n  /**\n   * 获取碳排放数据列表\n   */\n  getCarbonEmissions = this.asyncHandler(async (req, res) => {\n    try {\n      const pagination = this.getPaginationParams(req);\n      const sorting = this.getSortingParams(req, 'timestamp', 'desc');\n      const filters = this.getFilterParams(req, ['device_id', 'emission_source']);\n      const dateRange = this.getDateRangeParams(req);\n\n      const queryConditions = {\n        ...filters,\n        ...dateRange\n      };\n\n      const result = await CarbonEmission.findWithPagination({\n        conditions: queryConditions,\n        pagination,\n        sorting\n      });\n\n      const response = this.formatPaginatedResponse(result, pagination);\n      res.success(response);\n    } catch (error) {\n      logger.error('获取碳排放数据列表失败', {\n        error: error.message,\n        userId: req.user?.id\n      });\n      res.internalError('获取碳排放数据列表失败');\n    }\n  });\n\n  /**\n   * 获取单个碳排放记录\n   */\n  getCarbonEmission = this.asyncHandler(async (req, res) => {\n    const { id } = req.params;\n\n    try {\n      const carbonRecord = await CarbonEmission.findById(id);\n      if (!carbonRecord) {\n        return res.notFound('碳排放记录不存在');\n      }\n\n      res.success(carbonRecord);\n    } catch (error) {\n      logger.error('获取碳排放记录失败', {\n        error: error.message,\n        recordId: id,\n        userId: req.user?.id\n      });\n      res.internalError('获取碳排放记录失败');\n    }\n  });\n\n  /**\n   * 创建碳排放数据记录\n   */\n  createCarbonEmission = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    try {\n      const carbonData = {\n        ...req.body,\n        created_by: req.user.id,\n        created_at: new Date().toISOString()\n      };\n\n      // 设置默认时间戳\n      if (!carbonData.timestamp) {\n        carbonData.timestamp = new Date().toISOString();\n      }\n\n      const newRecord = await CarbonEmission.create(carbonData);\n\n      this.logOperation(req, 'CARBON_EMISSION_CREATE', {\n        recordId: newRecord.id,\n        deviceId: carbonData.device_id,\n        emission: carbonData.emission_amount\n      });\n\n      res.success(newRecord, '碳排放数据创建成功', 201);\n    } catch (error) {\n      logger.error('创建碳排放数据失败', {\n        error: error.message,\n        carbonData: req.body,\n        userId: req.user?.id\n      });\n      res.internalError('创建碳排放数据失败');\n    }\n  });\n\n  /**\n   * 基于能耗数据计算碳排放\n   */\n  calculateCarbonFromEnergy = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    try {\n      const { energy_data_ids, carbon_factor_id } = req.body;\n\n      // 验证碳排放因子\n      const carbonFactor = await CarbonFactor.findById(carbon_factor_id);\n      if (!carbonFactor) {\n        return res.badRequest('碳排放因子不存在');\n      }\n\n      // 获取能耗数据\n      const energyRecords = await EnergyData.findByIds(energy_data_ids);\n      if (energyRecords.length === 0) {\n        return res.badRequest('未找到有效的能耗数据');\n      }\n\n      // 计算碳排放\n      const carbonEmissions = [];\n      for (const energyRecord of energyRecords) {\n        const emissionAmount = energyRecord.consumption * carbonFactor.factor_value;\n\n        const carbonData = {\n          device_id: energyRecord.device_id,\n          emission_source: energyRecord.energy_type,\n          emission_amount: emissionAmount,\n          emission_unit: carbonFactor.unit,\n          energy_consumption: energyRecord.consumption,\n          carbon_factor_id,\n          calculation_method: 'energy_based',\n          timestamp: energyRecord.timestamp,\n          created_by: req.user.id,\n          created_at: new Date().toISOString()\n        };\n\n        const newEmission = await CarbonEmission.create(carbonData);\n        carbonEmissions.push(newEmission);\n      }\n\n      this.logOperation(req, 'CARBON_CALCULATION', {\n        energyRecordCount: energyRecords.length,\n        carbonFactorId: carbon_factor_id,\n        totalEmission: carbonEmissions.reduce((sum, e) => sum + e.emission_amount, 0)\n      });\n\n      res.success(\n        {\n          calculated_emissions: carbonEmissions,\n          total_emission: carbonEmissions.reduce((sum, e) => sum + e.emission_amount, 0),\n          carbon_factor: carbonFactor\n        },\n        '碳排放计算成功',\n        201\n      );\n    } catch (error) {\n      logger.error('碳排放计算失败', {\n        error: error.message,\n        requestData: req.body,\n        userId: req.user?.id\n      });\n      res.internalError('碳排放计算失败');\n    }\n  });\n\n  /**\n   * 获取碳排放统计数据\n   */\n  getCarbonStatistics = this.asyncHandler(async (req, res) => {\n    try {\n      const dateRange = this.getDateRangeParams(req);\n      const { device_id, emission_source, group_by = 'day' } = req.query;\n\n      const filters = {\n        ...dateRange\n      };\n\n      if (device_id) {filters.device_id = device_id;}\n      if (emission_source) {filters.emission_source = emission_source;}\n\n      const statistics = await CarbonEmission.getStatistics({\n        filters,\n        groupBy: group_by\n      });\n\n      res.success(statistics);\n    } catch (error) {\n      logger.error('获取碳排放统计数据失败', {\n        error: error.message,\n        filters: req.query,\n        userId: req.user?.id\n      });\n      res.internalError('获取碳排放统计数据失败');\n    }\n  });\n\n  /**\n   * 获取碳排放趋势数据\n   */\n  getCarbonTrend = this.asyncHandler(async (req, res) => {\n    try {\n      const { start_time, end_time, interval = 'day' } = req.query;\n\n      if (!start_time || !end_time) {\n        return res.badRequest('缺少必要参数: start_time, end_time');\n      }\n\n      // 使用现有的碳排放计算服务\n      const trendData = calculateTotalEmissions(start_time, end_time, interval);\n\n      this.logOperation(req, 'CARBON_TREND_QUERY', {\n        timeRange: { start_time, end_time },\n        interval\n      });\n\n      res.success({\n        trend: trendData,\n        unit: 'kgCO2',\n        time_range: {\n          start: start_time,\n          end: end_time\n        },\n        interval\n      });\n    } catch (error) {\n      logger.error('获取碳排放趋势数据失败', {\n        error: error.message,\n        timeRange: { start_time: req.query.start_time, end_time: req.query.end_time },\n        userId: req.user?.id\n      });\n      res.internalError('获取碳排放趋势数据失败');\n    }\n  });\n\n  /**\n   * 获取碳排放因子列表\n   */\n  getCarbonFactors = this.asyncHandler(async (req, res) => {\n    try {\n      const pagination = this.getPaginationParams(req);\n      const filters = this.getFilterParams(req, ['energy_type', 'region']);\n\n      const result = await CarbonFactor.findWithPagination({\n        conditions: filters,\n        pagination\n      });\n\n      const response = this.formatPaginatedResponse(result, pagination);\n      res.success(response);\n    } catch (error) {\n      logger.error('获取碳排放因子列表失败', {\n        error: error.message,\n        userId: req.user?.id\n      });\n      res.internalError('获取碳排放因子列表失败');\n    }\n  });\n\n  /**\n   * 创建碳排放因子\n   */\n  createCarbonFactor = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    try {\n      const factorData = {\n        ...req.body,\n        created_by: req.user.id,\n        created_at: new Date().toISOString()\n      };\n\n      const newFactor = await CarbonFactor.create(factorData);\n\n      this.logOperation(req, 'CARBON_FACTOR_CREATE', {\n        factorId: newFactor.id,\n        energyType: factorData.energy_type,\n        factorValue: factorData.factor_value\n      });\n\n      res.success(newFactor, '碳排放因子创建成功', 201);\n    } catch (error) {\n      logger.error('创建碳排放因子失败', {\n        error: error.message,\n        factorData: req.body,\n        userId: req.user?.id\n      });\n      res.internalError('创建碳排放因子失败');\n    }\n  });\n\n  /**\n   * 更新碳排放因子\n   */\n  updateCarbonFactor = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    const { id } = req.params;\n\n    try {\n      const factor = await CarbonFactor.findById(id);\n      if (!factor) {\n        return res.notFound('碳排放因子不存在');\n      }\n\n      const updateData = {\n        ...req.body,\n        updated_by: req.user.id,\n        updated_at: new Date().toISOString()\n      };\n\n      const updatedFactor = await CarbonFactor.update(id, updateData);\n\n      this.logOperation(req, 'CARBON_FACTOR_UPDATE', {\n        factorId: id,\n        changes: Object.keys(updateData)\n      });\n\n      res.success(updatedFactor, '碳排放因子更新成功');\n    } catch (error) {\n      logger.error('更新碳排放因子失败', {\n        error: error.message,\n        factorId: id,\n        updateData: req.body,\n        userId: req.user?.id\n      });\n      res.internalError('更新碳排放因子失败');\n    }\n  });\n\n  /**\n   * 生成碳排放报告\n   */\n  generateCarbonReport = this.asyncHandler(async (req, res) => {\n    try {\n      const dateRange = this.getDateRangeParams(req);\n      const { report_type = 'summary', device_ids } = req.query;\n\n      const filters = {\n        ...dateRange\n      };\n\n      if (device_ids) {\n        filters.device_id = device_ids.split(',');\n      }\n\n      const report = await CarbonEmission.generateReport({\n        filters,\n        reportType: report_type\n      });\n\n      this.logOperation(req, 'CARBON_REPORT_GENERATE', {\n        reportType: report_type,\n        timeRange: dateRange,\n        deviceCount: device_ids ? device_ids.split(',').length : 'all'\n      });\n\n      res.success({\n        report,\n        generated_at: new Date().toISOString(),\n        report_type,\n        time_range: dateRange\n      });\n    } catch (error) {\n      logger.error('生成碳排放报告失败', {\n        error: error.message,\n        reportType: req.query.report_type,\n        userId: req.user?.id\n      });\n      res.internalError('生成碳排放报告失败');\n    }\n  });\n\n  /**\n   * 导出碳排放数据\n   */\n  exportCarbonData = this.asyncHandler(async (req, res) => {\n    try {\n      const dateRange = this.getDateRangeParams(req);\n      const filters = this.getFilterParams(req, ['device_id', 'emission_source']);\n      const { format = 'csv' } = req.query;\n\n      const queryConditions = {\n        ...filters,\n        ...dateRange\n      };\n\n      let exportData;\n      let contentType;\n      let fileExtension;\n\n      switch (format.toLowerCase()) {\n        case 'csv':\n          exportData = await CarbonEmission.exportToCSV(queryConditions);\n          contentType = 'text/csv';\n          fileExtension = 'csv';\n          break;\n        case 'json':\n          exportData = await CarbonEmission.exportToJSON(queryConditions);\n          contentType = 'application/json';\n          fileExtension = 'json';\n          break;\n        default:\n          return res.badRequest('不支持的导出格式');\n      }\n\n      this.logOperation(req, 'CARBON_DATA_EXPORT', {\n        format,\n        filters: queryConditions,\n        recordCount: exportData.recordCount\n      });\n\n      res.downloadFile(\n        exportData.content,\n        `carbon_emissions_${Date.now()}.${fileExtension}`,\n        contentType\n      );\n    } catch (error) {\n      logger.error('导出碳排放数据失败', {\n        error: error.message,\n        format: req.query.format,\n        filters: req.query,\n        userId: req.user?.id\n      });\n      res.internalError('导出碳排放数据失败');\n    }\n  });\n\n  /**\n   * 删除碳排放数据记录\n   */\n  deleteCarbonEmission = this.asyncHandler(async (req, res) => {\n    const { id } = req.params;\n\n    try {\n      const carbonRecord = await CarbonEmission.findById(id);\n      if (!carbonRecord) {\n        return res.notFound('碳排放记录不存在');\n      }\n\n      await CarbonEmission.delete(id);\n\n      this.logOperation(req, 'CARBON_EMISSION_DELETE', {\n        recordId: id,\n        deviceId: carbonRecord.device_id\n      });\n\n      res.success(null, '碳排放数据删除成功');\n    } catch (error) {\n      logger.error('删除碳排放数据失败', {\n        error: error.message,\n        recordId: id,\n        userId: req.user?.id\n      });\n      res.internalError('删除碳排放数据失败');\n    }\n  });\n\n  /**\n   * 获取碳排放预测\n   */\n  getCarbonPrediction = this.asyncHandler(async (req, res) => {\n    try {\n      const { device_id, prediction_days = 7 } = req.query;\n\n      const filters = {};\n      if (device_id) {filters.device_id = device_id;}\n\n      const prediction = await CarbonEmission.getPrediction({\n        filters,\n        predictionDays: parseInt(prediction_days)\n      });\n\n      res.success({\n        prediction_days: parseInt(prediction_days),\n        prediction_data: prediction,\n        generated_at: new Date().toISOString()\n      });\n    } catch (error) {\n      logger.error('获取碳排放预测失败', {\n        error: error.message,\n        deviceId: req.query.device_id,\n        userId: req.user?.id\n      });\n      res.internalError('获取碳排放预测失败');\n    }\n  });\n}\n\nexport default new CarbonController();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/controllers/DeviceController.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":119,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":119,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { validationResult } from 'express-validator';\nimport BaseController from './BaseController.js';\nimport Device from '../../../core/entities/Device.js';\nimport DeviceType from '../../../core/entities/DeviceType.js';\nimport logger from '../../../shared/utils/logger.js';\n\n/**\n * 设备管理控制器\n * 处理设备相关的业务逻辑\n */\nclass DeviceController extends BaseController {\n  constructor() {\n    super();\n  }\n\n  /**\n   * 获取设备列表\n   */\n  getDevices = this.asyncHandler(async (req, res) => {\n    try {\n      const pagination = this.getPaginationParams(req);\n      const sorting = this.getSortingParams(req, 'created_at', 'desc');\n      const filters = this.getFilterParams(req, ['type', 'status', 'location']);\n      const search = this.getSearchParams(req, ['name', 'serial_number', 'model']);\n      const dateRange = this.getDateRangeParams(req);\n\n      // 构建查询条件\n      const queryConditions = {\n        ...filters,\n        ...search,\n        ...dateRange\n      };\n\n      const result = await Device.findWithPagination({\n        conditions: queryConditions,\n        pagination,\n        sorting\n      });\n\n      const response = this.formatPaginatedResponse(result, pagination);\n      res.success(response);\n    } catch (error) {\n      logger.error('获取设备列表失败', {\n        error: error.message,\n        userId: req.user?.id\n      });\n      res.internalError('获取设备列表失败');\n    }\n  });\n\n  /**\n   * 获取单个设备详情\n   */\n  getDevice = this.asyncHandler(async (req, res) => {\n    const { id } = req.params;\n\n    try {\n      const device = await Device.findById(id);\n      if (!device) {\n        return res.notFound('设备不存在');\n      }\n\n      // 获取设备类型信息\n      if (device.type_id) {\n        device.type_info = await DeviceType.findById(device.type_id);\n      }\n\n      res.success(device);\n    } catch (error) {\n      logger.error('获取设备详情失败', {\n        error: error.message,\n        deviceId: id,\n        userId: req.user?.id\n      });\n      res.internalError('获取设备详情失败');\n    }\n  });\n\n  /**\n   * 创建新设备\n   */\n  createDevice = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    try {\n      const deviceData = {\n        ...req.body,\n        created_by: req.user.id,\n        created_at: new Date().toISOString(),\n        status: req.body.status || 'offline'\n      };\n\n      // 检查序列号是否已存在\n      if (deviceData.serial_number) {\n        const existingDevice = await Device.findBySerialNumber(deviceData.serial_number);\n        if (existingDevice) {\n          return res.conflict('设备序列号已存在');\n        }\n      }\n\n      // 验证设备类型\n      if (deviceData.type_id) {\n        const deviceType = await DeviceType.findById(deviceData.type_id);\n        if (!deviceType) {\n          return res.badRequest('无效的设备类型');\n        }\n      }\n\n      const newDevice = await Device.create(deviceData);\n\n      this.logOperation(req, 'DEVICE_CREATE', {\n        deviceId: newDevice.id,\n        deviceName: newDevice.name\n      });\n\n      res.success(newDevice, '设备创建成功', 201);\n    } catch (error) {\n      logger.error('创建设备失败', {\n        error: error.message,\n        deviceData: req.body,\n        userId: req.user?.id\n      });\n      res.internalError('创建设备失败');\n    }\n  });\n\n  /**\n   * 更新设备信息\n   */\n  updateDevice = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    const { id } = req.params;\n\n    try {\n      const device = await Device.findById(id);\n      if (!device) {\n        return res.notFound('设备不存在');\n      }\n\n      const updateData = {\n        ...req.body,\n        updated_by: req.user.id,\n        updated_at: new Date().toISOString()\n      };\n\n      // 检查序列号冲突（如果更新了序列号）\n      if (updateData.serial_number && updateData.serial_number !== device.serial_number) {\n        const existingDevice = await Device.findBySerialNumber(updateData.serial_number);\n        if (existingDevice && existingDevice.id !== id) {\n          return res.conflict('设备序列号已存在');\n        }\n      }\n\n      // 验证设备类型（如果更新了类型）\n      if (updateData.type_id && updateData.type_id !== device.type_id) {\n        const deviceType = await DeviceType.findById(updateData.type_id);\n        if (!deviceType) {\n          return res.badRequest('无效的设备类型');\n        }\n      }\n\n      const updatedDevice = await Device.update(id, updateData);\n\n      this.logOperation(req, 'DEVICE_UPDATE', {\n        deviceId: id,\n        deviceName: updatedDevice.name,\n        changes: Object.keys(updateData)\n      });\n\n      res.success(updatedDevice, '设备更新成功');\n    } catch (error) {\n      logger.error('更新设备失败', {\n        error: error.message,\n        deviceId: id,\n        updateData: req.body,\n        userId: req.user?.id\n      });\n      res.internalError('更新设备失败');\n    }\n  });\n\n  /**\n   * 删除设备\n   */\n  deleteDevice = this.asyncHandler(async (req, res) => {\n    const { id } = req.params;\n\n    try {\n      const device = await Device.findById(id);\n      if (!device) {\n        return res.notFound('设备不存在');\n      }\n\n      // 检查设备是否有关联数据\n      const hasRelatedData = await Device.hasRelatedData(id);\n      if (hasRelatedData) {\n        return res.conflict('设备存在关联数据，无法删除');\n      }\n\n      await Device.delete(id);\n\n      this.logOperation(req, 'DEVICE_DELETE', {\n        deviceId: id,\n        deviceName: device.name\n      });\n\n      res.success(null, '设备删除成功');\n    } catch (error) {\n      logger.error('删除设备失败', {\n        error: error.message,\n        deviceId: id,\n        userId: req.user?.id\n      });\n      res.internalError('删除设备失败');\n    }\n  });\n\n  /**\n   * 获取设备类型列表\n   */\n  getDeviceTypes = this.asyncHandler(async (req, res) => {\n    try {\n      const deviceTypes = await DeviceType.findAll();\n      res.success(deviceTypes);\n    } catch (error) {\n      logger.error('获取设备类型列表失败', {\n        error: error.message,\n        userId: req.user?.id\n      });\n      res.internalError('获取设备类型列表失败');\n    }\n  });\n\n  /**\n   * 获取设备状态统计\n   */\n  getDeviceStatusStats = this.asyncHandler(async (req, res) => {\n    try {\n      const stats = await Device.getStatusStatistics();\n      res.success(stats);\n    } catch (error) {\n      logger.error('获取设备状态统计失败', {\n        error: error.message,\n        userId: req.user?.id\n      });\n      res.internalError('获取设备状态统计失败');\n    }\n  });\n\n  /**\n   * 获取设备类型统计\n   */\n  getDeviceTypeStats = this.asyncHandler(async (req, res) => {\n    try {\n      const stats = await Device.getTypeStatistics();\n      res.success(stats);\n    } catch (error) {\n      logger.error('获取设备类型统计失败', {\n        error: error.message,\n        userId: req.user?.id\n      });\n      res.internalError('获取设备类型统计失败');\n    }\n  });\n\n  /**\n   * 批量更新设备状态\n   */\n  batchUpdateStatus = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    const { device_ids, status } = req.body;\n\n    try {\n      const updateData = {\n        status,\n        updated_by: req.user.id,\n        updated_at: new Date().toISOString()\n      };\n\n      const result = await Device.batchUpdate(device_ids, updateData);\n\n      this.logOperation(req, 'DEVICE_BATCH_UPDATE', {\n        deviceIds: device_ids,\n        status,\n        affectedCount: result.affectedRows\n      });\n\n      res.success(\n        {\n          affected_count: result.affectedRows,\n          status\n        },\n        '批量更新设备状态成功'\n      );\n    } catch (error) {\n      logger.error('批量更新设备状态失败', {\n        error: error.message,\n        deviceIds: req.body.device_ids,\n        status: req.body.status,\n        userId: req.user?.id\n      });\n      res.internalError('批量更新设备状态失败');\n    }\n  });\n\n  /**\n   * 设备健康检查\n   */\n  healthCheck = this.asyncHandler(async (req, res) => {\n    const { id } = req.params;\n\n    try {\n      const device = await Device.findById(id);\n      if (!device) {\n        return res.notFound('设备不存在');\n      }\n\n      // 执行设备健康检查\n      const healthStatus = await Device.performHealthCheck(id);\n\n      // 更新设备健康状态\n      await Device.update(id, {\n        health_status: healthStatus.status,\n        last_health_check: new Date().toISOString(),\n        updated_by: req.user.id,\n        updated_at: new Date().toISOString()\n      });\n\n      this.logOperation(req, 'DEVICE_HEALTH_CHECK', {\n        deviceId: id,\n        healthStatus: healthStatus.status\n      });\n\n      res.success(healthStatus, '设备健康检查完成');\n    } catch (error) {\n      logger.error('设备健康检查失败', {\n        error: error.message,\n        deviceId: id,\n        userId: req.user?.id\n      });\n      res.internalError('设备健康检查失败');\n    }\n  });\n\n  /**\n   * 获取设备历史数据\n   */\n  getDeviceHistory = this.asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    const dateRange = this.getDateRangeParams(req);\n    const pagination = this.getPaginationParams(req);\n\n    try {\n      const device = await Device.findById(id);\n      if (!device) {\n        return res.notFound('设备不存在');\n      }\n\n      const history = await Device.getHistory(id, {\n        ...dateRange,\n        ...pagination\n      });\n\n      const response = this.formatPaginatedResponse(history, pagination);\n      res.success(response);\n    } catch (error) {\n      logger.error('获取设备历史数据失败', {\n        error: error.message,\n        deviceId: id,\n        userId: req.user?.id\n      });\n      res.internalError('获取设备历史数据失败');\n    }\n  });\n}\n\nexport default new DeviceController();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/controllers/DigitalTwinController.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":12,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":12,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":35,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":35,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":46,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":46,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":52,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":52,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":65,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":65,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":77,"column":77,"nodeType":"Literal","messageId":"noMagic","endLine":77,"endColumn":80},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":80,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":80,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":91,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":91,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":105,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":105,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":116,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":116,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":124,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":124,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":135,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":135,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":143,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":143,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":154,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":154,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":167,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":167,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":178,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":178,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":193,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":193,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":204,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":204,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":219,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":219,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":240,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":240,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":251,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":251,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":259,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":259,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":270,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":270,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":284,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":284,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":319,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":319,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import BaseController from './BaseController.js';\nimport DigitalTwin from '../../../domain/entities/DigitalTwin.js';\nimport Device from '../../../domain/entities/Device.js';\nimport logger from '../../../utils/logger.js';\n\nclass DigitalTwinController extends BaseController {\n  /**\n   * 获取数字孪生列表\n   */\n  async getDigitalTwins(req, res) {\n    try {\n      const { page = 1, limit = 20, deviceId, twinType, status, buildingId } = req.query;\n\n      const filters = {};\n      if (deviceId) {filters.deviceId = deviceId;}\n      if (twinType) {filters.twinType = twinType;}\n      if (status) {filters.status = status;}\n      if (buildingId) {filters.buildingId = buildingId;}\n\n      const offset = (page - 1) * limit;\n      const digitalTwins = await DigitalTwin.findWithPagination(filters, offset, parseInt(limit));\n      const total = await DigitalTwin.countDocuments(filters);\n\n      return this.success(res, '获取数字孪生列表成功', {\n        data: digitalTwins,\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      });\n    } catch (error) {\n      logger.error('获取数字孪生列表错误:', error);\n      return this.error(res, '获取数字孪生列表失败', 500);\n    }\n  }\n\n  /**\n   * 获取单个数字孪生\n   */\n  async getDigitalTwin(req, res) {\n    try {\n      const digitalTwin = await DigitalTwin.findByIdWithDetails(req.params.id);\n      if (!digitalTwin) {\n        return this.error(res, '数字孪生不存在', 404);\n      }\n\n      return this.success(res, '获取数字孪生成功', { digitalTwin });\n    } catch (error) {\n      logger.error('获取数字孪生错误:', error);\n      return this.error(res, '获取数字孪生失败', 500);\n    }\n  }\n\n  /**\n   * 创建数字孪生\n   */\n  async createDigitalTwin(req, res) {\n    try {\n      // 验证关联设备是否存在\n      if (req.body.deviceId) {\n        const device = await Device.findById(req.body.deviceId);\n        if (!device) {\n          return this.error(res, '关联设备不存在', 404);\n        }\n      }\n\n      const digitalTwinData = {\n        ...req.body,\n        createdBy: req.user.userId,\n        createdAt: new Date()\n      };\n\n      const newDigitalTwin = await DigitalTwin.create(digitalTwinData);\n\n      return this.success(res, '数字孪生创建成功', { digitalTwin: newDigitalTwin }, 201);\n    } catch (error) {\n      logger.error('创建数字孪生错误:', error);\n      return this.error(res, '创建数字孪生失败', 500);\n    }\n  }\n\n  /**\n   * 更新数字孪生\n   */\n  async updateDigitalTwin(req, res) {\n    try {\n      const digitalTwin = await DigitalTwin.findById(req.params.id);\n      if (!digitalTwin) {\n        return this.error(res, '数字孪生不存在', 404);\n      }\n\n      const updateData = {\n        ...req.body,\n        updatedBy: req.user.userId,\n        updatedAt: new Date()\n      };\n\n      const updatedDigitalTwin = await digitalTwin.update(updateData);\n\n      return this.success(res, '数字孪生更新成功', { digitalTwin: updatedDigitalTwin });\n    } catch (error) {\n      logger.error('更新数字孪生错误:', error);\n      return this.error(res, '更新数字孪生失败', 500);\n    }\n  }\n\n  /**\n   * 删除数字孪生\n   */\n  async deleteDigitalTwin(req, res) {\n    try {\n      const digitalTwin = await DigitalTwin.findById(req.params.id);\n      if (!digitalTwin) {\n        return this.error(res, '数字孪生不存在', 404);\n      }\n\n      await digitalTwin.delete();\n\n      return this.success(res, '数字孪生删除成功');\n    } catch (error) {\n      logger.error('删除数字孪生错误:', error);\n      return this.error(res, '删除数字孪生失败', 500);\n    }\n  }\n\n  /**\n   * 获取数字孪生实时数据\n   */\n  async getDigitalTwinRealTimeData(req, res) {\n    try {\n      const digitalTwin = await DigitalTwin.findById(req.params.id);\n      if (!digitalTwin) {\n        return this.error(res, '数字孪生不存在', 404);\n      }\n\n      const realTimeData = await digitalTwin.getRealTimeData();\n\n      return this.success(res, '获取实时数据成功', { realTimeData });\n    } catch (error) {\n      logger.error('获取数字孪生实时数据错误:', error);\n      return this.error(res, '获取实时数据失败', 500);\n    }\n  }\n\n  /**\n   * 更新数字孪生状态\n   */\n  async updateDigitalTwinStatus(req, res) {\n    try {\n      const digitalTwin = await DigitalTwin.findById(req.params.id);\n      if (!digitalTwin) {\n        return this.error(res, '数字孪生不存在', 404);\n      }\n\n      const { status, statusData } = req.body;\n      const updatedDigitalTwin = await digitalTwin.updateStatus(\n        status,\n        statusData,\n        req.user.userId\n      );\n\n      return this.success(res, '数字孪生状态更新成功', { digitalTwin: updatedDigitalTwin });\n    } catch (error) {\n      logger.error('更新数字孪生状态错误:', error);\n      return this.error(res, '更新状态失败', 500);\n    }\n  }\n\n  /**\n   * 获取数字孪生模拟数据\n   */\n  async getDigitalTwinSimulationData(req, res) {\n    try {\n      const digitalTwin = await DigitalTwin.findById(req.params.id);\n      if (!digitalTwin) {\n        return this.error(res, '数字孪生不存在', 404);\n      }\n\n      const { startDate, endDate, simulationType, parameters } = req.query;\n\n      const simulationData = await digitalTwin.getSimulationData({\n        startDate: startDate ? new Date(startDate) : null,\n        endDate: endDate ? new Date(endDate) : null,\n        simulationType,\n        parameters: parameters ? JSON.parse(parameters) : {}\n      });\n\n      return this.success(res, '获取模拟数据成功', { simulationData });\n    } catch (error) {\n      logger.error('获取数字孪生模拟数据错误:', error);\n      return this.error(res, '获取模拟数据失败', 500);\n    }\n  }\n\n  /**\n   * 运行数字孪生模拟\n   */\n  async runDigitalTwinSimulation(req, res) {\n    try {\n      const digitalTwin = await DigitalTwin.findById(req.params.id);\n      if (!digitalTwin) {\n        return this.error(res, '数字孪生不存在', 404);\n      }\n\n      const { simulationType, parameters, duration } = req.body;\n\n      const simulationResult = await digitalTwin.runSimulation({\n        simulationType,\n        parameters,\n        duration,\n        initiatedBy: req.user.userId\n      });\n\n      return this.success(res, '模拟运行成功', { simulationResult });\n    } catch (error) {\n      logger.error('运行数字孪生模拟错误:', error);\n      return this.error(res, '运行模拟失败', 500);\n    }\n  }\n\n  /**\n   * 获取数字孪生统计数据\n   */\n  async getDigitalTwinStats(req, res) {\n    try {\n      const { twinType, buildingId, status } = req.query;\n\n      const filters = {};\n      if (twinType) {filters.twinType = twinType;}\n      if (buildingId) {filters.buildingId = buildingId;}\n      if (status) {filters.status = status;}\n\n      const stats = await DigitalTwin.getStatistics(filters);\n\n      return this.success(res, '获取数字孪生统计成功', { stats });\n    } catch (error) {\n      logger.error('获取数字孪生统计错误:', error);\n      return this.error(res, '获取统计数据失败', 500);\n    }\n  }\n\n  /**\n   * 同步数字孪生数据\n   */\n  async syncDigitalTwinData(req, res) {\n    try {\n      const digitalTwin = await DigitalTwin.findById(req.params.id);\n      if (!digitalTwin) {\n        return this.error(res, '数字孪生不存在', 404);\n      }\n\n      const syncResult = await digitalTwin.syncWithRealWorld(req.user.userId);\n\n      return this.success(res, '数据同步成功', { syncResult });\n    } catch (error) {\n      logger.error('同步数字孪生数据错误:', error);\n      return this.error(res, '数据同步失败', 500);\n    }\n  }\n\n  /**\n   * 获取数字孪生性能指标\n   */\n  async getDigitalTwinPerformance(req, res) {\n    try {\n      const digitalTwin = await DigitalTwin.findById(req.params.id);\n      if (!digitalTwin) {\n        return this.error(res, '数字孪生不存在', 404);\n      }\n\n      const { startDate, endDate, metrics } = req.query;\n\n      const performance = await digitalTwin.getPerformanceMetrics({\n        startDate: startDate ? new Date(startDate) : null,\n        endDate: endDate ? new Date(endDate) : null,\n        metrics: metrics ? metrics.split(',') : []\n      });\n\n      return this.success(res, '获取性能指标成功', { performance });\n    } catch (error) {\n      logger.error('获取数字孪生性能指标错误:', error);\n      return this.error(res, '获取性能指标失败', 500);\n    }\n  }\n\n  /**\n   * 导出数字孪生数据\n   */\n  async exportDigitalTwinData(req, res) {\n    try {\n      const { twinType, buildingId, status, format = 'csv' } = req.query;\n\n      const filters = {};\n      if (twinType) {filters.twinType = twinType;}\n      if (buildingId) {filters.buildingId = buildingId;}\n      if (status) {filters.status = status;}\n\n      let exportData;\n      let contentType;\n      let filename;\n\n      if (format === 'json') {\n        exportData = await DigitalTwin.exportToJSON(filters);\n        contentType = 'application/json';\n        filename = 'digital-twins.json';\n      } else {\n        exportData = await DigitalTwin.exportToCSV(filters);\n        contentType = 'text/csv';\n        filename = 'digital-twins.csv';\n      }\n\n      res.setHeader('Content-Type', contentType);\n      res.setHeader('Content-Disposition', `attachment; filename=${filename}`);\n      res.send(exportData);\n    } catch (error) {\n      logger.error('导出数字孪生数据错误:', error);\n      return this.error(res, '导出数据失败', 500);\n    }\n  }\n}\n\nexport default new DigitalTwinController();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/controllers/EnergyController.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":114,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":114,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":170,"column":9,"nodeType":"Literal","messageId":"noMagic","endLine":170,"endColumn":12},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":219,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":219,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":344,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":344,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { validationResult } from 'express-validator';\nimport BaseController from './BaseController.js';\nimport EnergyData from '../../../core/entities/EnergyData.js';\nimport Device from '../../../core/entities/Device.js';\nimport logger from '../../../shared/utils/logger.js';\n\n/**\n * 能源数据控制器\n * 处理能耗数据相关的业务逻辑\n */\nclass EnergyController extends BaseController {\n  constructor() {\n    super();\n  }\n\n  /**\n   * 获取能耗数据列表\n   */\n  getEnergyData = this.asyncHandler(async (req, res) => {\n    try {\n      const pagination = this.getPaginationParams(req);\n      const sorting = this.getSortingParams(req, 'timestamp', 'desc');\n      const filters = this.getFilterParams(req, ['device_id', 'energy_type']);\n      const dateRange = this.getDateRangeParams(req);\n\n      // 构建查询条件\n      const queryConditions = {\n        ...filters,\n        ...dateRange\n      };\n\n      const result = await EnergyData.findWithPagination({\n        conditions: queryConditions,\n        pagination,\n        sorting\n      });\n\n      const response = this.formatPaginatedResponse(result, pagination);\n      res.success(response);\n    } catch (error) {\n      logger.error('获取能耗数据列表失败', {\n        error: error.message,\n        userId: req.user?.id\n      });\n      res.internalError('获取能耗数据列表失败');\n    }\n  });\n\n  /**\n   * 获取单个能耗记录\n   */\n  getEnergyRecord = this.asyncHandler(async (req, res) => {\n    const { id } = req.params;\n\n    try {\n      const energyRecord = await EnergyData.findById(id);\n      if (!energyRecord) {\n        return res.notFound('能耗记录不存在');\n      }\n\n      // 获取关联设备信息\n      if (energyRecord.device_id) {\n        energyRecord.device_info = await Device.findById(energyRecord.device_id);\n      }\n\n      res.success(energyRecord);\n    } catch (error) {\n      logger.error('获取能耗记录失败', {\n        error: error.message,\n        recordId: id,\n        userId: req.user?.id\n      });\n      res.internalError('获取能耗记录失败');\n    }\n  });\n\n  /**\n   * 创建能耗数据记录\n   */\n  createEnergyData = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    try {\n      const energyData = {\n        ...req.body,\n        created_by: req.user.id,\n        created_at: new Date().toISOString()\n      };\n\n      // 验证设备是否存在\n      if (energyData.device_id) {\n        const device = await Device.findById(energyData.device_id);\n        if (!device) {\n          return res.badRequest('设备不存在');\n        }\n      }\n\n      // 设置默认时间戳\n      if (!energyData.timestamp) {\n        energyData.timestamp = new Date().toISOString();\n      }\n\n      const newRecord = await EnergyData.create(energyData);\n\n      this.logOperation(req, 'ENERGY_DATA_CREATE', {\n        recordId: newRecord.id,\n        deviceId: energyData.device_id,\n        consumption: energyData.consumption\n      });\n\n      res.success(newRecord, '能耗数据创建成功', 201);\n    } catch (error) {\n      logger.error('创建能耗数据失败', {\n        error: error.message,\n        energyData: req.body,\n        userId: req.user?.id\n      });\n      res.internalError('创建能耗数据失败');\n    }\n  });\n\n  /**\n   * 批量创建能耗数据记录\n   */\n  batchCreateEnergyData = this.asyncHandler(async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.validationError(errors.array());\n    }\n\n    const { records } = req.body;\n\n    try {\n      // 验证所有设备ID\n      const deviceIds = [...new Set(records.map((r) => r.device_id).filter(Boolean))];\n      if (deviceIds.length > 0) {\n        const devices = await Device.findByIds(deviceIds);\n        const existingDeviceIds = devices.map((d) => d.id);\n        const invalidDeviceIds = deviceIds.filter((id) => !existingDeviceIds.includes(id));\n\n        if (invalidDeviceIds.length > 0) {\n          return res.badRequest(`以下设备不存在: ${invalidDeviceIds.join(', ')}`);\n        }\n      }\n\n      // 处理批量数据\n      const processedRecords = records.map((record) => ({\n        ...record,\n        created_by: req.user.id,\n        created_at: new Date().toISOString(),\n        timestamp: record.timestamp || new Date().toISOString()\n      }));\n\n      const result = await EnergyData.batchCreate(processedRecords);\n\n      this.logOperation(req, 'ENERGY_DATA_BATCH_CREATE', {\n        recordCount: processedRecords.length,\n        deviceIds\n      });\n\n      res.success(\n        {\n          created_count: result.insertedCount,\n          records: result.records\n        },\n        '批量创建能耗数据成功',\n        201\n      );\n    } catch (error) {\n      logger.error('批量创建能耗数据失败', {\n        error: error.message,\n        recordCount: req.body.records?.length,\n        userId: req.user?.id\n      });\n      res.internalError('批量创建能耗数据失败');\n    }\n  });\n\n  /**\n   * 获取能耗统计数据\n   */\n  getEnergyStatistics = this.asyncHandler(async (req, res) => {\n    try {\n      const dateRange = this.getDateRangeParams(req);\n      const { device_id, energy_type, group_by = 'day' } = req.query;\n\n      const filters = {\n        ...dateRange\n      };\n\n      if (device_id) {filters.device_id = device_id;}\n      if (energy_type) {filters.energy_type = energy_type;}\n\n      const statistics = await EnergyData.getStatistics({\n        filters,\n        groupBy: group_by\n      });\n\n      res.success(statistics);\n    } catch (error) {\n      logger.error('获取能耗统计数据失败', {\n        error: error.message,\n        filters: req.query,\n        userId: req.user?.id\n      });\n      res.internalError('获取能耗统计数据失败');\n    }\n  });\n\n  /**\n   * 获取设备能耗排行\n   */\n  getDeviceEnergyRanking = this.asyncHandler(async (req, res) => {\n    try {\n      const dateRange = this.getDateRangeParams(req);\n      const { limit = 10, energy_type } = req.query;\n\n      const filters = {\n        ...dateRange\n      };\n\n      if (energy_type) {filters.energy_type = energy_type;}\n\n      const ranking = await EnergyData.getDeviceRanking({\n        filters,\n        limit: parseInt(limit)\n      });\n\n      res.success(ranking);\n    } catch (error) {\n      logger.error('获取设备能耗排行失败', {\n        error: error.message,\n        filters: req.query,\n        userId: req.user?.id\n      });\n      res.internalError('获取设备能耗排行失败');\n    }\n  });\n\n  /**\n   * 获取能耗趋势数据\n   */\n  getEnergyTrend = this.asyncHandler(async (req, res) => {\n    try {\n      const dateRange = this.getDateRangeParams(req);\n      const { device_id, energy_type, interval = 'hour' } = req.query;\n\n      const filters = {\n        ...dateRange\n      };\n\n      if (device_id) {filters.device_id = device_id;}\n      if (energy_type) {filters.energy_type = energy_type;}\n\n      const trendData = await EnergyData.getTrendData({\n        filters,\n        interval\n      });\n\n      res.success({\n        trend: trendData,\n        interval,\n        time_range: dateRange\n      });\n    } catch (error) {\n      logger.error('获取能耗趋势数据失败', {\n        error: error.message,\n        filters: req.query,\n        userId: req.user?.id\n      });\n      res.internalError('获取能耗趋势数据失败');\n    }\n  });\n\n  /**\n   * 删除能耗数据记录\n   */\n  deleteEnergyData = this.asyncHandler(async (req, res) => {\n    const { id } = req.params;\n\n    try {\n      const energyRecord = await EnergyData.findById(id);\n      if (!energyRecord) {\n        return res.notFound('能耗记录不存在');\n      }\n\n      await EnergyData.delete(id);\n\n      this.logOperation(req, 'ENERGY_DATA_DELETE', {\n        recordId: id,\n        deviceId: energyRecord.device_id\n      });\n\n      res.success(null, '能耗数据删除成功');\n    } catch (error) {\n      logger.error('删除能耗数据失败', {\n        error: error.message,\n        recordId: id,\n        userId: req.user?.id\n      });\n      res.internalError('删除能耗数据失败');\n    }\n  });\n\n  /**\n   * 导出能耗数据（CSV格式）\n   */\n  exportEnergyData = this.asyncHandler(async (req, res) => {\n    try {\n      const dateRange = this.getDateRangeParams(req);\n      const filters = this.getFilterParams(req, ['device_id', 'energy_type']);\n\n      const queryConditions = {\n        ...filters,\n        ...dateRange\n      };\n\n      const data = await EnergyData.exportToCSV(queryConditions);\n\n      this.logOperation(req, 'ENERGY_DATA_EXPORT', {\n        filters: queryConditions,\n        recordCount: data.recordCount\n      });\n\n      res.downloadFile(data.csvContent, `energy_data_${Date.now()}.csv`, 'text/csv');\n    } catch (error) {\n      logger.error('导出能耗数据失败', {\n        error: error.message,\n        filters: req.query,\n        userId: req.user?.id\n      });\n      res.internalError('导出能耗数据失败');\n    }\n  });\n\n  /**\n   * 获取能耗预测数据\n   */\n  getEnergyPrediction = this.asyncHandler(async (req, res) => {\n    try {\n      const { device_id, prediction_days = 7 } = req.query;\n\n      if (!device_id) {\n        return res.badRequest('设备ID是必需的');\n      }\n\n      // 验证设备是否存在\n      const device = await Device.findById(device_id);\n      if (!device) {\n        return res.badRequest('设备不存在');\n      }\n\n      const prediction = await EnergyData.getPrediction({\n        deviceId: device_id,\n        predictionDays: parseInt(prediction_days)\n      });\n\n      res.success({\n        device_id,\n        prediction_days: parseInt(prediction_days),\n        prediction_data: prediction,\n        generated_at: new Date().toISOString()\n      });\n    } catch (error) {\n      logger.error('获取能耗预测数据失败', {\n        error: error.message,\n        deviceId: req.query.device_id,\n        userId: req.user?.id\n      });\n      res.internalError('获取能耗预测数据失败');\n    }\n  });\n\n  /**\n   * 获取实时能耗数据\n   */\n  getRealTimeEnergyData = this.asyncHandler(async (req, res) => {\n    try {\n      const { device_ids } = req.query;\n      const deviceIdArray = device_ids ? device_ids.split(',') : [];\n\n      const realTimeData = await EnergyData.getRealTimeData(deviceIdArray);\n\n      res.success({\n        data: realTimeData,\n        timestamp: new Date().toISOString(),\n        device_count: realTimeData.length\n      });\n    } catch (error) {\n      logger.error('获取实时能耗数据失败', {\n        error: error.message,\n        deviceIds: req.query.device_ids,\n        userId: req.user?.id\n      });\n      res.internalError('获取实时能耗数据失败');\n    }\n  });\n}\n\nexport default new EnergyController();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/controllers/MaintenanceController.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":14,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":14,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":53,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":53,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":64,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":64,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":70,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":70,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":82,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":82,"endColumn":44},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":97,"column":9,"nodeType":"Literal","messageId":"noMagic","endLine":97,"endColumn":12},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":101,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":101,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":112,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":112,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":126,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":126,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":137,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":137,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":145,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":145,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":170,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":170,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":194,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":194,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":205,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":205,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":209,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":209,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":227,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":227,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":237,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":237,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":258,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":258,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":286,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":286,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import BaseController from './BaseController.js';\nimport MaintenanceRecord from '../../../domain/entities/MaintenanceRecord.js';\nimport Device from '../../../domain/entities/Device.js';\nimport logger from '../../../utils/logger.js';\n\nclass MaintenanceController extends BaseController {\n  /**\n   * 获取维护记录列表\n   */\n  async getMaintenanceRecords(req, res) {\n    try {\n      const {\n        page = 1,\n        limit = 20,\n        deviceId,\n        maintenanceType,\n        status,\n        startDate,\n        endDate,\n        priority\n      } = req.query;\n\n      const filters = {};\n      if (deviceId) {filters.deviceId = deviceId;}\n      if (maintenanceType) {filters.maintenanceType = maintenanceType;}\n      if (status) {filters.status = status;}\n      if (priority) {filters.priority = priority;}\n      if (startDate || endDate) {\n        filters.scheduledDate = {};\n        if (startDate) {filters.scheduledDate.$gte = new Date(startDate);}\n        if (endDate) {filters.scheduledDate.$lte = new Date(endDate);}\n      }\n\n      const offset = (page - 1) * limit;\n      const maintenanceRecords = await MaintenanceRecord.findWithPagination(\n        filters,\n        offset,\n        parseInt(limit)\n      );\n      const total = await MaintenanceRecord.countDocuments(filters);\n\n      return this.success(res, '获取维护记录成功', {\n        data: maintenanceRecords,\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      });\n    } catch (error) {\n      logger.error('获取维护记录错误:', error);\n      return this.error(res, '获取维护记录失败', 500);\n    }\n  }\n\n  /**\n   * 获取单个维护记录\n   */\n  async getMaintenanceRecord(req, res) {\n    try {\n      const maintenanceRecord = await MaintenanceRecord.findByIdWithDevice(req.params.id);\n      if (!maintenanceRecord) {\n        return this.error(res, '维护记录不存在', 404);\n      }\n\n      return this.success(res, '获取维护记录成功', { maintenanceRecord });\n    } catch (error) {\n      logger.error('获取维护记录错误:', error);\n      return this.error(res, '获取维护记录失败', 500);\n    }\n  }\n\n  /**\n   * 创建维护记录\n   */\n  async createMaintenanceRecord(req, res) {\n    try {\n      // 验证设备是否存在\n      const device = await Device.findById(req.body.deviceId);\n      if (!device) {\n        return this.error(res, '设备不存在', 404);\n      }\n\n      const maintenanceData = {\n        ...req.body,\n        createdBy: req.user.userId,\n        createdAt: new Date()\n      };\n\n      const newMaintenanceRecord = await MaintenanceRecord.create(maintenanceData);\n\n      return this.success(\n        res,\n        '维护记录创建成功',\n        { maintenanceRecord: newMaintenanceRecord },\n        201\n      );\n    } catch (error) {\n      logger.error('创建维护记录错误:', error);\n      return this.error(res, '创建维护记录失败', 500);\n    }\n  }\n\n  /**\n   * 更新维护记录\n   */\n  async updateMaintenanceRecord(req, res) {\n    try {\n      const maintenanceRecord = await MaintenanceRecord.findById(req.params.id);\n      if (!maintenanceRecord) {\n        return this.error(res, '维护记录不存在', 404);\n      }\n\n      const updateData = {\n        ...req.body,\n        updatedBy: req.user.userId,\n        updatedAt: new Date()\n      };\n\n      const updatedRecord = await maintenanceRecord.update(updateData);\n\n      return this.success(res, '维护记录更新成功', { maintenanceRecord: updatedRecord });\n    } catch (error) {\n      logger.error('更新维护记录错误:', error);\n      return this.error(res, '更新维护记录失败', 500);\n    }\n  }\n\n  /**\n   * 删除维护记录\n   */\n  async deleteMaintenanceRecord(req, res) {\n    try {\n      const maintenanceRecord = await MaintenanceRecord.findById(req.params.id);\n      if (!maintenanceRecord) {\n        return this.error(res, '维护记录不存在', 404);\n      }\n\n      await maintenanceRecord.delete();\n\n      return this.success(res, '维护记录删除成功');\n    } catch (error) {\n      logger.error('删除维护记录错误:', error);\n      return this.error(res, '删除维护记录失败', 500);\n    }\n  }\n\n  /**\n   * 获取维护统计数据\n   */\n  async getMaintenanceStats(req, res) {\n    try {\n      const { startDate, endDate, deviceId, maintenanceType } = req.query;\n\n      const filters = {};\n      if (deviceId) {filters.deviceId = deviceId;}\n      if (maintenanceType) {filters.maintenanceType = maintenanceType;}\n      if (startDate || endDate) {\n        filters.scheduledDate = {};\n        if (startDate) {filters.scheduledDate.$gte = new Date(startDate);}\n        if (endDate) {filters.scheduledDate.$lte = new Date(endDate);}\n      }\n\n      const stats = await MaintenanceRecord.getStatistics(filters);\n\n      return this.success(res, '获取维护统计成功', { stats });\n    } catch (error) {\n      logger.error('获取维护统计错误:', error);\n      return this.error(res, '获取维护统计失败', 500);\n    }\n  }\n\n  /**\n   * 获取维护计划\n   */\n  async getMaintenanceSchedule(req, res) {\n    try {\n      const { startDate, endDate, deviceId, status = 'scheduled' } = req.query;\n\n      const filters = { status };\n      if (deviceId) {filters.deviceId = deviceId;}\n      if (startDate || endDate) {\n        filters.scheduledDate = {};\n        if (startDate) {filters.scheduledDate.$gte = new Date(startDate);}\n        if (endDate) {filters.scheduledDate.$lte = new Date(endDate);}\n      }\n\n      const schedule = await MaintenanceRecord.findScheduled(filters);\n\n      return this.success(res, '获取维护计划成功', { schedule });\n    } catch (error) {\n      logger.error('获取维护计划错误:', error);\n      return this.error(res, '获取维护计划失败', 500);\n    }\n  }\n\n  /**\n   * 完成维护任务\n   */\n  async completeMaintenance(req, res) {\n    try {\n      const maintenanceRecord = await MaintenanceRecord.findById(req.params.id);\n      if (!maintenanceRecord) {\n        return this.error(res, '维护记录不存在', 404);\n      }\n\n      if (maintenanceRecord.status === 'completed') {\n        return this.error(res, '维护任务已完成', 400);\n      }\n\n      const completionData = {\n        status: 'completed',\n        completedDate: new Date(),\n        completedBy: req.user.userId,\n        notes: req.body.notes || '',\n        actualCost: req.body.actualCost,\n        actualDuration: req.body.actualDuration,\n        updatedAt: new Date()\n      };\n\n      const completedRecord = await maintenanceRecord.update(completionData);\n\n      return this.success(res, '维护任务完成', { maintenanceRecord: completedRecord });\n    } catch (error) {\n      logger.error('完成维护任务错误:', error);\n      return this.error(res, '完成维护任务失败', 500);\n    }\n  }\n\n  /**\n   * 获取设备维护历史\n   */\n  async getDeviceMaintenanceHistory(req, res) {\n    try {\n      const { deviceId } = req.params;\n      const { page = 1, limit = 20, maintenanceType, status } = req.query;\n\n      const filters = { deviceId };\n      if (maintenanceType) {filters.maintenanceType = maintenanceType;}\n      if (status) {filters.status = status;}\n\n      const offset = (page - 1) * limit;\n      const history = await MaintenanceRecord.findWithPagination(filters, offset, parseInt(limit));\n      const total = await MaintenanceRecord.countDocuments(filters);\n\n      return this.success(res, '获取设备维护历史成功', {\n        data: history,\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      });\n    } catch (error) {\n      logger.error('获取设备维护历史错误:', error);\n      return this.error(res, '获取设备维护历史失败', 500);\n    }\n  }\n\n  /**\n   * 导出维护记录\n   */\n  async exportMaintenanceRecords(req, res) {\n    try {\n      const { startDate, endDate, deviceId, maintenanceType, status } = req.query;\n\n      const filters = {};\n      if (deviceId) {filters.deviceId = deviceId;}\n      if (maintenanceType) {filters.maintenanceType = maintenanceType;}\n      if (status) {filters.status = status;}\n      if (startDate || endDate) {\n        filters.scheduledDate = {};\n        if (startDate) {filters.scheduledDate.$gte = new Date(startDate);}\n        if (endDate) {filters.scheduledDate.$lte = new Date(endDate);}\n      }\n\n      const csvData = await MaintenanceRecord.exportToCSV(filters);\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=maintenance-records.csv');\n      res.send(csvData);\n    } catch (error) {\n      logger.error('导出维护记录错误:', error);\n      return this.error(res, '导出维护记录失败', 500);\n    }\n  }\n}\n\nexport default new MaintenanceController();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/deviceController.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":29,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":29,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":52,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":52,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":61,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":61,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":63,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":63,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":79,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":79,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":139,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":139,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":163,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":163,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 501.","line":167,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":167,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":173,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":173,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 501.","line":177,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":177,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":181,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":181,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'existingDevice' is not defined.","line":183,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":183,"endColumn":29},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":200,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":200,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":206,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":206,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":372,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":372,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 501.","line":376,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":376,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":386,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":386,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 501.","line":390,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":390,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":394,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":394,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'device' is not defined.","line":396,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":396,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":418,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":418,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":422,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":422,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":427,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":427,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":450,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":450,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":463,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":463,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":465,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":465,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":482,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":482,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":484,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":484,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":508,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":508,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":517,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":517,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":536,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":536,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":544,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":544,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Device from '../../core/entities/Device.js';\nimport StorageDevice from '../../core/entities/storageDevice.js';\nimport { validationResult } from 'express-validator';\nimport db, { dbPromise } from '../../infrastructure/database/index.js';\n\n/**\n * 获取设备列表，支持通过查询参数进行过滤\n * @param {object} req - Express 请求对象\n * @param {object} res - Express 响应对象\n * @param {function} next - Express next 中间件函数\n */\nexport const getDevices = async (req, res, next) => {\n  try {\n    const db = await dbPromise;\n    // 基础查询语句\n    let sql = 'SELECT * FROM devices';\n    const params = [];\n    const conditions = [];\n\n    // (可选) 这里可以根据 req.query 添加过滤条件\n    // 例如: if (req.query.status) { ... }\n\n    if (conditions.length > 0) {\n      sql += ` WHERE ${conditions.join(' AND ')}`;\n    }\n\n    const devices = await db.raw(sql, params);\n\n    res.status(200).json({\n      message: '设备列表获取成功',\n      data: devices\n    });\n  } catch (error) {\n    // --- 这是关键的修复 ---\n    // 我们不再直接响应，而是调用 next(error)\n    // 将错误传递给在 index.js 中注册的全局错误处理器进行记录。\n    next(error);\n  }\n};\n\n/**\n * 根据ID获取设备\n * @param {Object} req - 请求对象\n * @param {Object} res - 响应对象\n */\nexport const getDeviceById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const device = await Device.findById(id);\n\n    if (!device) {\n      return res.status(404).json({ message: '设备不存在' });\n    }\n\n    // 如果是储能设备，获取对应的储能参数\n    if (device.type === 'energy_storage') {\n      const storageParams = await StorageDevice.findByDeviceId(device.id);\n      device.storage_params = storageParams;\n    }\n\n    res.status(200).json(device);\n  } catch (error) {\n    res.status(500).json({\n      message: '获取设备详情失败',\n      error: error.message\n    });\n  }\n};\n\n/**\n * 创建新设备\n * @param {Object} req - 请求对象\n * @param {Object} res - 响应对象\n */\nexport const createDevice = async (req, res, next) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    // 提取并清洗设备基本信息\n    const {\n      name,\n      type,\n      location,\n      status,\n      manufacturer,\n      model,\n      serial_number,\n      installation_date,\n      last_maintenance_date,\n      notes,\n      energy_storage_params,\n      solar_panel_params,\n      ev_charger_params\n    } = req.body;\n\n    const deviceData = {\n      name: String(name).trim(),\n      type: String(type).trim(),\n      location: String(location).trim(),\n      status: String(status).trim(),\n      manufacturer: String(manufacturer).trim(),\n      model: String(model).trim(),\n      serial_number: String(serial_number).trim(),\n      installation_date: installation_date ? new Date(installation_date).toISOString() : null,\n      last_maintenance_date: last_maintenance_date\n        ? new Date(last_maintenance_date).toISOString()\n        : null,\n      notes: notes ? String(notes).trim() : null\n    };\n\n    const device = await Device.create(deviceData);\n\n    // 根据设备类型处理不同的参数\n    if (device.type === 'energy_storage' && energy_storage_params) {\n      // 验证储能设备参数\n      const {\n        capacity,\n        efficiency,\n        min_soc,\n        max_soc,\n        charge_rate,\n        discharge_rate,\n        battery_type,\n        cycle_life\n      } = energy_storage_params;\n      if (\n        !capacity ||\n        !efficiency ||\n        !min_soc ||\n        !max_soc ||\n        !charge_rate ||\n        !discharge_rate ||\n        !battery_type ||\n        !cycle_life\n      ) {\n        return res.status(400).json({ message: '储能设备参数不完整' });\n      }\n      const storageParams = {\n        device_id: device.id,\n        capacity: Number(capacity),\n        efficiency: Number(efficiency),\n        min_soc: Number(min_soc),\n        max_soc: Number(max_soc),\n        charge_rate: Number(charge_rate),\n        discharge_rate: Number(discharge_rate),\n        battery_type: String(battery_type).trim(),\n        cycle_life: Number(cycle_life)\n      };\n      await StorageDevice.create(storageParams);\n    } else if (device.type === 'solar_panel' && solar_panel_params) {\n      // 验证太阳能板参数\n      const {\n        peak_power,\n        efficiency,\n        orientation,\n        tilt_angle,\n        installation_date: spInstallationDate\n      } = solar_panel_params;\n      if (!peak_power || !efficiency || !orientation || !tilt_angle || !spInstallationDate) {\n        return res.status(400).json({ message: '太阳能板参数不完整' });\n      }\n      // 假设有一个 SolarPanel 模型\n      // await SolarPanel.create({ device_id: device.id, ...solar_panel_params });\n      res.status(501).json({ message: '太阳能板参数配置功能待实现' });\n      return;\n    } else if (device.type === 'ev_charger' && ev_charger_params) {\n      // 验证电动汽车充电桩参数\n      const { max_power, connector_type, num_ports, charging_standards } = ev_charger_params;\n      if (!max_power || !connector_type || !num_ports || !charging_standards) {\n        return res.status(400).json({ message: '电动汽车充电桩参数不完整' });\n      }\n      // 假设有一个 EvCharger 模型\n      // await EvCharger.create({ device_id: device.id, ...ev_charger_params });\n      res.status(501).json({ message: '电动汽车充电桩参数配置功能待实现' });\n      return;\n    }\n\n    res.status(200).json({\n      message: '设备更新成功',\n      device: existingDevice\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * 更新设备信息\n * @param {Object} req - 请求对象\n * @param {Object} res - 响应对象\n */\nexport const updateDevice = async (req, res, next) => {\n  try {\n    const { id } = req.params;\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    // 检查设备是否存在\n    const existingDevice = await Device.findById(id);\n    if (!existingDevice) {\n      return res.status(404).json({ message: '设备不存在' });\n    }\n\n    // 提取并清洗设备基本信息\n    const {\n      name,\n      type,\n      location,\n      status,\n      manufacturer,\n      model,\n      serial_number,\n      installation_date,\n      last_maintenance_date,\n      notes,\n      energy_storage_params,\n      solar_panel_params,\n      ev_charger_params\n    } = req.body;\n\n    const updates = {};\n    if (name !== undefined) {\n      updates.name = String(name).trim();\n    }\n    // 如果设备类型发生变化，需要特别处理，可能需要删除旧的参数记录并创建新的\n    if (type !== undefined && type !== existingDevice.type) {\n      updates.type = String(type).trim();\n      // 这里可以添加逻辑来删除旧的特定类型参数记录\n      // 例如：if (existingDevice.type === 'energy_storage') { await StorageDevice.deleteByDeviceId(id); }\n    } else if (type !== undefined) {\n      updates.type = String(type).trim();\n    }\n    if (location !== undefined) {\n      updates.location = String(location).trim();\n    }\n    if (status !== undefined) {\n      updates.status = String(status).trim();\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (manufacturer !== undefined) {\n      updates.manufacturer = String(manufacturer).trim();\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (model !== undefined) {\n      updates.model = String(model).trim();\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (serial_number !== undefined) {\n      updates.serial_number = String(serial_number).trim();\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (installation_date !== undefined) {\n      updates.installation_date = installation_date\n        ? new Date(installation_date).toISOString()\n        : null;\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (last_maintenance_date !== undefined) {\n      updates.last_maintenance_date = last_maintenance_date\n        ? new Date(last_maintenance_date).toISOString()\n        : null;\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (notes !== undefined) {\n      updates.notes = notes ? String(notes).trim() : null;\n    }\n\n    const _updatedDevice = await Device.update(id, updates);\n\n    // 根据设备类型处理不同的参数更新\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (existingDevice.type === 'energy_storage' && energy_storage_params) {\n      const storageUpdates = {};\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (energy_storage_params.capacity !== undefined) {\n        storageUpdates.capacity = Number(energy_storage_params.capacity);\n      }\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (energy_storage_params.efficiency !== undefined) {\n        storageUpdates.efficiency = Number(energy_storage_params.efficiency);\n      }\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (energy_storage_params.min_soc !== undefined) {\n        storageUpdates.min_soc = Number(energy_storage_params.min_soc);\n      }\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (energy_storage_params.max_soc !== undefined) {\n        storageUpdates.max_soc = Number(energy_storage_params.max_soc);\n      }\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (energy_storage_params.charge_rate !== undefined) {\n        storageUpdates.charge_rate = Number(energy_storage_params.charge_rate);\n      }\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (energy_storage_params.discharge_rate !== undefined) {\n        storageUpdates.discharge_rate = Number(energy_storage_params.discharge_rate);\n      }\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (energy_storage_params.battery_type !== undefined) {\n        storageUpdates.battery_type = String(energy_storage_params.battery_type).trim();\n      }\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (energy_storage_params.cycle_life !== undefined) {\n        storageUpdates.cycle_life = Number(energy_storage_params.cycle_life);\n      }\n\n      await StorageDevice.updateByDeviceId(id, storageUpdates);\n    } else if (existingDevice.type === 'solar_panel' && solar_panel_params) {\n      // 验证太阳能板参数\n      const {\n        peak_power,\n        efficiency,\n        orientation,\n        tilt_angle,\n        installation_date: spInstallationDate\n      } = solar_panel_params;\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (!peak_power || !efficiency || !orientation || !tilt_angle || !spInstallationDate) {\n        return res.status(400).json({ message: '太阳能板参数不完整' });\n      }\n      // 假设有一个 SolarPanel 模型\n      // await SolarPanel.updateByDeviceId(id, solar_panel_params);\n      res.status(501).json({ message: '太阳能板参数配置功能待实现' });\n      return;\n    } else if (existingDevice.type === 'ev_charger' && ev_charger_params) {\n      // 验证电动汽车充电桩参数\n      const { max_power, connector_type, num_ports, charging_standards } = ev_charger_params;\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      // TODO: 考虑使用早期返回或策略模式来减少嵌套\n      if (!max_power || !connector_type || !num_ports || !charging_standards) {\n        return res.status(400).json({ message: '电动汽车充电桩参数不完整' });\n      }\n      // 假设有一个 EvCharger 模型\n      // await EvCharger.updateByDeviceId(id, ev_charger_params);\n      res.status(501).json({ message: '电动汽车充电桩参数配置功能待实现' });\n      return;\n    }\n\n    res.status(201).json({\n      message: '设备创建成功',\n      device\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\n/**\n * 更新设备状态\n * @param {Object} req - 请求对象\n * @param {Object} res - 响应对象\n */\nexport const updateDeviceStatus = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.body;\n\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (!status) {\n      return res.status(400).json({ message: '状态参数不能为空' });\n    }\n\n    const updatedDevice = await Device.updateStatus(id, status);\n    res.status(200).json({\n      message: '设备状态更新成功',\n      device: updatedDevice\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: '更新设备状态失败',\n      error: error.message\n    });\n  }\n};\n\n/**\n * 删除设备\n * @param {Object} req - 请求对象\n * @param {Object} res - 响应对象\n */\nexport const deleteDevice = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // 检查设备是否存在\n    const existingDevice = await Device.findById(id);\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (!existingDevice) {\n      return res.status(404).json({ message: '设备不存在' });\n    }\n\n    // 如果是储能设备，同时删除对应的储能参数记录\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (existingDevice.type === 'energy_storage') {\n      await StorageDevice.deleteByDeviceId(id);\n    }\n\n    await Device.delete(id);\n    res.status(200).json({ message: '设备删除成功' });\n  } catch (error) {\n    res.status(500).json({\n      message: '删除设备失败',\n      error: error.message\n    });\n  }\n};\n\n/**\n * 获取储能设备列表\n * @param {Object} req - 请求对象\n * @param {Object} res - 响应对象\n */\nexport const getEnergyStorageDevices = async (req, res) => {\n  try {\n    const devices = await Device.findAll({\n      type: 'energy_storage'\n    });\n    res.status(200).json(devices);\n  } catch (error) {\n    res.status(500).json({\n      message: '获取储能设备列表失败',\n      error: error.message\n    });\n  }\n};\n\n/**\n * 更新储能设备参数\n * @param {Object} req - 请求对象\n * @param {Object} res - 响应对象\n */\nexport const updateStorageDeviceParams = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { capacity, efficiency, min_soc, max_soc } = req.body;\n\n    // 检查设备是否存在\n    const existingDevice = await Device.findById(id);\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (!existingDevice) {\n      return res.status(404).json({ message: '设备不存在' });\n    }\n\n    // 检查设备类型是否为储能设备\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (existingDevice.type !== 'energy_storage') {\n      return res.status(400).json({ message: '该设备不是储能设备' });\n    }\n\n    // 更新储能设备特定参数\n    const storageParams = {\n      capacity,\n      efficiency,\n      min_soc,\n      max_soc,\n      updated_at: new Date().toISOString()\n    };\n\n    // 这里假设数据库中有一个storage_devices表存储储能设备参数\n    await db('storage_devices').where({ device_id: id }).update(storageParams);\n\n    // 返回更新后的完整设备信息\n    const updatedDevice = await Device.findById(id);\n    const deviceParams = await db('storage_devices').where({ device_id: id }).first();\n\n    res.status(200).json({\n      message: '储能设备参数更新成功',\n      device: {\n        ...updatedDevice,\n        params: deviceParams\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: '更新储能设备参数失败',\n      error: error.message\n    });\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/index.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 16.","line":4,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":4,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3876,3916],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3921,4002],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4007,4084],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4089,4172],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4177,4289],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":153,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":153,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4294,4336],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 16.","line":201,"column":63,"nodeType":"Literal","messageId":"noMagic","endLine":201,"endColumn":65},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":201,"column":77,"nodeType":"Literal","messageId":"noMagic","endLine":201,"endColumn":78},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":396,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":396,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":430,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":430,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":474,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":474,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":488,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":488,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":571,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":571,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14015,14067],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":576,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":576,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14170,14219],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":580,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":580,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14359,14419],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":586,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":586,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14530,14573],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":590,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":590,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14615,14665],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import crypto from 'crypto';\n// 安全随机数生成函数\nfunction _generateSecureRandom() {\n  return crypto.randomBytes(16).toString('hex');\n}\n\nimport express from 'express';\nimport http from 'http';\nimport https from 'https';\nimport WebSocket from 'ws';\nimport helmet from 'helmet';\nimport rateLimit from 'express-rate-limit';\nimport cors from 'cors';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { createRequire } from 'module';\nimport { body as _body } from 'express-validator';\n// import session from 'express-session';\n// import connectRedis from 'connect-redis';\n// import csurf from 'csurf';\n\n// 导入配置管理\nimport config, { isDevelopment } from '../../shared/config/index.js';\n\n// 导入错误处理\n// import { setupProcessHandlers } from '../../shared/utils/processHandlers.js';\n\n// 导入统一错误处理和验证中间件\nimport {\n  errorHandler as unifiedErrorHandler,\n  asyncHandler as _asyncHandler,\n  notFoundHandler as unifiedNotFoundHandler\n} from '../../shared/middleware/errorHandler.js';\nimport {\n  sanitizeInput\n} from '../../shared/middleware/validation.js';\nimport { CacheManager } from '../../shared/cache/CacheManager.js';\n\n// 导入安全和性能监控中间件\nimport {\n  securityHeaders,\n  inputSizeLimit,\n  requestId\n} from '../../shared/middleware/security.js';\nimport {\n  performanceMiddleware,\n  healthCheckEndpoint,\n  metricsApiEndpoint\n} from '../../shared/middleware/performance.js';\n\n// 导入日志模块\nimport logger, { requestLogger, auditLogger } from '../../shared/utils/logger.js';\n\n// 导入JWT认证\nimport { authenticateToken } from '../../core/services/jwtManager.js';\n\n// 导入Redis客户端\n// import redisClient from '../../database/redisClient.js';\n\nconst require = createRequire(import.meta.url);\nconst mqtt = require('mqtt');\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// 导入数据库\nimport dbPromise from '../../infrastructure/database/index.js';\n\n// 导入碳排放计算模块\nimport { calculateTotalEmissions } from '../../core/services/emission.js';\n\n// 导入数据采集器\nimport DataCollector from '../../core/services/DataCollector.js';\n\n// 导入API路由\nimport apiRoutes from './routes.js';\n\n// 创建Express应用\nconst app = express();\n\n// 根据配置创建HTTP或HTTPS服务器\nlet server;\nif (config.security?.https?.enabled) {\n  try {\n    const privateKey = fs.readFileSync(config.security.https.keyPath, 'utf8');\n    const certificate = fs.readFileSync(config.security.https.certPath, 'utf8');\n    const credentials = { key: privateKey, cert: certificate };\n    server = https.createServer(credentials, app);\n    logger.info('HTTPS服务器已启用');\n  } catch (error) {\n    logger.error('HTTPS配置错误，将回退到HTTP', { error: error.message });\n    server = http.createServer(app);\n  }\n} else {\n  server = http.createServer(app);\n}\n\n// 设置进程异常处理\n// setupProcessHandlers();\n\n// 初始化数据采集器（但不立即启动）\nconst dataCollector = new DataCollector({\n  brokerUrl: config.mqtt?.brokerUrl || 'mqtt://localhost:1883',\n  username: config.mqtt?.username || '',\n  password: config.mqtt?.password || ''\n});\n\n// 初始化缓存管理器\nconst _cacheManager = new CacheManager({\n  type: 'memory', // 使用内存缓存，避免Redis依赖问题\n  defaultTTL: 300, // 5分钟默认过期时间\n  maxSize: 1000 // 最大缓存条目数\n});\n\n// 等待数据库初始化完成后再启动数据采集器\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 30 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 30 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 30 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 30 行)\n\nserver.listen(config.app.port, config.app.host, () => {\n  const protocol = config.security?.https?.enabled ? 'https' : 'http';\n  logger.info(\n    `服务器已启动，监听 ${protocol}://${config.app.host}:${config.app.port}，等待数据库连接...`,\n    {\n      port: config.app.port,\n      host: config.app.host,\n      protocol,\n      environment: config.app.env,\n      nodeVersion: process.version,\n      pid: process.pid\n    }\n  );\n  auditLogger.info('服务器启动', {\n    action: 'SERVER_START',\n    target: 'Server',\n    details: `服务器已在 ${protocol}://${config.app.host}:${config.app.port} 启动`\n  });\n\n  if (isDevelopment()) {\n    console.log('\\n🚀 零碳园区数字孪生能碳管理系统启动成功!');\n    console.log(`📊 API服务: ${protocol}://${config.app.host}:${config.app.port}/api`);\n    console.log(`💬 WebSocket服务: ws://${config.app.host}:${config.app.port}/ws`);\n    console.log(`💚 健康检查: ${protocol}://${config.app.host}:${config.app.port}/health`);\n    console.log(\n      `📈 性能监控: ${protocol}://${config.app.host}:${config.app.port}/api/performance/metrics`\n    );\n    console.log(`🔧 环境: ${config.app.env}\\n`);\n  }\n});\n\ndbPromise\n  .then(() => {\n    logger.info('数据库连接成功，启动数据采集器');\n    return dataCollector.initialize();\n  })\n  .catch((error) => {\n    logger.error('数据库连接失败', { error: error.message });\n    process.exit(1);\n  });\n\n// 监听进程退出事件，记录审计日志\nprocess.on('exit', (code) => {\n  auditLogger.info('服务器关闭', {\n    action: 'SERVER_SHUTDOWN',\n    target: 'Server',\n    details: `服务器已关闭，退出码: ${code}`\n  });\n});\n\nprocess.on('SIGINT', () => {\n  logger.info('接收到 SIGINT 信号，正在关闭服务器...');\n  server.close(() => {\n    logger.info('服务器已优雅关闭');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGTERM', () => {\n  logger.info('接收到 SIGTERM 信号，正在关闭服务器...');\n  server.close(() => {\n    logger.info('服务器已优雅关闭');\n    process.exit(0);\n  });\n});\n\n// 角色定义\nconst _roles = {\n  ADMIN: 'admin',\n  ENERGY_MANAGER: 'energy_manager',\n  VIEWER: 'viewer'\n};\n\n// 实时数据采集配置\nconst mqttClient = mqtt.connect(config.mqtt.brokerUrl, {\n  clientId: `${config.mqtt.clientId}-${Math.random().toString(16).substr(2, 8)}`,\n  username: config.mqtt.username,\n  password: config.mqtt.password,\n  clean: true,\n  keepalive: config.mqtt.keepalive,\n  connectTimeout: config.mqtt.connectTimeout,\n  reconnectPeriod: config.mqtt.reconnectPeriod\n});\n\n// 连接成功回调\nmqttClient.on('connect', () => {\n  logger.info('已连接到MQTT Broker', { brokerUrl: config.mqtt.brokerUrl });\n\n  // 订阅能源数据主题\n  mqttClient.subscribe(config.mqtt.topics.energyData, (err) => {\n    if (err) {\n      logger.error('MQTT能源数据主题订阅失败', {\n        error: err.message,\n        topic: config.mqtt.topics.energyData\n      });\n    } else {\n      logger.info('已订阅MQTT主题', { topic: config.mqtt.topics.energyData });\n    }\n  });\n});\n\n// MQTT错误处理\nmqttClient.on('error', (error) => {\n  logger.error('MQTT连接错误', { error: error.message });\n});\n\n// MQTT消息处理现在由DataCollector处理\n\n// 信任代理（如果在反向代理后面）\napp.set('trust proxy', 1);\n\n// 请求ID中间件（用于请求追踪）\napp.use(requestId());\n\n// 安全头中间件\napp.use(securityHeaders());\n\n// 输入大小限制中间件\napp.use(inputSizeLimit());\n\n// 请求日志中间件\napp.use(requestLogger());\n\n// 性能监控中间件\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 39 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 39 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 39 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 39 行)\n\napp.use(performanceMiddleware);\n\n// 安全中间件\nif (config.security.helmet.enabled) {\n  app.use(\n    helmet({\n      contentSecurityPolicy: {\n        directives: {\n          defaultSrc: [\"'self'\"],\n          scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n          styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n          imgSrc: [\"'self'\", 'data:', 'https:'],\n          fontSrc: [\"'self'\", 'https://fonts.gstatic.com'],\n          connectSrc: [\n            \"'self'\",\n            'https://*.tiles.mapbox.com',\n            'ws://localhost:*',\n            'wss://localhost:*'\n          ],\n          frameSrc: [\"'self'\"],\n          objectSrc: [\"'none'\"],\n          mediaSrc: [\"'self'\"]\n        }\n      },\n      crossOriginResourcePolicy: { policy: 'cross-origin' },\n      crossOriginOpenerPolicy: { policy: 'same-origin' },\n      crossOriginEmbedderPolicy: { policy: 'require-corp' },\n      originAgentCluster: true,\n\n      dnsPrefetchControl: { allow: true },\n      expectCt: { enforce: true, maxAge: 86400 },\n      frameguard: { action: 'deny' },\n      hidePoweredBy: true,\n      hsts: { maxAge: 31536000, includeSubDomains: true, preload: true },\n      ieNoOpen: true,\n      noSniff: true,\n      permittedCrossDomainPolicies: { permittedPolicies: 'none' },\n      referrerPolicy: { policy: 'no-referrer' },\n      xssFilter: true\n    })\n  );\n}\n\n// CORS配置\nif (config.security.cors.enabled) {\n  app.use(\n    cors({\n      origin:\n        config.security.cors.origin === '*'\n          ? '*'\n          : config.security.cors.origin.split(',').map((s) => s.trim()),\n      methods: config.security.cors.methods.split(',').map((s) => s.trim()),\n      allowedHeaders: config.security.cors.allowedHeaders.split(',').map((s) => s.trim()),\n      exposedHeaders: config.security.cors.exposedHeaders\n        ? config.security.cors.exposedHeaders.split(',').map((s) => s.trim())\n        : [],\n      credentials: config.security.cors.credentials,\n      maxAge: config.security.cors.maxAge\n    })\n  );\n}\n\n// 基础中间件\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// 会话管理 - 暂时禁用，使用JWT认证\n// const RedisStore = connectRedis(session);\n// app.use(\n//   session({\n//     store: new RedisStore({ client: redisClient }),\n//     secret: config.security.session.secret,\n//     resave: false,\n//     saveUninitialized: false,\n//     name: config.security.session.name,\n//     cookie: {\n//       secure: config.security.session.cookie.secure,\n//       httpOnly: config.security.session.cookie.httpOnly,\n//       maxAge: config.security.session.cookie.maxAge,\n//       sameSite: config.security.session.cookie.sameSite,\n//     },\n//   })\n// );\n\n// 通用输入验证和数据清洗中间件\napp.use((req, res, next) => {\n  // 对所有请求进行输入清洗\n  if (req.body) {\n    req.body = sanitizeInput(req.body);\n  }\n  if (req.query) {\n    req.query = sanitizeInput(req.query);\n  }\n  if (req.params) {\n    req.params = sanitizeInput(req.params);\n  }\n  next();\n});\n\n// CSRF保护 - 暂时禁用，需要安装csurf包\n// if (config.security.csrf.enabled) {\n//   app.use(csurf({ cookie: true }));\n//   app.use((req, res, next) => {\n//     res.cookie('XSRF-TOKEN', req.csrfToken());\n//     next();\n//   });\n// }\n\n// 配置速率限制\nif (config.security.rateLimit.enabled) {\n  const limiter = rateLimit({\n    windowMs: config.security.rateLimit.windowMs,\n    max: config.security.rateLimit.max,\n    message: config.security.rateLimit.message,\n    standardHeaders: true,\n    legacyHeaders: false,\n    skip: (req, _res) => req.method === 'OPTIONS'\n  });\n  // 应用速率限制\n  app.use(limiter);\n}\n\n// 导入缓存中间件\n// import { cacheMiddleware } from './middleware/cache.js';\n\n// 应用缓存中间件到API路由\n// app.use('/api', cacheMiddleware()); // 已禁用缓存中间件以解决Redis错误\n\n// 使用API路由\napp.use('/api', apiRoutes);\n\n// 启动碳排放计算模块相关路由\napp.get('/carbon/trend', authenticateToken(['admin', 'energy_manager']), async (req, res) => {\n  const { start_time, end_time, interval } = req.query;\n\n  // 参数验证\n  if (!start_time || !end_time) {\n    return res.status(400).json({\n      error: {\n        code: 'INVALID_PARAMETERS',\n        message: '缺少必要参数: start_time, end_time'\n      }\n    });\n  }\n\n  try {\n    // 计算碳排放趋势\n    const trendData = calculateTotalEmissions(start_time, end_time, interval);\n\n    logger.info('碳排放趋势计算成功', {\n      userId: req.user.id,\n      timeRange: { start_time, end_time },\n      interval\n    });\n\n    res.json({\n      data: {\n        trend: trendData,\n        unit: 'kgCO2',\n        time_range: {\n          start: start_time,\n          end: end_time\n        }\n      }\n    });\n  } catch (error) {\n    logger.error('碳排放趋势计算失败', {\n      error: error.message,\n      userId: req.user?.id,\n      timeRange: { start_time, end_time }\n    });\n    res.status(500).json({\n      error: {\n        code: 'CALCULATION_FAILED',\n        message: '碳排放趋势计算失败',\n        details: error.message\n      }\n    });\n  }\n});\n\n// JWT验证中间件已移至API路由模块\n\n// 基础路由\napp.get('/', (req, res) => {\n  res.json({\n    message: '零碳园区数字孪生能碳管理系统 API v1',\n    version: config.app?.version || '1.0.0',\n    environment: config.app?.env || 'development',\n    status: 'running',\n    data_collector: dataCollector.getConnectionStatus(),\n    timestamp: new Date().toISOString()\n  });\n});\n\n// 读取测试数据\nfunction readTestData(filename) {\n  try {\n    const dataPath = path.join(__dirname, '..', 'test-data', filename);\n    if (fs.existsSync(dataPath)) {\n      return fs.readFileSync(dataPath, 'utf-8');\n    }\n    return null;\n  } catch (error) {\n    logger.error('读取测试数据失败', { filename, error: error.message });\n    return null;\n  }\n}\n\n// 测试数据API\napp.get('/api/test-data/:type', (req, res) => {\n  const { type } = req.params;\n  const allowedTypes = ['energy', 'carbon', 'battery', 'performance'];\n\n  if (!allowedTypes.includes(type)) {\n    return res.status(400).json({\n      error: {\n        code: 'INVALID_TYPE',\n        message: '不支持的数据类型'\n      }\n    });\n  }\n\n  const data = readTestData(`${type}_data.csv`);\n  if (data) {\n    logger.info('测试数据访问', { type, ip: req.ip });\n    res.header('Content-Type', 'text/csv');\n    res.send(data);\n  } else {\n    res.status(500).json({\n      error: {\n        code: 'DATA_READ_ERROR',\n        message: `无法读取${type}数据`\n      }\n    });\n  }\n});\n\n// 系统健康检查接口 - 使用新的性能监控\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 33 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 33 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 33 行)\n\n// TODO: 考虑将此函数拆分为更小的函数 (当前 33 行)\n\napp.get('/health', healthCheckEndpoint);\n\n// 性能指标API端点\napp.get('/api/metrics', metricsApiEndpoint);\n\n// 详细健康检查接口（保留原有功能）\napp.get('/health/detailed', (_req, res) => {\n  const healthCheck = {\n    status: 'healthy',\n    components: {\n      database: {\n        status: 'healthy',\n        version: 'SQLite 3.45.0',\n        uptime: '99.9%'\n      },\n      storage: {\n        status: 'healthy',\n        availableSpace: '120GB',\n        usage: '35%'\n      },\n      network: {\n        status: 'healthy',\n        latency: '<5ms'\n      },\n      security: {\n        status: 'healthy',\n        tlsVersion: 'TLS 1.3',\n        certificateExpiry: '2025-12-31'\n      },\n      mqtt: {\n        status: mqttClient ? (mqttClient.connected ? 'connected' : 'disconnected') : 'unavailable',\n        broker: config.mqtt.brokerUrl\n      }\n    },\n    timestamp: new Date().toISOString()\n  };\n\n  res.json(healthCheck);\n});\n\n// 设备管理和能源数据路由已移至API路由模块\n\n// 碳排放计算功能已移至数据采集器和API路由模块\n\n// 储能优化、碳排放计算、能源预测和用户权限管理API已移至API路由模块\n\n// 性能监控模块已在文件开头导入和配置\n\n// 404错误处理\napp.use(unifiedNotFoundHandler);\n\n// 全局错误处理中间件\napp.use(unifiedErrorHandler);\n\n// 启动性能监控\n// 性能监控已通过中间件启用\n\n// 启动服务\nconst _PORT = config.app.port;\n\n// WebSocket server setup\nconst wss = new WebSocket.Server({ server });\n\nwss.on('connection', (ws) => {\n  console.log('New WebSocket connection established');\n\n  ws.on('message', (message) => {\n    try {\n      const data = JSON.parse(message.toString());\n      console.log('Received WebSocket message:', data);\n      // Handle incoming message\n      ws.send(JSON.stringify({ status: 'received', timestamp: new Date() }));\n    } catch (error) {\n      console.error('Error processing WebSocket message:', error);\n      ws.send(JSON.stringify({ error: 'Invalid message format' }));\n    }\n  });\n\n  ws.on('close', () => {\n    console.log('WebSocket connection closed');\n  });\n\n  ws.on('error', (error) => {\n    console.error('WebSocket error occurred:', error);\n  });\n});\n\n// 优雅关闭处理\nprocess.on('SIGTERM', () => {\n  logger.info('收到SIGTERM信号，开始优雅关闭');\n  gracefulShutdown();\n});\n\nprocess.on('SIGINT', () => {\n  logger.info('收到SIGINT信号，开始优雅关闭');\n  gracefulShutdown();\n});\n\nfunction gracefulShutdown() {\n  server.close(() => {\n    logger.info('HTTP服务器已关闭');\n\n    // 关闭MQTT连接\n    if (mqttClient.connected) {\n      mqttClient.end(() => {\n        logger.info('MQTT连接已关闭');\n      });\n    }\n\n    // 关闭数据库连接\n    dbPromise.then((db) => {\n      db.close((err) => {\n        if (err) {\n          logger.error('数据库关闭失败', { error: err.message });\n        } else {\n          logger.info('数据库连接已关闭');\n        }\n        process.exit(0);\n      });\n    }).catch(() => {\n      process.exit(0);\n    });\n  });\n}\n\n// 导出app实例\nexport default app;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/middleware/authMiddleware.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":80,"column":5,"nodeType":"Literal","messageId":"noMagic","endLine":80,"endColumn":7},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":80,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":80,"endColumn":12},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":80,"column":15,"nodeType":"Literal","messageId":"noMagic","endLine":80,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":80,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":80,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":102,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":102,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3414,3544],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3582,3612],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4837,4980],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":225,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":225,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5049,5088],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":283,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":283,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6396,6510],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":289,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":289,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6548,6580],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":312,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":312,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7068,7199],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":323,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":323,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7301,7331],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":334,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":334,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 30.","line":338,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":338,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":338,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":338,"endColumn":31},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":353,"column":38,"nodeType":"Literal","messageId":"noMagic","endLine":353,"endColumn":41},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 15.","line":353,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":353,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":353,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":353,"endColumn":61},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":353,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":353,"endColumn":68}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 认证中间件\n * 用于验证JWT令牌和用户身份\n */\n\nconst jwt = require('jsonwebtoken');\nconst responseFormatter = require('./responseFormatter');\n\n// JWT配置\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '24h';\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';\nconst JWT_REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || '7d';\n\n// 令牌黑名单（在生产环境中应使用Redis等外部存储）\nconst tokenBlacklist = new Set();\n\n/**\n * 生成访问令牌\n * @param {Object} payload - 令牌载荷\n * @returns {string} JWT令牌\n */\nfunction generateAccessToken(payload) {\n  return jwt.sign(payload, JWT_SECRET, {\n    expiresIn: JWT_EXPIRES_IN,\n    issuer: 'carbon-management-system',\n    audience: 'carbon-management-client'\n  });\n}\n\n/**\n * 生成刷新令牌\n * @param {Object} payload - 令牌载荷\n * @returns {string} JWT刷新令牌\n */\nfunction generateRefreshToken(payload) {\n  return jwt.sign(payload, JWT_REFRESH_SECRET, {\n    expiresIn: JWT_REFRESH_EXPIRES_IN,\n    issuer: 'carbon-management-system',\n    audience: 'carbon-management-client'\n  });\n}\n\n/**\n * 验证访问令牌\n * @param {string} token - JWT令牌\n * @returns {Object} 解码后的载荷\n */\nfunction verifyAccessToken(token) {\n  return jwt.verify(token, JWT_SECRET, {\n    issuer: 'carbon-management-system',\n    audience: 'carbon-management-client'\n  });\n}\n\n/**\n * 验证刷新令牌\n * @param {string} token - JWT刷新令牌\n * @returns {Object} 解码后的载荷\n */\nfunction verifyRefreshToken(token) {\n  return jwt.verify(token, JWT_REFRESH_SECRET, {\n    issuer: 'carbon-management-system',\n    audience: 'carbon-management-client'\n  });\n}\n\n/**\n * 将令牌加入黑名单\n * @param {string} token - 要加入黑名单的令牌\n */\nfunction blacklistToken(token) {\n  tokenBlacklist.add(token);\n\n  // 定期清理过期的令牌（简单实现，生产环境应使用更高效的方法）\n  setTimeout(\n    () => {\n      tokenBlacklist.delete(token);\n    },\n    24 * 60 * 60 * 1000\n  ); // 24小时后清理\n}\n\n/**\n * 检查令牌是否在黑名单中\n * @param {string} token - 要检查的令牌\n * @returns {boolean} 是否在黑名单中\n */\nfunction isTokenBlacklisted(token) {\n  return tokenBlacklist.has(token);\n}\n\n/**\n * 从请求中提取令牌\n * @param {Object} req - Express请求对象\n * @returns {string|null} 提取的令牌\n */\nfunction extractToken(req) {\n  // 从Authorization头中提取\n  const authHeader = req.headers.authorization;\n  if (authHeader && authHeader.startsWith('Bearer ')) {\n    return authHeader.substring(7);\n  }\n\n  // 从查询参数中提取\n  if (req.query.token) {\n    return req.query.token;\n  }\n\n  // 从Cookie中提取\n  if (req.cookies && req.cookies.accessToken) {\n    return req.cookies.accessToken;\n  }\n\n  return null;\n}\n\n/**\n * 认证中间件\n * 验证用户身份并将用户信息附加到请求对象\n */\nfunction authenticate(req, res, next) {\n  try {\n    const token = extractToken(req);\n\n    if (!token) {\n      return responseFormatter.unauthorized(res, '缺少访问令牌');\n    }\n\n    // 检查令牌是否在黑名单中\n    if (isTokenBlacklisted(token)) {\n      return responseFormatter.unauthorized(res, '令牌已失效');\n    }\n\n    // 验证令牌\n    const decoded = verifyAccessToken(token);\n\n    // 检查令牌是否包含必要的用户信息\n    if (!decoded.userId || !decoded.username || !decoded.role) {\n      return responseFormatter.unauthorized(res, '令牌格式无效');\n    }\n\n    // 将用户信息附加到请求对象\n    req.user = {\n      userId: decoded.userId,\n      username: decoded.username,\n      email: decoded.email,\n      role: decoded.role,\n      permissions: decoded.permissions || [],\n      tokenId: decoded.jti, // JWT ID\n      issuedAt: decoded.iat,\n      expiresAt: decoded.exp\n    };\n\n    // 将原始令牌也附加到请求对象（用于注销等操作）\n    req.token = token;\n\n    // 记录认证日志\n    console.log(\n      `[${new Date().toISOString()}] Authentication: User ${decoded.username} (${decoded.role}) authenticated`\n    );\n\n    next();\n  } catch (error) {\n    console.error('认证错误:', error);\n\n    if (error.name === 'TokenExpiredError') {\n      return responseFormatter.unauthorized(res, '令牌已过期');\n    } else if (error.name === 'JsonWebTokenError') {\n      return responseFormatter.unauthorized(res, '令牌无效');\n    } else if (error.name === 'NotBeforeError') {\n      return responseFormatter.unauthorized(res, '令牌尚未生效');\n    } \n    return responseFormatter.internalError(res, '认证失败', error);\n    \n  }\n}\n\n/**\n * 可选认证中间件\n * 如果提供了令牌则验证，否则继续执行\n */\nfunction optionalAuthenticate(req, res, next) {\n  try {\n    const token = extractToken(req);\n\n    if (!token) {\n      // 没有令牌，继续执行但不设置用户信息\n      return next();\n    }\n\n    // 检查令牌是否在黑名单中\n    if (isTokenBlacklisted(token)) {\n      // 令牌在黑名单中，继续执行但不设置用户信息\n      return next();\n    }\n\n    // 验证令牌\n    const decoded = verifyAccessToken(token);\n\n    // 检查令牌是否包含必要的用户信息\n    if (decoded.userId && decoded.username && decoded.role) {\n      // 将用户信息附加到请求对象\n      req.user = {\n        userId: decoded.userId,\n        username: decoded.username,\n        email: decoded.email,\n        role: decoded.role,\n        permissions: decoded.permissions || [],\n        tokenId: decoded.jti,\n        issuedAt: decoded.iat,\n        expiresAt: decoded.exp\n      };\n\n      req.token = token;\n\n      console.log(\n        `[${new Date().toISOString()}] Optional Authentication: User ${decoded.username} (${decoded.role}) authenticated`\n      );\n    }\n\n    next();\n  } catch (error) {\n    // 可选认证失败时不返回错误，继续执行\n    console.warn('可选认证失败:', error.message);\n    next();\n  }\n}\n\n/**\n * 刷新令牌中间件\n * 验证刷新令牌并生成新的访问令牌\n */\nfunction refreshToken(req, res, next) {\n  try {\n    const refreshToken = req.body.refreshToken || req.cookies.refreshToken;\n\n    if (!refreshToken) {\n      return responseFormatter.unauthorized(res, '缺少刷新令牌');\n    }\n\n    // 验证刷新令牌\n    const decoded = verifyRefreshToken(refreshToken);\n\n    // 检查刷新令牌是否包含必要的用户信息\n    if (!decoded.userId || !decoded.username || !decoded.role) {\n      return responseFormatter.unauthorized(res, '刷新令牌格式无效');\n    }\n\n    // 生成新的访问令牌\n    const newAccessToken = generateAccessToken({\n      userId: decoded.userId,\n      username: decoded.username,\n      email: decoded.email,\n      role: decoded.role,\n      permissions: decoded.permissions\n    });\n\n    // 可选：生成新的刷新令牌（滚动刷新）\n    const newRefreshToken = generateRefreshToken({\n      userId: decoded.userId,\n      username: decoded.username,\n      email: decoded.email,\n      role: decoded.role\n    });\n\n    // 将新令牌附加到响应对象\n    res.locals.newTokens = {\n      accessToken: newAccessToken,\n      refreshToken: newRefreshToken,\n      expiresIn: JWT_EXPIRES_IN\n    };\n\n    // 将用户信息附加到请求对象\n    req.user = {\n      userId: decoded.userId,\n      username: decoded.username,\n      email: decoded.email,\n      role: decoded.role,\n      permissions: decoded.permissions || []\n    };\n\n    console.log(\n      `[${new Date().toISOString()}] Token Refresh: User ${decoded.username} tokens refreshed`\n    );\n\n    next();\n  } catch (error) {\n    console.error('令牌刷新错误:', error);\n\n    if (error.name === 'TokenExpiredError') {\n      return responseFormatter.unauthorized(res, '刷新令牌已过期');\n    } else if (error.name === 'JsonWebTokenError') {\n      return responseFormatter.unauthorized(res, '刷新令牌无效');\n    } \n    return responseFormatter.internalError(res, '令牌刷新失败', error);\n    \n  }\n}\n\n/**\n * 注销中间件\n * 将当前令牌加入黑名单\n */\nfunction logout(req, res, next) {\n  try {\n    const token = extractToken(req);\n\n    if (token) {\n      // 将令牌加入黑名单\n      blacklistToken(token);\n      console.log(\n        `[${new Date().toISOString()}] Logout: Token blacklisted for user ${req.user?.username || 'unknown'}`\n      );\n    }\n\n    // 清除用户信息\n    req.user = null;\n    req.token = null;\n\n    next();\n  } catch (error) {\n    console.error('注销错误:', error);\n    return responseFormatter.internalError(res, '注销失败', error);\n  }\n}\n\n/**\n * 检查令牌有效期中间件\n * 如果令牌即将过期，在响应头中添加提示\n */\nfunction checkTokenExpiry(req, res, next) {\n  if (req.user && req.user.expiresAt) {\n    const now = Math.floor(Date.now() / 1000);\n    const timeToExpiry = req.user.expiresAt - now;\n\n    // 如果令牌在30分钟内过期，添加警告头\n    if (timeToExpiry < 30 * 60) {\n      res.set('X-Token-Warning', 'Token expires soon');\n      res.set('X-Token-Expires-In', timeToExpiry.toString());\n    }\n  }\n\n  next();\n}\n\n/**\n * 速率限制中间件（基于用户）\n * @param {number} maxRequests - 最大请求数\n * @param {number} windowMs - 时间窗口（毫秒）\n * @returns {Function} Express中间件函数\n */\nfunction userRateLimit(maxRequests = 100, windowMs = 15 * 60 * 1000) {\n  const userRequests = new Map();\n\n  return (req, res, next) => {\n    const userId = req.user?.userId || req.ip;\n    const now = Date.now();\n\n    if (!userRequests.has(userId)) {\n      userRequests.set(userId, { count: 1, resetTime: now + windowMs });\n      return next();\n    }\n\n    const userRequest = userRequests.get(userId);\n\n    if (now > userRequest.resetTime) {\n      // 重置计数器\n      userRequest.count = 1;\n      userRequest.resetTime = now + windowMs;\n      return next();\n    }\n\n    if (userRequest.count >= maxRequests) {\n      return responseFormatter.tooManyRequests(res, '请求过于频繁，请稍后再试');\n    }\n\n    userRequest.count++;\n    next();\n  };\n}\n\nmodule.exports = {\n  authenticate,\n  optionalAuthenticate,\n  refreshToken,\n  logout,\n  checkTokenExpiry,\n  userRateLimit,\n  generateAccessToken,\n  generateRefreshToken,\n  verifyAccessToken,\n  verifyRefreshToken,\n  blacklistToken,\n  isTokenBlacklisted,\n  extractToken\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/middleware/cache.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":42},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1082,1113],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1374,1404],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import cache from '../../../shared/config/cache.js';\nimport redisClient from '../../../database/redisClient.js';\nconst { setAsync, expireAsync, DEFAULT_TTL } = cache;\n\n/**\n * 缓存中间件 - 用于缓存GET请求的响应结果\n * @param {number} ttl - 缓存过期时间(秒)\n */\nconst cacheMiddleware =\n  (ttl = DEFAULT_TTL) =>\n    async (req, res, next) => {\n    // 只缓存GET请求\n      if (req.method !== 'GET') {\n        return next();\n      }\n\n      // 生成唯一缓存键\n      const cacheKey = `api:${req.originalUrl}`;\n\n      try {\n      // 尝试从缓存获取数据\n        const cachedData = await redisClient.get(cacheKey);\n\n        if (cachedData) {\n        // 返回缓存数据\n          const data = JSON.parse(cachedData);\n          return res.json(data);\n        }\n\n        // 重写res.json方法\n        const originalJson = res.json;\n        res.json = function (body) {\n        // 缓存响应数据\n          setAsync(cacheKey, JSON.stringify(body))\n            .then(() => expireAsync(cacheKey, ttl))\n            .catch((err) => console.error('缓存设置失败:', err));\n\n          return originalJson.call(this, body);\n        };\n\n        next();\n      } catch (err) {\n        console.error('缓存中间件错误:', err);\n        next();\n      }\n    };\nexport { cacheMiddleware, clearCacheMiddleware };\n\n/**\n * 清除缓存的中间件\n * @param {string} pattern - 缓存键匹配模式\n */\nconst clearCacheMiddleware = () => async (req, res, next) => {\n  try {\n    // 实现缓存清除逻辑\n    next();\n  } catch (err) {\n    console.error('清除缓存失败:', err);\n    next();\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/middleware/cacheMiddleware.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 300.","line":18,"column":19,"nodeType":"Literal","messageId":"noMagic","endLine":18,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":112,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":112,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":117,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":117,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 300.","line":126,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":126,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":129,"column":61,"nodeType":"Literal","messageId":"noMagic","endLine":129,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import cacheService from '../../../core/services/cacheService.js';\nimport logger from '../../../shared/utils/logger.js';\n\n/**\n * API响应缓存中间件\n * 用于缓存API接口的响应结果，减少重复计算和数据库查询\n */\nclass CacheMiddleware {\n  /**\n   * 创建缓存中间件\n   * @param {Object} options - 缓存选项\n   * @param {number} options.ttl - 缓存过期时间（秒）\n   * @param {Function} [options.keyGenerator] - 自定义缓存键生成函数\n   * @param {Function} [options.shouldCache] - 判断是否缓存响应的函数\n   * @returns {Function} - Express中间件\n   */\n  static createCacheMiddleware(options = {}) {\n    const { ttl = 300, keyGenerator, shouldCache } = options;\n\n    return (req, res, next) => {\n      // 只缓存GET请求\n      if (req.method !== 'GET') {\n        return next();\n      }\n\n      // 生成缓存键\n      const cacheKey = keyGenerator ? keyGenerator(req) : CacheMiddleware.defaultKeyGenerator(req);\n\n      try {\n        // 尝试从缓存获取数据\n        const cachedData = cacheService.get(cacheKey);\n\n        if (cachedData) {\n          logger.debug(`缓存命中: ${cacheKey}`);\n          return res.json(cachedData);\n        }\n\n        // 重写res.json方法以缓存响应\n        const originalJson = res.json;\n        res.json = function (body) {\n          // 判断是否应该缓存\n          if (!shouldCache || shouldCache(req, res, body)) {\n            cacheService.set(cacheKey, body, ttl);\n            logger.debug(`缓存设置成功: ${cacheKey}, TTL: ${ttl}秒`);\n          }\n          return originalJson.call(this, body);\n        };\n\n        next();\n      } catch (error) {\n        logger.error(`缓存中间件错误: ${cacheKey}`, error);\n        next(); // 缓存出错时继续请求处理，不影响正常业务\n      }\n    };\n  }\n\n  /**\n   * 默认缓存键生成器\n   * @param {Object} req - Express请求对象\n   * @returns {string} - 缓存键\n   */\n  static defaultKeyGenerator(req) {\n    // 包含查询参数的完整URL作为缓存键\n    const queryString = new URLSearchParams(req.query).toString();\n    return `${req.originalUrl}${queryString ? `?${queryString}` : ''}`;\n  }\n\n  /**\n   * 创建缓存清除中间件\n   * 用于在数据更新时清除相关缓存\n   * @param {Function} keyPatternGenerator - 生成缓存键模式的函数\n   * @returns {Function} - Express中间件\n   */\n  static createCacheInvalidator(keyPatternGenerator) {\n    return async (req, res, next) => {\n      try {\n        // 先执行后续中间件\n        await new Promise((resolve, reject) => {\n          res.on('finish', resolve);\n          res.on('error', reject);\n          next();\n        });\n\n        // 生成缓存键模式并清除匹配的缓存\n        const keyPattern = keyPatternGenerator(req, res);\n        if (keyPattern) {\n          const stats = cacheService.getStats();\n          const keys = stats && stats.keys ? stats.keys : [];\n          const matchedKeys = keys.filter((key) => key.includes(keyPattern));\n\n          if (matchedKeys.length > 0) {\n            const count = cacheService.delMulti(matchedKeys);\n            logger.debug(`缓存清除成功: 模式=${keyPattern}, 数量=${count}`);\n          }\n        }\n      } catch (error) {\n        logger.error('缓存清除中间件错误', error);\n        // 缓存清除失败不影响主流程\n      }\n    };\n  }\n\n  /**\n   * 常用缓存场景的快捷方法\n   */\n\n  /**\n   * 设备数据缓存中间件\n   * @param {number} [ttl=60] - 缓存时间（秒）\n   * @returns {Function} - Express中间件\n   */\n  static deviceDataCache(ttl = 60) {\n    return CacheMiddleware.createCacheMiddleware({\n      ttl,\n      shouldCache: (req, _res, body) =>\n        // 只缓存成功响应\n        _res.statusCode === 200 && body && body.success !== false\n    });\n  }\n\n  /**\n   * 能源统计数据缓存中间件\n   * @param {number} [ttl=300] - 缓存时间（秒）\n   * @returns {Function} - Express中间件\n   */\n  static energyStatsCache(ttl = 300) {\n    return CacheMiddleware.createCacheMiddleware({\n      ttl,\n      shouldCache: (req, _res, body) => _res.statusCode === 200 && body && body.success !== false\n    });\n  }\n\n  /**\n   * 清除设备数据缓存的中间件\n   * @returns {Function} - Express中间件\n   */\n  static invalidateDeviceCache() {\n    return CacheMiddleware.createCacheInvalidator((req, _) => {\n      // 从请求参数中获取设备ID\n      const deviceId = req.params.id || req.body.deviceId;\n      return deviceId ? `device/${deviceId}` : null;\n    });\n  }\n\n  /**\n   * 清除能源统计缓存的中间件\n   * @returns {Function} - Express中间件\n   */\n  static invalidateEnergyStatsCache() {\n    return CacheMiddleware.createCacheInvalidator(() => 'energy/stats');\n  }\n}\n\nexport default CacheMiddleware;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/middleware/httpErrorHandler.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":29,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":29,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":38,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":38,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":47,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":47,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":56,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":56,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":65,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":65,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 502.","line":74,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":74,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":165,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":165,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":167,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":167,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":169,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":169,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":171,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":171,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":173,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":173,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":175,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":175,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 502.","line":177,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":177,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":179,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":179,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 504.","line":181,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":181,"endColumn":13},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4491,4521],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4526,4554],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4666,4706],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":218,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":218,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4711,4746],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":221,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":221,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4824,4852],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":228,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":228,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4946,4987],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 统一错误处理模块\n * 提供标准化的错误类和错误处理中间件\n */\n\nimport { logger } from './logger.js';\n\n/**\n * 应用程序错误类\n * 继承自Error，添加状态码和错误代码\n */\nexport class AppError extends Error {\n  constructor(message, statusCode, errorCode, details = {}) {\n    super(message);\n    this.statusCode = statusCode;\n    this.errorCode = errorCode;\n    this.details = details;\n    this.isOperational = true;\n    this.timestamp = new Date().toISOString();\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\n/**\n * 验证错误类\n */\nexport class ValidationError extends AppError {\n  constructor(message, details) {\n    super(message, 400, 'VALIDATION_ERROR', details);\n  }\n}\n\n/**\n * 认证错误类\n */\nexport class AuthenticationError extends AppError {\n  constructor(message = '认证失败') {\n    super(message, 401, 'AUTHENTICATION_ERROR');\n  }\n}\n\n/**\n * 授权错误类\n */\nexport class AuthorizationError extends AppError {\n  constructor(message = '权限不足') {\n    super(message, 403, 'AUTHORIZATION_ERROR');\n  }\n}\n\n/**\n * 资源未找到错误类\n */\nexport class NotFoundError extends AppError {\n  constructor(resource = '资源') {\n    super(`${resource}未找到`, 404, 'NOT_FOUND');\n  }\n}\n\n/**\n * 数据库错误类\n */\nexport class DatabaseError extends AppError {\n  constructor(message, details) {\n    super(message, 500, 'DATABASE_ERROR', details);\n  }\n}\n\n/**\n * 外部服务错误类\n */\nexport class ExternalServiceError extends AppError {\n  constructor(service, message = '外部服务调用失败') {\n    super(`${service}: ${message}`, 502, 'EXTERNAL_SERVICE_ERROR');\n    this.service = service;\n  }\n}\n\n/**\n * 错误处理中间件\n * 统一处理应用程序中的错误\n */\nexport const errorHandler = (err, req, res, _next) => {\n  let error = { ...err };\n  error.message = err.message;\n\n  // 记录错误日志\n  // 结构化错误日志\n  logger.error('API Error', {\n    errorCode: error.errorCode || 'UNKNOWN_ERROR',\n    message: error.message,\n    details: error.details,\n    url: req.url,\n    method: req.method,\n    ip: req.ip,\n    userAgent: req.get('User-Agent'),\n    stack: error.stack\n  });\n\n  // 处理特定类型的错误\n  if (err.name === 'ValidationError') {\n    error = new ValidationError(err.message);\n  } else if (err.name === 'JsonWebTokenError') {\n    error = new AuthenticationError('无效的访问令牌');\n  } else if (err.name === 'TokenExpiredError') {\n    error = new AuthenticationError('访问令牌已过期');\n  } else if (err.code === 'SQLITE_CONSTRAINT') {\n    error = new ValidationError('数据约束违反');\n  } else if (err.code === 'ENOTFOUND') {\n    error = new ExternalServiceError('DNS', '域名解析失败');\n  } else if (err.code === 'ECONNREFUSED') {\n    error = new ExternalServiceError('Network', '连接被拒绝');\n  }\n\n  // 设置默认错误信息\n  if (!error.statusCode) {\n    error.statusCode = 500;\n  }\n  if (!error.errorCode) {\n    error.errorCode = 'INTERNAL_SERVER_ERROR';\n  }\n\n  // 构建响应\n  const response = {\n    success: false,\n    error: {\n      code: error.errorCode,\n      message:\n        process.env.NODE_ENV === 'production'\n          ? getProductionMessage(error.statusCode)\n          : error.message,\n      timestamp: new Date().toISOString(),\n      ...(process.env.NODE_ENV !== 'production' && { details: error.details })\n    }\n  };\n\n  // 在开发环境中包含堆栈跟踪\n  if (process.env.NODE_ENV === 'development') {\n    response.error.stack = error.stack;\n  }\n\n  // 如果是验证错误，包含字段信息\n  if (error instanceof ValidationError && error.field) {\n    response.error.field = error.field;\n  }\n\n  res.status(error.statusCode).json(response);\n};\n\n/**\n * 根据状态码获取生产环境下的错误消息\n * @param {number} statusCode HTTP状态码\n * @returns {string} 错误消息\n */\nconst getProductionMessage = (statusCode) => {\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 22 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 22 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 22 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 22 行)\n\n  switch (statusCode) {\n    case 400:\n      return '请求参数无效或格式不正确。';\n    case 401:\n      return '认证失败，请检查您的凭据。';\n    case 403:\n      return '您没有执行此操作的权限。';\n    case 404:\n      return '请求的资源不存在。';\n    case 429:\n      return '请求过于频繁，请稍后再试。';\n    case 500:\n      return '服务器内部错误，请稍后再试。';\n    case 502:\n      return '网关错误或上游服务无响应。';\n    case 503:\n      return '服务暂时不可用，请稍后再试。';\n    case 504:\n      return '网关超时。';\n    default:\n      return '发生未知错误。';\n  }\n};\n\n/**\n * 异步错误包装器\n * 自动捕获异步函数中的错误并传递给错误处理中间件\n */\nexport const asyncHandler = (fn) => (req, res, next) => {\n  Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n/**\n * 404错误处理中间件\n */\nexport const notFoundHandler = (req, res, next) => {\n  const error = new NotFoundError(`路由 ${req.originalUrl}`);\n  next(error);\n};\n\n/**\n * 进程异常处理\n */\nexport const setupProcessHandlers = () => {\n  // 处理未捕获的异常\n  process.on('uncaughtException', (err) => {\n    console.error('未捕获的异常:', err);\n    console.error('应用程序将退出...');\n    process.exit(1);\n  });\n\n  // 处理未处理的Promise拒绝\n  process.on('unhandledRejection', (reason, promise) => {\n    console.error('未处理的Promise拒绝:', reason);\n    console.error('Promise:', promise);\n    // 在生产环境中可能需要退出进程\n    if (process.env.NODE_ENV === 'production') {\n      console.error('应用程序将退出...');\n      process.exit(1);\n    }\n  });\n\n  // 优雅关闭处理\n  const gracefulShutdown = (signal) => {\n    console.log(`收到 ${signal} 信号，开始优雅关闭...`);\n    // 这里可以添加清理逻辑，如关闭数据库连接、停止定时器等\n    process.exit(0);\n  };\n\n  process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));\n  process.on('SIGINT', () => gracefulShutdown('SIGINT'));\n};\n\nexport default {\n  AppError,\n  ValidationError,\n  AuthenticationError,\n  AuthorizationError,\n  NotFoundError,\n  DatabaseError,\n  ExternalServiceError,\n  errorHandler,\n  asyncHandler,\n  notFoundHandler,\n  setupProcessHandlers\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/middleware/performance.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1745,1783],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1840,1875],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":120,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":120,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3454,3486],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3549,3583],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":167,"column":92,"nodeType":"Literal","messageId":"noMagic","endLine":167,"endColumn":95},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":175,"column":79,"nodeType":"Literal","messageId":"noMagic","endLine":175,"endColumn":82},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":182,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":182,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":182,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":182,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":193,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":193,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":193,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":193,"endColumn":57},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":218,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":218,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5495,5527],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5551,5592],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5872,5910],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5934,5980],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":265,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":265,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 80.","line":267,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":267,"endColumn":39},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":271,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":271,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":273,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":273,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":283,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":283,"endColumn":67},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":303,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":303,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8133,8167],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":306,"column":9,"nodeType":"Literal","messageId":"noMagic","endLine":306,"endColumn":10},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":306,"column":13,"nodeType":"Literal","messageId":"noMagic","endLine":306,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":306,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":306,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":314,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":314,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8354,8386],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":315,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":315,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8399,8443],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":316,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":316,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8456,8506],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":317,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":317,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8519,8564],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":318,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":318,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8577,8613],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":320,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":320,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8654,8690],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":323,"column":9,"nodeType":"Literal","messageId":"noMagic","endLine":323,"endColumn":11},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":323,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":323,"endColumn":16},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":323,"column":19,"nodeType":"Literal","messageId":"noMagic","endLine":323,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":325,"column":8,"nodeType":"Literal","messageId":"noMagic","endLine":325,"endColumn":10},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":325,"column":13,"nodeType":"Literal","messageId":"noMagic","endLine":325,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import path from 'path';\nimport fs from 'fs';\n\n/**\n * 性能监控中间件\n * 用于跟踪API响应时间、缓存命中率等性能指标\n */\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = {\n      requests: 0,\n      totalResponseTime: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      endpoints: new Map()\n    };\n\n    this.logFile = path.join(process.cwd(), 'logs', 'performance.log');\n    this.reportFile = path.join(process.cwd(), 'test-results', 'performance_monitor.csv');\n\n    // 确保日志目录存在\n    this.ensureLogDirectory();\n\n    // 定期生成性能报告\n    this.startPeriodicReporting();\n  }\n\n  ensureLogDirectory() {\n    const logDir = path.dirname(this.logFile);\n    const reportDir = path.dirname(this.reportFile);\n\n    if (!fs.existsSync(logDir)) {\n      fs.mkdirSync(logDir, { recursive: true });\n    }\n\n    if (!fs.existsSync(reportDir)) {\n      fs.mkdirSync(reportDir, { recursive: true });\n    }\n  }\n\n  /**\n   * 创建性能监控中间件\n   */\n  middleware() {\n    return (req, res, next) => {\n      try {\n        const startTime = Date.now();\n        // 修复：安全地获取路径，避免未定义错误\n        let endpoint = req.path;\n        try {\n          endpoint = `${req.method} ${req.route?.path || req.path}`;\n        } catch (e) {\n          // 如果获取route.path失败，使用req.path\n          endpoint = `${req.method} ${req.path}`;\n        }\n\n        // 记录请求开始\n        this.recordRequestStart(endpoint);\n\n        // 监听响应结束\n        res.on('finish', () => {\n          try {\n            const responseTime = Date.now() - startTime;\n            const cacheHit = res.getHeader('X-Cache-Hit') === 'true';\n\n            // 使用process.nextTick延迟记录，避免阻塞响应\n            process.nextTick(() => {\n              this.recordRequestEnd(endpoint, responseTime, cacheHit, res.statusCode);\n            });\n          } catch (error) {\n            console.error('性能监控记录响应结束失败:', error);\n          }\n        });\n      } catch (error) {\n        console.error('性能监控中间件错误:', error);\n      }\n\n      // 无论如何都继续处理请求\n      next();\n    };\n  }\n\n  /**\n   * 记录请求开始\n   */\n  recordRequestStart(endpoint) {\n    this.metrics.requests++;\n\n    if (!this.metrics.endpoints.has(endpoint)) {\n      this.metrics.endpoints.set(endpoint, {\n        requests: 0,\n        totalTime: 0,\n        cacheHits: 0,\n        cacheMisses: 0,\n        errors: 0\n      });\n    }\n\n    this.metrics.endpoints.get(endpoint).requests++;\n  }\n\n  /**\n   * 记录请求结束\n   */\n  recordRequestEnd(endpoint, responseTime, cacheHit, statusCode) {\n    this.metrics.totalResponseTime += responseTime;\n\n    const endpointMetrics = this.metrics.endpoints.get(endpoint);\n    if (endpointMetrics) {\n      endpointMetrics.totalTime += responseTime;\n\n      if (cacheHit) {\n        this.metrics.cacheHits++;\n        endpointMetrics.cacheHits++;\n      } else {\n        this.metrics.cacheMisses++;\n        endpointMetrics.cacheMisses++;\n      }\n\n      if (statusCode >= 400) {\n        endpointMetrics.errors++;\n      }\n    }\n\n    // 记录到日志文件\n    this.logPerformanceData(endpoint, responseTime, cacheHit, statusCode);\n  }\n\n  /**\n   * 记录性能数据到日志文件\n   */\n  logPerformanceData(endpoint, responseTime, cacheHit, statusCode) {\n    try {\n      const logEntry = {\n        timestamp: new Date().toISOString(),\n        endpoint,\n        responseTime,\n        cacheHit,\n        statusCode\n      };\n\n      const logLine = `${JSON.stringify(logEntry)}\\n`;\n\n      // 使用异步文件操作，避免阻塞请求\n      // 使用setImmediate进一步延迟日志写入，确保不影响请求处理\n      setImmediate(() => {\n        fs.appendFile(this.logFile, logLine, (err) => {\n          if (err) {\n            console.error('写入性能日志失败:', err);\n          }\n        });\n      });\n    } catch (error) {\n      console.error('记录性能数据失败:', error);\n    }\n  }\n\n  /**\n   * 获取性能统计信息\n   */\n  getStats() {\n    const avgResponseTime =\n      this.metrics.requests > 0 ? this.metrics.totalResponseTime / this.metrics.requests : 0;\n\n    const cacheHitRate =\n      this.metrics.cacheHits + this.metrics.cacheMisses > 0\n        ? (this.metrics.cacheHits / (this.metrics.cacheHits + this.metrics.cacheMisses)) * 100\n        : 0;\n\n    const endpointStats = [];\n    for (const [endpoint, metrics] of this.metrics.endpoints) {\n      const avgTime = metrics.requests > 0 ? metrics.totalTime / metrics.requests : 0;\n      const hitRate =\n        metrics.cacheHits + metrics.cacheMisses > 0\n          ? (metrics.cacheHits / (metrics.cacheHits + metrics.cacheMisses)) * 100\n          : 0;\n\n      endpointStats.push({\n        endpoint,\n        requests: metrics.requests,\n        avgResponseTime: Math.round(avgTime),\n        cacheHitRate: Math.round(hitRate * 100) / 100,\n        errors: metrics.errors\n      });\n    }\n\n    // 按请求数排序\n    endpointStats.sort((a, b) => b.requests - a.requests);\n\n    return {\n      totalRequests: this.metrics.requests,\n      avgResponseTime: Math.round(avgResponseTime),\n      cacheHitRate: Math.round(cacheHitRate * 100) / 100,\n      totalCacheHits: this.metrics.cacheHits,\n      totalCacheMisses: this.metrics.cacheMisses,\n      endpoints: endpointStats\n    };\n  }\n\n  /**\n   * 生成性能报告\n   */\n  generateReport() {\n    const stats = this.getStats();\n    const timestamp = new Date().toISOString();\n\n    // 生成CSV格式的报告\n    const csvHeader = 'timestamp,endpoint,requests,avg_response_time,cache_hit_rate,errors\\n';\n    let csvContent = csvHeader;\n\n    for (const endpoint of stats.endpoints) {\n      csvContent += `${timestamp},\"${endpoint.endpoint}\",${endpoint.requests},${endpoint.avgResponseTime},${endpoint.cacheHitRate},${endpoint.errors}\\n`;\n    }\n\n    // 写入CSV文件\n    fs.writeFile(this.reportFile, csvContent, (err) => {\n      if (err) {\n        console.error('生成性能报告失败:', err);\n      } else {\n        console.log('性能报告已生成:', this.reportFile);\n      }\n    });\n\n    // 生成Markdown格式的报告\n    const markdownReport = this.generateMarkdownReport(stats);\n    const markdownFile = path.join(process.cwd(), 'test-results', 'performance_report.md');\n\n    fs.writeFile(markdownFile, markdownReport, (err) => {\n      if (err) {\n        console.error('生成Markdown报告失败:', err);\n      } else {\n        console.log('Markdown性能报告已生成:', markdownFile);\n      }\n    });\n\n    return stats;\n  }\n\n  /**\n   * 生成Markdown格式的性能报告\n   */\n  generateMarkdownReport(stats) {\n    const timestamp = new Date().toLocaleString('zh-CN');\n\n    let markdown = '# 系统性能监控报告\\n\\n';\n    markdown += `**生成时间:** ${timestamp}\\n\\n`;\n\n    markdown += '## 总体性能指标\\n\\n';\n    markdown += `- **总请求数:** ${stats.totalRequests}\\n`;\n    markdown += `- **平均响应时间:** ${stats.avgResponseTime}ms\\n`;\n    markdown += `- **缓存命中率:** ${stats.cacheHitRate}%\\n`;\n    markdown += `- **缓存命中次数:** ${stats.totalCacheHits}\\n`;\n    markdown += `- **缓存未命中次数:** ${stats.totalCacheMisses}\\n\\n`;\n\n    markdown += '## 接口性能详情\\n\\n';\n    markdown += '| 接口 | 请求数 | 平均响应时间(ms) | 缓存命中率(%) | 错误数 |\\n';\n    markdown += '|------|--------|------------------|---------------|--------|\\n';\n\n    for (const endpoint of stats.endpoints) {\n      markdown += `| ${endpoint.endpoint} | ${endpoint.requests} | ${endpoint.avgResponseTime} | ${endpoint.cacheHitRate} | ${endpoint.errors} |\\n`;\n    }\n\n    markdown += '\\n## 性能优化建议\\n\\n';\n\n    if (stats.cacheHitRate < 50) {\n      markdown += `- ⚠️ 缓存命中率较低(${stats.cacheHitRate}%)，建议检查缓存策略\\n`;\n    } else if (stats.cacheHitRate > 80) {\n      markdown += `- ✅ 缓存命中率良好(${stats.cacheHitRate}%)\\n`;\n    }\n\n    if (stats.avgResponseTime > 1000) {\n      markdown += `- ⚠️ 平均响应时间较长(${stats.avgResponseTime}ms)，建议优化查询或增加缓存\\n`;\n    } else if (stats.avgResponseTime < 200) {\n      markdown += `- ✅ 响应时间表现良好(${stats.avgResponseTime}ms)\\n`;\n    }\n\n    // 找出响应时间最长的接口\n    if (stats.endpoints && stats.endpoints.length > 0) {\n      const slowestEndpoint = stats.endpoints.reduce((prev, current) =>\n        prev.avgResponseTime > current.avgResponseTime ? prev : current\n      );\n\n      if (slowestEndpoint && slowestEndpoint.avgResponseTime > 500) {\n        markdown += `- ⚠️ 最慢接口: ${slowestEndpoint.endpoint} (${slowestEndpoint.avgResponseTime}ms)，建议优化\\n`;\n      }\n    }\n\n    return markdown;\n  }\n\n  /**\n   * 开始定期报告\n   */\n  startPeriodicReporting() {\n    // 延迟启动报告生成，避免在应用启动时就开始生成报告\n    setTimeout(() => {\n      // 每5分钟生成一次报告\n      setInterval(\n        () => {\n          try {\n            this.generateReport();\n          } catch (error) {\n            console.error('生成性能报告失败:', error);\n          }\n        },\n        5 * 60 * 1000\n      );\n\n      // 每小时输出一次统计信息到控制台\n      setInterval(\n        () => {\n          try {\n            const stats = this.getStats();\n            console.log('\\n=== 性能监控统计 ===');\n            console.log(`总请求数: ${stats.totalRequests}`);\n            console.log(`平均响应时间: ${stats.avgResponseTime}ms`);\n            console.log(`缓存命中率: ${stats.cacheHitRate}%`);\n            console.log('==================\\n');\n          } catch (error) {\n            console.error('输出性能统计信息失败:', error);\n          }\n        },\n        60 * 60 * 1000\n      );\n    }, 60 * 1000); // 延迟1分钟启动\n  }\n\n  /**\n   * 重置统计数据\n   */\n  reset() {\n    this.metrics = {\n      requests: 0,\n      totalResponseTime: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      endpoints: new Map()\n    };\n  }\n}\n\n// 创建全局性能监控实例\nconst performanceMonitor = new PerformanceMonitor();\n\nexport { performanceMonitor, performanceMonitor as default };\n\nexport const performanceMiddleware = performanceMonitor.middleware.bind(performanceMonitor);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/middleware/responseFormatter.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":14,"column":67,"nodeType":"Literal","messageId":"noMagic","endLine":14,"endColumn":70},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":36,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":36,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":49,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":49,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1032,1156],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":76,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":76,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":84,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":84,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":99,"column":38,"nodeType":"Literal","messageId":"noMagic","endLine":99,"endColumn":41},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":108,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":108,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":117,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":117,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":126,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":126,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 409.","line":135,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":135,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":144,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":144,"endColumn":66},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":146,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":146,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":166,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":166,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":177,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":177,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 300.","line":177,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":177,"endColumn":60},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5214,5252],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3600.","line":228,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":228,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":261,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":261,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":271,"column":62,"nodeType":"Literal","messageId":"noMagic","endLine":271,"endColumn":65},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":294,"column":76,"nodeType":"Literal","messageId":"noMagic","endLine":294,"endColumn":80},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":297,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":297,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 响应格式化中间件\n * 提供统一的API响应格式\n */\n\nclass ResponseFormatter {\n  /**\n   * 成功响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 响应消息\n   * @param {*} data - 响应数据\n   * @param {number} statusCode - HTTP状态码\n   */\n  static success(res, message = '操作成功', data = null, statusCode = 200) {\n    const response = {\n      success: true,\n      message,\n      timestamp: new Date().toISOString(),\n      statusCode\n    };\n\n    if (data !== null) {\n      response.data = data;\n    }\n\n    return res.status(statusCode).json(response);\n  }\n\n  /**\n   * 错误响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   * @param {number} statusCode - HTTP状态码\n   * @param {*} errors - 详细错误信息\n   */\n  static error(res, message = '操作失败', statusCode = 500, errors = null) {\n    const response = {\n      success: false,\n      message,\n      timestamp: new Date().toISOString(),\n      statusCode\n    };\n\n    if (errors !== null) {\n      response.errors = errors;\n    }\n\n    // 记录错误日志\n    if (statusCode >= 500) {\n      console.error(`[${new Date().toISOString()}] Server Error:`, {\n        message,\n        statusCode,\n        errors\n      });\n    }\n\n    return res.status(statusCode).json(response);\n  }\n\n  /**\n   * 分页响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 响应消息\n   * @param {Array} data - 数据数组\n   * @param {Object} pagination - 分页信息\n   */\n  static paginated(res, message = '获取数据成功', data = [], pagination = {}) {\n    const response = {\n      success: true,\n      message,\n      timestamp: new Date().toISOString(),\n      statusCode: 200,\n      data,\n      pagination: {\n        page: pagination.page || 1,\n        limit: pagination.limit || 20,\n        total: pagination.total || 0,\n        pages: pagination.pages || 0,\n        hasNext: pagination.hasNext || false,\n        hasPrev: pagination.hasPrev || false\n      }\n    };\n\n    return res.status(200).json(response);\n  }\n\n  /**\n   * 验证错误响应\n   * @param {Object} res - Express响应对象\n   * @param {Array} validationErrors - 验证错误数组\n   */\n  static validationError(res, validationErrors) {\n    const formattedErrors = validationErrors.map((error) => ({\n      field: error.param || error.path,\n      message: error.msg || error.message,\n      value: error.value\n    }));\n\n    return this.error(res, '输入验证失败', 400, formattedErrors);\n  }\n\n  /**\n   * 未授权响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   */\n  static unauthorized(res, message = '未授权访问') {\n    return this.error(res, message, 401);\n  }\n\n  /**\n   * 禁止访问响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   */\n  static forbidden(res, message = '禁止访问') {\n    return this.error(res, message, 403);\n  }\n\n  /**\n   * 资源不存在响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   */\n  static notFound(res, message = '资源不存在') {\n    return this.error(res, message, 404);\n  }\n\n  /**\n   * 冲突响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   */\n  static conflict(res, message = '资源冲突') {\n    return this.error(res, message, 409);\n  }\n\n  /**\n   * 请求过于频繁响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   * @param {number} retryAfter - 重试等待时间（秒）\n   */\n  static tooManyRequests(res, message = '请求过于频繁', retryAfter = 60) {\n    res.setHeader('Retry-After', retryAfter);\n    return this.error(res, message, 429);\n  }\n\n  /**\n   * 服务器内部错误响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 错误消息\n   * @param {Error} error - 错误对象\n   */\n  static internalError(res, message = '服务器内部错误', error = null) {\n    // 在开发环境中包含错误堆栈\n    const isDevelopment = process.env.NODE_ENV === 'development';\n    const errorDetails =\n      isDevelopment && error\n        ? {\n          stack: error.stack,\n          name: error.name\n        }\n        : null;\n\n    return this.error(res, message, 500, errorDetails);\n  }\n\n  /**\n   * 自定义状态码响应\n   * @param {Object} res - Express响应对象\n   * @param {number} statusCode - HTTP状态码\n   * @param {string} message - 响应消息\n   * @param {*} data - 响应数据\n   */\n  static custom(res, statusCode, message, data = null) {\n    const isSuccess = statusCode >= 200 && statusCode < 300;\n\n    if (isSuccess) {\n      return this.success(res, message, data, statusCode);\n    } \n    return this.error(res, message, statusCode, data);\n    \n  }\n\n  /**\n   * 文件下载响应\n   * @param {Object} res - Express响应对象\n   * @param {Buffer|string} fileData - 文件数据\n   * @param {string} filename - 文件名\n   * @param {string} contentType - 内容类型\n   */\n  static fileDownload(res, fileData, filename, contentType = 'application/octet-stream') {\n    res.setHeader('Content-Type', contentType);\n    res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n    res.setHeader('Content-Length', Buffer.byteLength(fileData));\n\n    return res.send(fileData);\n  }\n\n  /**\n   * 流式响应\n   * @param {Object} res - Express响应对象\n   * @param {Stream} stream - 数据流\n   * @param {string} contentType - 内容类型\n   */\n  static stream(res, stream, contentType = 'application/octet-stream') {\n    res.setHeader('Content-Type', contentType);\n    res.setHeader('Transfer-Encoding', 'chunked');\n\n    stream.pipe(res);\n\n    stream.on('error', (error) => {\n      console.error('Stream error:', error);\n      if (!res.headersSent) {\n        this.internalError(res, '数据流传输错误', error);\n      }\n    });\n  }\n\n  /**\n   * 缓存响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 响应消息\n   * @param {*} data - 响应数据\n   * @param {number} maxAge - 缓存时间（秒）\n   */\n  static cached(res, message, data, maxAge = 3600) {\n    res.setHeader('Cache-Control', `public, max-age=${maxAge}`);\n    res.setHeader('ETag', this._generateETag(data));\n\n    return this.success(res, message, data);\n  }\n\n  /**\n   * 生成ETag\n   * @param {*} data - 数据\n   * @returns {string} ETag值\n   * @private\n   */\n  static _generateETag(data) {\n    const crypto = require('crypto');\n    const content = typeof data === 'string' ? data : JSON.stringify(data);\n    return crypto.createHash('md5').update(content).digest('hex');\n  }\n\n  /**\n   * 健康检查响应\n   * @param {Object} res - Express响应对象\n   * @param {Object} healthData - 健康状态数据\n   */\n  static health(res, healthData = {}) {\n    const response = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n      ...healthData\n    };\n\n    return res.status(200).json(response);\n  }\n\n  /**\n   * API版本不支持响应\n   * @param {Object} res - Express响应对象\n   * @param {string} requestedVersion - 请求的版本\n   * @param {Array} supportedVersions - 支持的版本列表\n   */\n  static unsupportedVersion(res, requestedVersion, supportedVersions = []) {\n    return this.error(res, `不支持的API版本: ${requestedVersion}`, 400, {\n      requestedVersion,\n      supportedVersions\n    });\n  }\n\n  /**\n   * 维护模式响应\n   * @param {Object} res - Express响应对象\n   * @param {string} message - 维护消息\n   * @param {Date} estimatedEnd - 预计结束时间\n   */\n  static maintenance(res, message = '系统正在维护中', estimatedEnd = null) {\n    const response = {\n      success: false,\n      message,\n      timestamp: new Date().toISOString(),\n      statusCode: 503,\n      maintenance: true\n    };\n\n    if (estimatedEnd) {\n      response.estimatedEnd = estimatedEnd.toISOString();\n      res.setHeader('Retry-After', Math.ceil((estimatedEnd - new Date()) / 1000));\n    }\n\n    return res.status(503).json(response);\n  }\n}\n\n// 中间件函数，将ResponseFormatter添加到res对象\nconst responseFormatterMiddleware = (req, res, next) => {\n  // 将所有静态方法绑定到res对象\n  res.success = (message, data, statusCode) =>\n    ResponseFormatter.success(res, message, data, statusCode);\n  res.error = (message, statusCode, errors) =>\n    ResponseFormatter.error(res, message, statusCode, errors);\n  res.paginated = (message, data, pagination) =>\n    ResponseFormatter.paginated(res, message, data, pagination);\n  res.validationError = (validationErrors) =>\n    ResponseFormatter.validationError(res, validationErrors);\n  res.unauthorized = (message) => ResponseFormatter.unauthorized(res, message);\n  res.forbidden = (message) => ResponseFormatter.forbidden(res, message);\n  res.notFound = (message) => ResponseFormatter.notFound(res, message);\n  res.conflict = (message) => ResponseFormatter.conflict(res, message);\n  res.tooManyRequests = (message, retryAfter) =>\n    ResponseFormatter.tooManyRequests(res, message, retryAfter);\n  res.internalError = (message, error) => ResponseFormatter.internalError(res, message, error);\n  res.custom = (statusCode, message, data) =>\n    ResponseFormatter.custom(res, statusCode, message, data);\n  res.fileDownload = (fileData, filename, contentType) =>\n    ResponseFormatter.fileDownload(res, fileData, filename, contentType);\n  res.stream = (stream, contentType) => ResponseFormatter.stream(res, stream, contentType);\n  res.cached = (message, data, maxAge) => ResponseFormatter.cached(res, message, data, maxAge);\n  res.health = (healthData) => ResponseFormatter.health(res, healthData);\n  res.unsupportedVersion = (requestedVersion, supportedVersions) =>\n    ResponseFormatter.unsupportedVersion(res, requestedVersion, supportedVersions);\n  res.maintenance = (message, estimatedEnd) =>\n    ResponseFormatter.maintenance(res, message, estimatedEnd);\n\n  next();\n};\n\nmodule.exports = ResponseFormatter;\nmodule.exports.middleware = responseFormatterMiddleware;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/middleware/roleCheck.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2094,2243],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2287,2319],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3399,3561],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3605,3637],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4319,4511],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4555,4589],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":226,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":226,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5405,5532],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5576,5609],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":272,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":272,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6634,6788],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":278,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":278,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6832,6866],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 405.","line":354,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":354,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 角色检查中间件\n * 用于验证用户是否具有执行特定操作的权限\n */\n\nconst responseFormatter = require('./responseFormatter');\n\n// 角色权限级别定义\nconst ROLE_LEVELS = {\n  admin: 100,\n  operator: 50,\n  user: 10,\n  guest: 1\n};\n\n// 角色权限映射\nconst ROLE_PERMISSIONS = {\n  admin: [\n    'user:create',\n    'user:read',\n    'user:update',\n    'user:delete',\n    'device:create',\n    'device:read',\n    'device:update',\n    'device:delete',\n    'energy:create',\n    'energy:read',\n    'energy:update',\n    'energy:delete',\n    'carbon:create',\n    'carbon:read',\n    'carbon:update',\n    'carbon:delete',\n    'maintenance:create',\n    'maintenance:read',\n    'maintenance:update',\n    'maintenance:delete',\n    'digitaltwin:create',\n    'digitaltwin:read',\n    'digitaltwin:update',\n    'digitaltwin:delete',\n    'system:config',\n    'system:backup',\n    'system:restore',\n    'report:generate',\n    'report:export'\n  ],\n  operator: [\n    'device:create',\n    'device:read',\n    'device:update',\n    'energy:create',\n    'energy:read',\n    'energy:update',\n    'carbon:create',\n    'carbon:read',\n    'carbon:update',\n    'maintenance:create',\n    'maintenance:read',\n    'maintenance:update',\n    'digitaltwin:create',\n    'digitaltwin:read',\n    'digitaltwin:update',\n    'report:generate',\n    'report:export'\n  ],\n  user: [\n    'device:read',\n    'energy:read',\n    'carbon:read',\n    'maintenance:read',\n    'digitaltwin:read',\n    'report:generate'\n  ],\n  guest: ['device:read', 'energy:read', 'carbon:read']\n};\n\n/**\n * 检查用户是否具有指定角色\n * @param {Array|string} allowedRoles - 允许的角色列表\n * @returns {Function} Express中间件函数\n */\nfunction requireRole(allowedRoles) {\n  // 确保allowedRoles是数组\n  const roles = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles];\n\n  return (req, res, next) => {\n    try {\n      // 检查用户是否已认证\n      if (!req.user) {\n        return responseFormatter.unauthorized(res, '用户未认证');\n      }\n\n      const userRole = req.user.role;\n\n      // 检查用户角色是否在允许的角色列表中\n      if (!roles.includes(userRole)) {\n        return responseFormatter.forbidden(res, `需要以下角色之一: ${roles.join(', ')}`);\n      }\n\n      // 记录权限检查日志\n      console.log(\n        `[${new Date().toISOString()}] Role Check: User ${req.user.username} (${userRole}) accessing ${req.method} ${req.path}`\n      );\n\n      next();\n    } catch (error) {\n      console.error('角色检查错误:', error);\n      return responseFormatter.internalError(res, '权限验证失败', error);\n    }\n  };\n}\n\n/**\n * 检查用户是否具有指定权限\n * @param {Array|string} requiredPermissions - 需要的权限列表\n * @returns {Function} Express中间件函数\n */\nfunction requirePermission(requiredPermissions) {\n  // 确保requiredPermissions是数组\n  const permissions = Array.isArray(requiredPermissions)\n    ? requiredPermissions\n    : [requiredPermissions];\n\n  return (req, res, next) => {\n    try {\n      // 检查用户是否已认证\n      if (!req.user) {\n        return responseFormatter.unauthorized(res, '用户未认证');\n      }\n\n      const userRole = req.user.role;\n      const userPermissions = ROLE_PERMISSIONS[userRole] || [];\n\n      // 检查用户是否具有所有需要的权限\n      const hasAllPermissions = permissions.every((permission) =>\n        userPermissions.includes(permission)\n      );\n\n      if (!hasAllPermissions) {\n        const missingPermissions = permissions.filter(\n          (permission) => !userPermissions.includes(permission)\n        );\n\n        return responseFormatter.forbidden(res, `缺少权限: ${missingPermissions.join(', ')}`);\n      }\n\n      // 记录权限检查日志\n      console.log(\n        `[${new Date().toISOString()}] Permission Check: User ${req.user.username} (${userRole}) has permissions: ${permissions.join(', ')}`\n      );\n\n      next();\n    } catch (error) {\n      console.error('权限检查错误:', error);\n      return responseFormatter.internalError(res, '权限验证失败', error);\n    }\n  };\n}\n\n/**\n * 检查用户是否具有足够的角色级别\n * @param {string} minimumRole - 最低要求的角色\n * @returns {Function} Express中间件函数\n */\nfunction requireMinimumRole(minimumRole) {\n  return (req, res, next) => {\n    try {\n      // 检查用户是否已认证\n      if (!req.user) {\n        return responseFormatter.unauthorized(res, '用户未认证');\n      }\n\n      const userRole = req.user.role;\n      const userLevel = ROLE_LEVELS[userRole] || 0;\n      const requiredLevel = ROLE_LEVELS[minimumRole] || 0;\n\n      if (userLevel < requiredLevel) {\n        return responseFormatter.forbidden(res, `需要至少 ${minimumRole} 角色权限`);\n      }\n\n      // 记录权限检查日志\n      console.log(\n        `[${new Date().toISOString()}] Role Level Check: User ${req.user.username} (${userRole}:${userLevel}) meets minimum requirement (${minimumRole}:${requiredLevel})`\n      );\n\n      next();\n    } catch (error) {\n      console.error('角色级别检查错误:', error);\n      return responseFormatter.internalError(res, '权限验证失败', error);\n    }\n  };\n}\n\n/**\n * 检查用户是否为资源所有者或具有管理权限\n * @param {Function} getResourceOwnerId - 获取资源所有者ID的函数\n * @returns {Function} Express中间件函数\n */\nfunction requireOwnershipOrAdmin(getResourceOwnerId) {\n  return async (req, res, next) => {\n    try {\n      // 检查用户是否已认证\n      if (!req.user) {\n        return responseFormatter.unauthorized(res, '用户未认证');\n      }\n\n      const userRole = req.user.role;\n      const {userId} = req.user;\n\n      // 管理员可以访问所有资源\n      if (userRole === 'admin') {\n        return next();\n      }\n\n      // 获取资源所有者ID\n      const resourceOwnerId = await getResourceOwnerId(req);\n\n      // 检查用户是否为资源所有者\n      if (userId !== resourceOwnerId) {\n        return responseFormatter.forbidden(res, '只能访问自己的资源');\n      }\n\n      // 记录权限检查日志\n      console.log(\n        `[${new Date().toISOString()}] Ownership Check: User ${req.user.username} accessing own resource`\n      );\n\n      next();\n    } catch (error) {\n      console.error('所有权检查错误:', error);\n      return responseFormatter.internalError(res, '权限验证失败', error);\n    }\n  };\n}\n\n/**\n * 条件权限检查\n * @param {Function} condition - 条件检查函数\n * @param {Array|string} allowedRoles - 满足条件时允许的角色\n * @param {Array|string} fallbackRoles - 不满足条件时允许的角色\n * @returns {Function} Express中间件函数\n */\nfunction conditionalRole(condition, allowedRoles, fallbackRoles = []) {\n  return async (req, res, next) => {\n    try {\n      // 检查用户是否已认证\n      if (!req.user) {\n        return responseFormatter.unauthorized(res, '用户未认证');\n      }\n\n      const userRole = req.user.role;\n      const conditionMet = await condition(req);\n\n      const targetRoles = conditionMet\n        ? Array.isArray(allowedRoles)\n          ? allowedRoles\n          : [allowedRoles]\n        : Array.isArray(fallbackRoles)\n          ? fallbackRoles\n          : [fallbackRoles];\n\n      if (!targetRoles.includes(userRole)) {\n        return responseFormatter.forbidden(\n          res,\n          `当前条件下需要以下角色之一: ${targetRoles.join(', ')}`\n        );\n      }\n\n      // 记录权限检查日志\n      console.log(\n        `[${new Date().toISOString()}] Conditional Role Check: User ${req.user.username} (${userRole}) - condition: ${conditionMet}`\n      );\n\n      next();\n    } catch (error) {\n      console.error('条件权限检查错误:', error);\n      return responseFormatter.internalError(res, '权限验证失败', error);\n    }\n  };\n}\n\n/**\n * 获取用户权限列表\n * @param {string} role - 用户角色\n * @returns {Array} 权限列表\n */\nfunction getUserPermissions(role) {\n  return ROLE_PERMISSIONS[role] || [];\n}\n\n/**\n * 检查角色是否具有指定权限\n * @param {string} role - 角色\n * @param {string} permission - 权限\n * @returns {boolean} 是否具有权限\n */\nfunction hasPermission(role, permission) {\n  const permissions = ROLE_PERMISSIONS[role] || [];\n  return permissions.includes(permission);\n}\n\n/**\n * 获取角色级别\n * @param {string} role - 角色\n * @returns {number} 角色级别\n */\nfunction getRoleLevel(role) {\n  return ROLE_LEVELS[role] || 0;\n}\n\n/**\n * 比较两个角色的级别\n * @param {string} role1 - 角色1\n * @param {string} role2 - 角色2\n * @returns {number} 比较结果 (1: role1 > role2, 0: 相等, -1: role1 < role2)\n */\nfunction compareRoles(role1, role2) {\n  const level1 = getRoleLevel(role1);\n  const level2 = getRoleLevel(role2);\n\n  if (level1 > level2) {return 1;}\n  if (level1 < level2) {return -1;}\n  return 0;\n}\n\n/**\n * 权限检查中间件工厂\n * 根据HTTP方法自动选择权限检查策略\n * @param {string} resource - 资源名称\n * @returns {Function} Express中间件函数\n */\nfunction autoPermissionCheck(resource) {\n  return (req, res, next) => {\n    const method = req.method.toLowerCase();\n    let requiredPermission;\n\n    switch (method) {\n      case 'get':\n        requiredPermission = `${resource}:read`;\n        break;\n      case 'post':\n        requiredPermission = `${resource}:create`;\n        break;\n      case 'put':\n      case 'patch':\n        requiredPermission = `${resource}:update`;\n        break;\n      case 'delete':\n        requiredPermission = `${resource}:delete`;\n        break;\n      default:\n        return responseFormatter.error(res, '不支持的HTTP方法', 405);\n    }\n\n    return requirePermission(requiredPermission)(req, res, next);\n  };\n}\n\nmodule.exports = {\n  requireRole,\n  requirePermission,\n  requireMinimumRole,\n  requireOwnershipOrAdmin,\n  conditionalRole,\n  autoPermissionCheck,\n  getUserPermissions,\n  hasPermission,\n  getRoleLevel,\n  compareRoles,\n  ROLE_LEVELS,\n  ROLE_PERMISSIONS\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/middleware/validation.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":56,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":56,"endColumn":11},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 50.","line":57,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":57,"endColumn":12},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":71,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":71,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 999999.","line":71,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":71,"endColumn":63},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 6.","line":78,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":78,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 999999.","line":78,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":78,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":87,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":87,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 20.","line":87,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":87,"endColumn":61},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":98,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":98,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 30.","line":98,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":98,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8.","line":106,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":106,"endColumn":11},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 128.","line":107,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":107,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 255.","line":116,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":116,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":131,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":131,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 6.","line":143,"column":56,"nodeType":"Literal","messageId":"noMagic","endLine":143,"endColumn":57},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":157,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":157,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":158,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":158,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":159,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":159,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: -50.","line":160,"column":35,"nodeType":"UnaryExpression","messageId":"noMagic","endLine":160,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":160,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":160,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":161,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":161,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":177,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":177,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":179,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":179,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":219,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":219,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":223,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":223,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":224,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":224,"endColumn":39},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":225,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":225,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":238,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":238,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":251,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":251,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":300,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":300,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":300,"column":38,"nodeType":"Literal","messageId":"noMagic","endLine":300,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":300,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":300,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 输入验证中间件\n * 使用Joi进行请求数据验证和清理\n */\n\nimport Joi from 'joi';\nimport { ValidationError } from '../utils/errorHandler.js';\n\n/**\n * 通用验证中间件\n * @param {Object} schema - Joi验证模式\n * @param {Object} options - 验证选项\n */\nexport const validateRequest = (schema, options = {}) => {\n  const defaultOptions = {\n    abortEarly: false, // 返回所有验证错误\n    allowUnknown: false, // 不允许未知字段\n    stripUnknown: true, // 移除未知字段\n    ...options\n  };\n\n  return (req, res, next) => {\n    const dataToValidate = {\n      body: req.body || {},\n      query: req.query || {},\n      params: req.params || {},\n      headers: req.headers || {}\n    };\n\n    const { error, value } = schema.validate(dataToValidate, defaultOptions);\n\n    if (error) {\n      const errorMessage = error.details.map((detail) => detail.message).join('; ');\n\n      const field = error.details[0]?.path?.join('.') || null;\n\n      return next(new ValidationError(errorMessage, field));\n    }\n\n    // 将验证后的数据替换原始数据\n    req.body = value.body || {};\n    req.query = value.query || {};\n    req.params = value.params || {};\n\n    next();\n  };\n};\n\n/**\n * 自定义验证规则\n */\nconst customValidators = {\n  // 设备ID验证\n  deviceId: Joi.string()\n    .pattern(/^[a-zA-Z0-9_-]+$/)\n    .min(3)\n    .max(50)\n    .messages({\n      'string.pattern.base': '设备ID只能包含字母、数字、下划线和连字符',\n      'string.min': '设备ID长度至少3个字符',\n      'string.max': '设备ID长度不能超过50个字符'\n    }),\n\n  // 时间戳验证\n  timestamp: Joi.date().iso().max('now').messages({\n    'date.format': '时间戳必须是有效的ISO 8601格式',\n    'date.max': '时间戳不能是未来时间'\n  }),\n\n  // 能耗值验证\n  energyValue: Joi.number().positive().precision(3).max(999999).messages({\n    'number.positive': '能耗值必须为正数',\n    'number.precision': '能耗值最多保留3位小数',\n    'number.max': '能耗值不能超过999999'\n  }),\n\n  // 碳排放值验证\n  carbonValue: Joi.number().min(0).precision(6).max(999999).messages({\n    'number.min': '碳排放值不能为负数',\n    'number.precision': '碳排放值最多保留6位小数',\n    'number.max': '碳排放值不能超过999999'\n  }),\n\n  // 分页参数验证\n  pagination: {\n    page: Joi.number().integer().min(1).default(1),\n    limit: Joi.number().integer().min(1).max(100).default(20),\n    offset: Joi.number().integer().min(0)\n  },\n\n  // 时间范围验证\n  timeRange: {\n    startTime: Joi.date().iso().required(),\n    endTime: Joi.date().iso().min(Joi.ref('startTime')).required()\n  },\n\n  // 用户名验证\n  username: Joi.string().alphanum().min(3).max(30).messages({\n    'string.alphanum': '用户名只能包含字母和数字',\n    'string.min': '用户名长度至少3个字符',\n    'string.max': '用户名长度不能超过30个字符'\n  }),\n\n  // 密码验证\n  password: Joi.string()\n    .min(8)\n    .max(128)\n    .pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]$/)\n    .messages({\n      'string.min': '密码长度至少8个字符',\n      'string.max': '密码长度不能超过128个字符',\n      'string.pattern.base': '密码必须包含大小写字母、数字和特殊字符'\n    }),\n\n  // 邮箱验证\n  email: Joi.string().email().max(255).messages({\n    'string.email': '邮箱格式无效',\n    'string.max': '邮箱长度不能超过255个字符'\n  })\n};\n\n/**\n * 能源数据验证模式\n */\nexport const energyDataSchema = Joi.object({\n  body: Joi.object({\n    device_id: customValidators.deviceId.required(),\n    value: customValidators.energyValue.required(),\n    unit: Joi.string().valid('kWh', 'MWh', 'GWh').required(),\n    timestamp: customValidators.timestamp.required(),\n    location: Joi.string().max(100).optional(),\n    metadata: Joi.object().optional()\n  })\n});\n\n/**\n * 碳排放数据验证模式\n */\nexport const carbonDataSchema = Joi.object({\n  body: Joi.object({\n    device_id: customValidators.deviceId.required(),\n    emission_value: customValidators.carbonValue.required(),\n    emission_factor: Joi.number().positive().precision(6).required(),\n    energy_consumption: customValidators.energyValue.required(),\n    timestamp: customValidators.timestamp.required(),\n    calculation_method: Joi.string().valid('direct', 'indirect', 'lifecycle').default('direct'),\n    metadata: Joi.object().optional()\n  })\n});\n\n/**\n * 电池数据验证模式\n */\nexport const batteryDataSchema = Joi.object({\n  body: Joi.object({\n    device_id: customValidators.deviceId.required(),\n    soc: Joi.number().min(0).max(100).precision(2).required(), // 电量百分比\n    voltage: Joi.number().positive().precision(3).required(),\n    current: Joi.number().precision(3).required(), // 可以为负数（放电）\n    temperature: Joi.number().min(-50).max(100).precision(2).required(),\n    capacity: Joi.number().positive().precision(3).required(),\n    cycle_count: Joi.number().integer().min(0).optional(),\n    health_status: Joi.string().valid('good', 'warning', 'critical').default('good'),\n    timestamp: customValidators.timestamp.required(),\n    metadata: Joi.object().optional()\n  })\n});\n\n/**\n * 用户注册验证模式\n */\nexport const userRegistrationSchema = Joi.object({\n  body: Joi.object({\n    username: customValidators.username.required(),\n    password: customValidators.password.required(),\n    email: customValidators.email.required(),\n    full_name: Joi.string().min(2).max(100).required(),\n    role: Joi.string().valid('admin', 'operator', 'viewer').default('viewer'),\n    department: Joi.string().max(100).optional(),\n    phone: Joi.string()\n      .pattern(/^\\+?[1-9]\\d{1,14}$/)\n      .optional()\n  })\n});\n\n/**\n * 用户登录验证模式\n */\nexport const userLoginSchema = Joi.object({\n  body: Joi.object({\n    username: Joi.string().required(),\n    password: Joi.string().required(),\n    remember_me: Joi.boolean().default(false)\n  })\n});\n\n/**\n * 数据查询验证模式\n */\nexport const dataQuerySchema = Joi.object({\n  query: Joi.object({\n    device_id: customValidators.deviceId.optional(),\n    start_time: Joi.date().iso().optional(),\n    end_time: Joi.date().iso().min(Joi.ref('start_time')).optional(),\n    page: customValidators.pagination.page,\n    limit: customValidators.pagination.limit,\n    sort_by: Joi.string().valid('timestamp', 'value', 'device_id').default('timestamp'),\n    sort_order: Joi.string().valid('asc', 'desc').default('desc'),\n    aggregation: Joi.string().valid('none', 'hourly', 'daily', 'monthly').default('none')\n  })\n});\n\n/**\n * 设备管理验证模式\n */\nexport const deviceSchema = Joi.object({\n  body: Joi.object({\n    device_id: customValidators.deviceId.required(),\n    device_name: Joi.string().min(2).max(100).required(),\n    device_type: Joi.string()\n      .valid('energy_meter', 'carbon_sensor', 'battery', 'solar_panel', 'wind_turbine')\n      .required(),\n    location: Joi.string().max(200).required(),\n    manufacturer: Joi.string().max(100).optional(),\n    model: Joi.string().max(100).optional(),\n    installation_date: Joi.date().iso().max('now').optional(),\n    status: Joi.string().valid('active', 'inactive', 'maintenance').default('active'),\n    specifications: Joi.object().optional(),\n    metadata: Joi.object().optional()\n  })\n});\n\n/**\n * 告警规则验证模式\n */\nexport const alertRuleSchema = Joi.object({\n  body: Joi.object({\n    rule_name: Joi.string().min(2).max(100).required(),\n    device_id: customValidators.deviceId.optional(),\n    metric_type: Joi.string()\n      .valid('energy', 'carbon', 'battery_soc', 'battery_temperature')\n      .required(),\n    condition: Joi.string().valid('>', '<', '>=', '<=', '==', '!=').required(),\n    threshold_value: Joi.number().required(),\n    severity: Joi.string().valid('low', 'medium', 'high', 'critical').required(),\n    enabled: Joi.boolean().default(true),\n    notification_channels: Joi.array()\n      .items(Joi.string().valid('email', 'sms', 'webhook'))\n      .min(1)\n      .required(),\n    description: Joi.string().max(500).optional()\n  })\n});\n\n/**\n * 报告生成验证模式\n */\nexport const reportGenerationSchema = Joi.object({\n  body: Joi.object({\n    report_type: Joi.string()\n      .valid('energy_consumption', 'carbon_emission', 'battery_performance', 'comprehensive')\n      .required(),\n    start_time: Joi.date().iso().required(),\n    end_time: Joi.date().iso().min(Joi.ref('start_time')).required(),\n    device_ids: Joi.array().items(customValidators.deviceId).optional(),\n    aggregation_level: Joi.string().valid('hourly', 'daily', 'weekly', 'monthly').default('daily'),\n    include_charts: Joi.boolean().default(true),\n    format: Joi.string().valid('pdf', 'excel', 'csv').default('pdf'),\n    email_recipients: Joi.array().items(customValidators.email).optional()\n  })\n});\n\n/**\n * ID参数验证模式\n */\nexport const idParamSchema = Joi.object({\n  params: Joi.object({\n    id: Joi.string()\n      .pattern(/^[0-9]+$/)\n      .required()\n      .messages({\n        'string.pattern.base': 'ID必须是有效的数字'\n      })\n  })\n});\n\n/**\n * 设备ID参数验证模式\n */\nexport const deviceIdParamSchema = Joi.object({\n  params: Joi.object({\n    deviceId: customValidators.deviceId.required()\n  })\n});\n\n/**\n * 文件上传验证\n */\nexport const validateFileUpload =\n  (allowedTypes = [], maxSize = 10 * 1024 * 1024) =>\n    (req, res, next) => {\n      if (!req.file && !req.files) {\n        return next(new ValidationError('未找到上传的文件'));\n      }\n\n      const files = req.files || [req.file];\n\n      for (const file of files) {\n      // 检查文件类型\n        if (allowedTypes.length > 0 && !allowedTypes.includes(file.mimetype)) {\n          return next(\n            new ValidationError(\n              `不支持的文件类型: ${file.mimetype}，支持的类型: ${allowedTypes.join(', ')}`\n            )\n          );\n        }\n\n        // 检查文件大小\n        if (file.size > maxSize) {\n          return next(\n            new ValidationError(`文件大小超过限制: ${file.size} bytes，最大允许: ${maxSize} bytes`)\n          );\n        }\n\n        // 检查文件名\n        if (!/^[a-zA-Z0-9._-]+$/.test(file.originalname)) {\n          return next(new ValidationError('文件名包含非法字符'));\n        }\n      }\n\n      next();\n    };\n\n/**\n * 请求头验证\n */\nexport const validateHeaders =\n  (requiredHeaders = []) =>\n    (req, res, next) => {\n      for (const header of requiredHeaders) {\n        if (!req.headers[header.toLowerCase()]) {\n          return next(new ValidationError(`缺少必需的请求头: ${header}`));\n        }\n      }\n      next();\n    };\n\n/**\n * 内容类型验证\n */\nexport const validateContentType =\n  (allowedTypes = ['application/json']) =>\n    (req, res, next) => {\n      const contentType = req.headers['content-type'];\n\n      if (!contentType) {\n        return next(new ValidationError('缺少Content-Type请求头'));\n      }\n\n      const isAllowed = allowedTypes.some((type) =>\n        contentType.toLowerCase().includes(type.toLowerCase())\n      );\n\n      if (!isAllowed) {\n        return next(\n          new ValidationError(\n            `不支持的Content-Type: ${contentType}，支持的类型: ${allowedTypes.join(', ')}`\n          )\n        );\n      }\n\n      next();\n    };\n\nexport default {\n  validateRequest,\n  energyDataSchema,\n  carbonDataSchema,\n  batteryDataSchema,\n  userRegistrationSchema,\n  userLoginSchema,\n  dataQuerySchema,\n  deviceSchema,\n  alertRuleSchema,\n  reportGenerationSchema,\n  idParamSchema,\n  deviceIdParamSchema,\n  validateFileUpload,\n  validateHeaders,\n  validateContentType\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/recommendationController.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":13,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":17,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":17,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[560,594],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":23,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":23,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":43,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":43,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1115,1149],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":46,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":46,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":62,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":62,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":65,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":65,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1609,1643],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":68,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":68,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":84,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":84,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":89,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":89,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":92,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":92,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2289,2323],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":98,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":98,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":114,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":114,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":119,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":119,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":122,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":122,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3021,3057],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":128,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":128,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":144,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":144,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":147,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":147,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3554,3588],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":150,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":150,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":166,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":166,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":170,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":170,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":176,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":176,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4185,4217],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":177,"column":16,"nodeType":"Literal","messageId":"noMagic","endLine":177,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Recommendation from '../models/recommendation.js';\nimport { validationResult } from 'express-validator';\n\n/**\n * 创建推荐规则\n * @route POST /api/recommendations/rules\n * @access Private\n */\nexport const createRecommendationRule = async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const rule = await Recommendation.createRule(req.body);\n    res.status(201).json({\n      message: '推荐规则创建成功',\n      rule\n    });\n  } catch (error) {\n    console.error('创建推荐规则失败:', error);\n    res.status(500).json({\n      message: '创建推荐规则失败',\n      error: error.message\n    });\n  }\n};\n\n/**\n * 获取所有推荐规则\n * @route GET /api/recommendations/rules\n * @access Private\n */\nexport const getAllRecommendationRules = async (req, res) => {\n  try {\n    const filters = {\n      type: req.query.type,\n      is_active: req.query.is_active !== undefined ? req.query.is_active === 'true' : undefined\n    };\n\n    const rules = await Recommendation.getAllRules(filters);\n    res.status(200).json(rules);\n  } catch (error) {\n    console.error('获取推荐规则失败:', error);\n    res.status(500).json({\n      message: '获取推荐规则失败',\n      error: error.message\n    });\n  }\n};\n\n/**\n * 根据ID获取推荐规则\n * @route GET /api/recommendations/rules/:id\n * @access Private\n */\nexport const getRecommendationRuleById = async (req, res) => {\n  try {\n    const rule = await Recommendation.getRuleById(req.params.id);\n    if (!rule) {\n      return res.status(404).json({ message: '推荐规则不存在' });\n    }\n\n    res.status(200).json(rule);\n  } catch (error) {\n    console.error('获取推荐规则失败:', error);\n    res.status(500).json({\n      message: '获取推荐规则失败',\n      error: error.message\n    });\n  }\n};\n\n/**\n * 更新推荐规则\n * @route PUT /api/recommendations/rules/:id\n * @access Private\n */\nexport const updateRecommendationRule = async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const rule = await Recommendation.updateRule(req.params.id, req.body);\n    if (!rule) {\n      return res.status(404).json({ message: '推荐规则不存在' });\n    }\n\n    res.status(200).json({\n      message: '推荐规则更新成功',\n      rule\n    });\n  } catch (error) {\n    console.error('更新推荐规则失败:', error);\n    res.status(500).json({\n      message: '更新推荐规则失败',\n      error: error.message\n    });\n  }\n};\n\n/**\n * 激活/禁用推荐规则\n * @route PATCH /api/recommendations/rules/:id/status\n * @access Private\n */\nexport const toggleRecommendationRuleStatus = async (req, res) => {\n  try {\n    const { is_active } = req.body;\n    if (is_active === undefined) {\n      return res.status(400).json({ message: '必须提供is_active参数' });\n    }\n\n    const rule = await Recommendation.toggleRuleStatus(req.params.id, is_active);\n    if (!rule) {\n      return res.status(404).json({ message: '推荐规则不存在' });\n    }\n\n    res.status(200).json({\n      message: `推荐规则已${is_active ? '激活' : '禁用'}`,\n      rule\n    });\n  } catch (error) {\n    console.error('更新推荐规则状态失败:', error);\n    res.status(500).json({\n      message: '更新推荐规则状态失败',\n      error: error.message\n    });\n  }\n};\n\n/**\n * 删除推荐规则\n * @route DELETE /api/recommendations/rules/:id\n * @access Private\n */\nexport const deleteRecommendationRule = async (req, res) => {\n  try {\n    const deletedRows = await Recommendation.deleteRule(req.params.id);\n    if (deletedRows === 0) {\n      return res.status(404).json({ message: '推荐规则不存在' });\n    }\n\n    res.status(200).json({ message: '推荐规则删除成功' });\n  } catch (error) {\n    console.error('删除推荐规则失败:', error);\n    res.status(500).json({\n      message: '删除推荐规则失败',\n      error: error.message\n    });\n  }\n};\n\n/**\n * 生成推荐\n * @route POST /api/recommendations/generate\n * @access Private\n */\nexport const generateRecommendations = async (req, res) => {\n  try {\n    const { context } = req.body;\n    if (!context) {\n      return res.status(400).json({ message: '必须提供用户上下文数据' });\n    }\n\n    const recommendations = await Recommendation.generateRecommendations(context);\n    res.status(200).json({\n      message: '推荐生成成功',\n      count: recommendations.length,\n      recommendations\n    });\n  } catch (error) {\n    console.error('生成推荐失败:', error);\n    res.status(500).json({\n      message: '生成推荐失败',\n      error: error.message\n    });\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/routes.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2318,2596],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 主路由文件 - 重构后的模块化版本\n * 整合所有子路由模块\n */\n\nimport express from 'express';\nimport responseFormatter from './middleware/responseFormatter.js';\nimport { authenticate } from './middleware/authMiddleware.js';\n\n// 导入模块化路由\nimport authRoutes from './routes/auth.js';\nimport deviceRoutes from './routes/devices.js';\nimport energyRoutes from './routes/energy.js';\nimport carbonRoutes from './routes/carbon.js';\nimport maintenanceRoutes from './routes/maintenance.js';\nimport digitalTwinRoutes from './routes/digital-twin.js';\n\nconst router = express.Router();\n\n// 应用响应格式化中间件\nrouter.use(responseFormatter);\n\n// API根路径信息\nrouter.get('/', (req, res) => {\n  res.success({\n    message: '零碳园区数字孪生能碳管理系统 API',\n    version: '2.0.0',\n    status: 'running',\n    timestamp: new Date().toISOString(),\n    endpoints: {\n      auth: '/auth',\n      devices: '/devices',\n      energy: '/energy',\n      carbon: '/carbon',\n      maintenance: '/maintenance',\n      digitalTwin: '/digital-twin'\n    }\n  });\n});\n\n// 健康检查端点\nrouter.get('/health', (req, res) => {\n  res.healthCheck({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    memory: process.memoryUsage(),\n    version: '2.0.0'\n  });\n});\n\n// API版本信息\nrouter.get('/version', (req, res) => {\n  res.success({\n    version: '2.0.0',\n    apiVersion: 'v1',\n    buildDate: new Date().toISOString(),\n    features: [\n      'modular-architecture',\n      'enhanced-security',\n      'improved-validation',\n      'better-error-handling',\n      'comprehensive-logging'\n    ]\n  });\n});\n\n// 挂载子路由\nrouter.use('/auth', authRoutes);\nrouter.use('/devices', authenticate, deviceRoutes);\nrouter.use('/energy', authenticate, energyRoutes);\nrouter.use('/carbon', authenticate, carbonRoutes);\nrouter.use('/maintenance', authenticate, maintenanceRoutes);\nrouter.use('/digital-twin', authenticate, digitalTwinRoutes);\n\n// 404处理\nrouter.use('*', (req, res) => {\n  res.notFound('API端点不存在', {\n    requestedPath: req.originalUrl,\n    method: req.method,\n    availableEndpoints: [\n      'GET /',\n      'GET /health',\n      'GET /version',\n      'POST /auth/login',\n      'POST /auth/register',\n      'GET /devices',\n      'GET /energy',\n      'GET /carbon',\n      'GET /maintenance',\n      'GET /digital-twin'\n    ]\n  });\n});\n\n// 全局错误处理中间件\nrouter.use((error, req, res, _next) => {\n  console.error(`[${new Date().toISOString()}] Global Error Handler:`, {\n    error: error.message,\n    stack: error.stack,\n    url: req.url,\n    method: req.method,\n    user: req.user?.username || 'anonymous',\n    body: req.body,\n    params: req.params,\n    query: req.query\n  });\n\n  // 根据错误类型返回相应的响应\n  if (error.name === 'ValidationError') {\n    return res.validationError('数据验证失败', error.details);\n  } else if (error.name === 'UnauthorizedError') {\n    return res.unauthorized(error.message);\n  } else if (error.name === 'ForbiddenError') {\n    return res.forbidden(error.message);\n  } else if (error.name === 'NotFoundError') {\n    return res.notFound(error.message);\n  } else if (error.name === 'ConflictError') {\n    return res.conflict(error.message);\n  } else if (error.name === 'TooManyRequestsError') {\n    return res.tooManyRequests(error.message);\n  } \n  return res.internalError('服务器内部错误', error);\n  \n});\n\nexport default router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/routes/auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/routes/carbon.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/routes/devices.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/routes/digital-twin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/routes/digitalTwin.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":23,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":23,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":23,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":23,"endColumn":28},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":23,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":23,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":70,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":70,"endColumn":58},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3817,3855],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":106,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":106,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":119,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":119,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":124,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":124,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4483,4521],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":130,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":130,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":144,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":144,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 409.","line":158,"column":56,"nodeType":"Literal","messageId":"noMagic","endLine":158,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":163,"column":73,"nodeType":"Literal","messageId":"noMagic","endLine":163,"endColumn":76},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5432,5468],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":166,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":166,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":183,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":183,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":188,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":188,"endColumn":61},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 409.","line":195,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":195,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":209,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":209,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6657,6693],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":210,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":210,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":224,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":224,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":229,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":229,"endColumn":61},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 409.","line":235,"column":62,"nodeType":"Literal","messageId":"noMagic","endLine":235,"endColumn":65},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":242,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":242,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7540,7576],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":243,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":243,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":256,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":256,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":261,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":261,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":268,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":268,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8253,8287],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":269,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":269,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":287,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":287,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":292,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":292,"endColumn":61},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":300,"column":56,"nodeType":"Literal","messageId":"noMagic","endLine":300,"endColumn":59},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":307,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":307,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9354,9386],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":308,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":308,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":322,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":322,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3600.","line":325,"column":63,"nodeType":"Literal","messageId":"noMagic","endLine":325,"endColumn":67},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":325,"column":80,"nodeType":"Literal","messageId":"noMagic","endLine":325,"endColumn":82},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":330,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":330,"endColumn":61},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":334,"column":60,"nodeType":"Literal","messageId":"noMagic","endLine":334,"endColumn":63},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":350,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":350,"endColumn":67},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":352,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":352,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10526,10558],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":353,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":353,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":366,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":366,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":371,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":371,"endColumn":57},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":376,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":376,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11195,11229],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":377,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":377,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":390,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":390,"endColumn":58},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":401,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":401,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11890,11924],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":402,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":402,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":416,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":416,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 201.","line":427,"column":73,"nodeType":"Literal","messageId":"noMagic","endLine":427,"endColumn":76},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":429,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":429,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12598,12632],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":430,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":430,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":443,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":443,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":448,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":448,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":455,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":455,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13321,13357],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":456,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":456,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":476,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":476,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":481,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":481,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":494,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":494,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14477,14509],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":495,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":495,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":507,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":507,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14790,14826],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":508,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":508,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":523,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":523,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":528,"column":58,"nodeType":"Literal","messageId":"noMagic","endLine":528,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":541,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":541,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15873,15907],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":542,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":542,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":67,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const express = require('express');\nconst { body, query, param, validationResult } = require('express-validator');\nconst DigitalTwinModel = require('../../../core/entities/DigitalTwinModel');\nconst Device = require('../../../core/entities/Device');\nconst authMiddleware = require('../middleware/auth');\nconst responseFormatter = require('../middleware/responseFormatter');\nconst { requireRole } = require('../middleware/roleCheck');\n\nconst router = express.Router();\n\n// 应用认证中间件到所有路由\nrouter.use(authMiddleware);\n\n// 常量定义\nconst DIGITAL_TWIN_CONSTANTS = {\n  MAX_MODELS_PER_PAGE: 50,\n  DEFAULT_PAGE_SIZE: 20,\n  MODEL_TYPES: ['building', 'equipment', 'system', 'zone', 'component'],\n  MODEL_STATUS: ['active', 'inactive', 'maintenance', 'error'],\n  SIMULATION_TYPES: ['energy', 'thermal', 'airflow', 'lighting', 'structural'],\n  VIEW_PRESETS: ['overview', 'energy_view', 'maintenance_view', 'security_view', 'custom'],\n  SUPPORTED_FORMATS: ['gltf', 'fbx', 'obj', 'ifc'],\n  MAX_FILE_SIZE: 100 * 1024 * 1024 // 100MB\n};\n\n// 验证规则\nconst digitalTwinValidation = [\n  body('name').notEmpty().withMessage('模型名称不能为空'),\n  body('type').isIn(DIGITAL_TWIN_CONSTANTS.MODEL_TYPES).withMessage('模型类型无效'),\n  body('description').optional().isString().withMessage('描述必须是字符串'),\n  body('modelPath').notEmpty().withMessage('模型路径不能为空'),\n  body('position').optional().isObject().withMessage('位置信息必须是对象'),\n  body('rotation').optional().isObject().withMessage('旋转信息必须是对象'),\n  body('scale').optional().isObject().withMessage('缩放信息必须是对象'),\n  body('metadata').optional().isObject().withMessage('元数据必须是对象')\n];\n\nconst simulationValidation = [\n  body('modelId').isMongoId().withMessage('模型ID格式无效'),\n  body('simulationType').isIn(DIGITAL_TWIN_CONSTANTS.SIMULATION_TYPES).withMessage('仿真类型无效'),\n  body('parameters').isObject().withMessage('参数必须是对象'),\n  body('duration').optional().isNumeric().withMessage('持续时间必须是数字'),\n  body('timeStep').optional().isNumeric().withMessage('时间步长必须是数字')\n];\n\nconst viewPresetValidation = [\n  body('name').notEmpty().withMessage('视图名称不能为空'),\n  body('type').isIn(DIGITAL_TWIN_CONSTANTS.VIEW_PRESETS).withMessage('视图类型无效'),\n  body('cameraPosition').isObject().withMessage('相机位置必须是对象'),\n  body('cameraTarget').isObject().withMessage('相机目标必须是对象'),\n  body('visibleLayers').optional().isArray().withMessage('可见图层必须是数组'),\n  body('settings').optional().isObject().withMessage('设置必须是对象')\n];\n\n// 获取数字孪生模型列表\nrouter.get(\n  '/models',\n  [\n    query('type').optional().isIn(DIGITAL_TWIN_CONSTANTS.MODEL_TYPES).withMessage('模型类型无效'),\n    query('status')\n      .optional()\n      .isIn(DIGITAL_TWIN_CONSTANTS.MODEL_STATUS)\n      .withMessage('模型状态无效'),\n    query('search').optional().isString().withMessage('搜索关键词必须是字符串')\n  ],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const {\n        page = 1,\n        limit = DIGITAL_TWIN_CONSTANTS.DEFAULT_PAGE_SIZE,\n        type,\n        status,\n        search\n      } = req.query;\n\n      const filters = {};\n      if (type) {filters.type = type;}\n      if (status) {filters.status = status;}\n      if (search) {\n        filters.$or = [\n          { name: { $regex: search, $options: 'i' } },\n          { description: { $regex: search, $options: 'i' } }\n        ];\n      }\n\n      const offset = (page - 1) * limit;\n      const models = await DigitalTwinModel.findWithPagination(filters, offset, parseInt(limit));\n      const total = await DigitalTwinModel.countDocuments(filters);\n\n      responseFormatter.success(res, '获取数字孪生模型列表成功', {\n        models,\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      });\n    } catch (error) {\n      console.error('获取数字孪生模型列表错误:', error);\n      responseFormatter.error(res, '获取数字孪生模型列表失败', 500);\n    }\n  }\n);\n\n// 获取单个数字孪生模型详情\nrouter.get(\n  '/models/:id',\n  [param('id').isMongoId().withMessage('模型ID格式无效')],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const model = await DigitalTwinModel.findByIdWithDetails(req.params.id);\n      if (!model) {\n        return responseFormatter.error(res, '数字孪生模型不存在', 404);\n      }\n\n      responseFormatter.success(res, '获取数字孪生模型详情成功', { model });\n    } catch (error) {\n      console.error('获取数字孪生模型详情错误:', error);\n      responseFormatter.error(res, '获取数字孪生模型详情失败', 500);\n    }\n  }\n);\n\n// 创建数字孪生模型\nrouter.post(\n  '/models',\n  requireRole(['admin', 'operator']),\n  digitalTwinValidation,\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const modelData = {\n        ...req.body,\n        status: 'active',\n        createdBy: req.user.userId,\n        createdAt: new Date(),\n        version: '1.0.0'\n      };\n\n      // 检查模型名称是否已存在\n      const existingModel = await DigitalTwinModel.findByName(modelData.name);\n      if (existingModel) {\n        return responseFormatter.error(res, '模型名称已存在', 409);\n      }\n\n      const newModel = await DigitalTwinModel.create(modelData);\n\n      responseFormatter.success(res, '数字孪生模型创建成功', { model: newModel }, 201);\n    } catch (error) {\n      console.error('创建数字孪生模型错误:', error);\n      responseFormatter.error(res, '创建数字孪生模型失败', 500);\n    }\n  }\n);\n\n// 更新数字孪生模型\nrouter.put(\n  '/models/:id',\n  requireRole(['admin', 'operator']),\n  [\n    param('id').isMongoId().withMessage('模型ID格式无效'),\n    ...digitalTwinValidation.map((rule) => rule.optional())\n  ],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const model = await DigitalTwinModel.findById(req.params.id);\n      if (!model) {\n        return responseFormatter.error(res, '数字孪生模型不存在', 404);\n      }\n\n      // 如果更新模型名称，检查是否重复\n      if (req.body.name && req.body.name !== model.name) {\n        const existingModel = await DigitalTwinModel.findByName(req.body.name);\n        if (existingModel) {\n          return responseFormatter.error(res, '模型名称已存在', 409);\n        }\n      }\n\n      const updateData = {\n        ...req.body,\n        updatedBy: req.user.userId,\n        updatedAt: new Date()\n      };\n\n      const updatedModel = await model.update(updateData);\n\n      responseFormatter.success(res, '数字孪生模型更新成功', { model: updatedModel });\n    } catch (error) {\n      console.error('更新数字孪生模型错误:', error);\n      responseFormatter.error(res, '更新数字孪生模型失败', 500);\n    }\n  }\n);\n\n// 删除数字孪生模型\nrouter.delete(\n  '/models/:id',\n  requireRole(['admin']),\n  [param('id').isMongoId().withMessage('模型ID格式无效')],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const model = await DigitalTwinModel.findById(req.params.id);\n      if (!model) {\n        return responseFormatter.error(res, '数字孪生模型不存在', 404);\n      }\n\n      // 检查模型是否有关联的设备或仿真\n      const hasAssociations = await model.hasAssociations();\n      if (hasAssociations) {\n        return responseFormatter.error(res, '模型存在关联数据，无法删除', 409);\n      }\n\n      await model.delete();\n\n      responseFormatter.success(res, '数字孪生模型删除成功');\n    } catch (error) {\n      console.error('删除数字孪生模型错误:', error);\n      responseFormatter.error(res, '删除数字孪生模型失败', 500);\n    }\n  }\n);\n\n// 获取模型关联的设备\nrouter.get(\n  '/models/:id/devices',\n  [param('id').isMongoId().withMessage('模型ID格式无效')],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const model = await DigitalTwinModel.findById(req.params.id);\n      if (!model) {\n        return responseFormatter.error(res, '数字孪生模型不存在', 404);\n      }\n\n      const devices = await model.getAssociatedDevices();\n\n      responseFormatter.success(res, '获取关联设备成功', { devices });\n    } catch (error) {\n      console.error('获取关联设备错误:', error);\n      responseFormatter.error(res, '获取关联设备失败', 500);\n    }\n  }\n);\n\n// 关联设备到模型\nrouter.post(\n  '/models/:id/devices',\n  requireRole(['admin', 'operator']),\n  [\n    param('id').isMongoId().withMessage('模型ID格式无效'),\n    body('deviceIds').isArray().withMessage('设备ID列表必须是数组'),\n    body('deviceIds.*').isMongoId().withMessage('设备ID格式无效')\n  ],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const model = await DigitalTwinModel.findById(req.params.id);\n      if (!model) {\n        return responseFormatter.error(res, '数字孪生模型不存在', 404);\n      }\n\n      const { deviceIds } = req.body;\n\n      // 验证所有设备是否存在\n      const devices = await Device.findByIds(deviceIds);\n      if (devices.length !== deviceIds.length) {\n        return responseFormatter.error(res, '部分设备不存在', 404);\n      }\n\n      await model.associateDevices(deviceIds, req.user.userId);\n\n      responseFormatter.success(res, '设备关联成功');\n    } catch (error) {\n      console.error('关联设备错误:', error);\n      responseFormatter.error(res, '关联设备失败', 500);\n    }\n  }\n);\n\n// 运行仿真\nrouter.post(\n  '/simulations',\n  requireRole(['admin', 'operator']),\n  simulationValidation,\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const { modelId, simulationType, parameters, duration = 3600, timeStep = 60 } = req.body;\n\n      // 验证模型是否存在\n      const model = await DigitalTwinModel.findById(modelId);\n      if (!model) {\n        return responseFormatter.error(res, '数字孪生模型不存在', 404);\n      }\n\n      if (model.status !== 'active') {\n        return responseFormatter.error(res, '模型状态不允许运行仿真', 400);\n      }\n\n      const simulationData = {\n        modelId,\n        simulationType,\n        parameters,\n        duration,\n        timeStep,\n        status: 'running',\n        startedBy: req.user.userId,\n        startedAt: new Date()\n      };\n\n      const simulation = await model.runSimulation(simulationData);\n\n      responseFormatter.success(res, '仿真启动成功', { simulation }, 201);\n    } catch (error) {\n      console.error('运行仿真错误:', error);\n      responseFormatter.error(res, '运行仿真失败', 500);\n    }\n  }\n);\n\n// 获取仿真结果\nrouter.get(\n  '/simulations/:id/results',\n  [param('id').isMongoId().withMessage('仿真ID格式无效')],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const simulation = await DigitalTwinModel.getSimulationResults(req.params.id);\n      if (!simulation) {\n        return responseFormatter.error(res, '仿真不存在', 404);\n      }\n\n      responseFormatter.success(res, '获取仿真结果成功', { simulation });\n    } catch (error) {\n      console.error('获取仿真结果错误:', error);\n      responseFormatter.error(res, '获取仿真结果失败', 500);\n    }\n  }\n);\n\n// 获取视图预设列表\nrouter.get(\n  '/view-presets',\n  [query('type').optional().isIn(DIGITAL_TWIN_CONSTANTS.VIEW_PRESETS).withMessage('视图类型无效')],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const { type } = req.query;\n      const filters = {};\n      if (type) {filters.type = type;}\n\n      const presets = await DigitalTwinModel.getViewPresets(filters);\n\n      responseFormatter.success(res, '获取视图预设成功', { presets });\n    } catch (error) {\n      console.error('获取视图预设错误:', error);\n      responseFormatter.error(res, '获取视图预设失败', 500);\n    }\n  }\n);\n\n// 创建视图预设\nrouter.post(\n  '/view-presets',\n  requireRole(['admin', 'operator']),\n  viewPresetValidation,\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const presetData = {\n        ...req.body,\n        createdBy: req.user.userId,\n        createdAt: new Date()\n      };\n\n      const newPreset = await DigitalTwinModel.createViewPreset(presetData);\n\n      responseFormatter.success(res, '视图预设创建成功', { preset: newPreset }, 201);\n    } catch (error) {\n      console.error('创建视图预设错误:', error);\n      responseFormatter.error(res, '创建视图预设失败', 500);\n    }\n  }\n);\n\n// 获取模型性能统计\nrouter.get(\n  '/models/:id/performance',\n  [param('id').isMongoId().withMessage('模型ID格式无效')],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const model = await DigitalTwinModel.findById(req.params.id);\n      if (!model) {\n        return responseFormatter.error(res, '数字孪生模型不存在', 404);\n      }\n\n      const performance = await model.getPerformanceMetrics();\n\n      responseFormatter.success(res, '获取模型性能统计成功', { performance });\n    } catch (error) {\n      console.error('获取模型性能统计错误:', error);\n      responseFormatter.error(res, '获取模型性能统计失败', 500);\n    }\n  }\n);\n\n// 优化模型\nrouter.post(\n  '/models/:id/optimize',\n  requireRole(['admin', 'operator']),\n  [\n    param('id').isMongoId().withMessage('模型ID格式无效'),\n    body('optimizationType')\n      .isIn(['lod', 'texture', 'geometry', 'all'])\n      .withMessage('优化类型无效'),\n    body('targetQuality').optional().isIn(['low', 'medium', 'high']).withMessage('目标质量无效')\n  ],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const model = await DigitalTwinModel.findById(req.params.id);\n      if (!model) {\n        return responseFormatter.error(res, '数字孪生模型不存在', 404);\n      }\n\n      const { optimizationType, targetQuality = 'medium' } = req.body;\n\n      const optimizationResult = await model.optimize({\n        type: optimizationType,\n        quality: targetQuality,\n        optimizedBy: req.user.userId\n      });\n\n      responseFormatter.success(res, '模型优化完成', { result: optimizationResult });\n    } catch (error) {\n      console.error('优化模型错误:', error);\n      responseFormatter.error(res, '优化模型失败', 500);\n    }\n  }\n);\n\n// 获取模型统计数据\nrouter.get('/stats/summary', async (req, res) => {\n  try {\n    const stats = await DigitalTwinModel.getStatistics();\n\n    responseFormatter.success(res, '获取模型统计数据成功', { stats });\n  } catch (error) {\n    console.error('获取模型统计数据错误:', error);\n    responseFormatter.error(res, '获取模型统计数据失败', 500);\n  }\n});\n\n// 导出模型配置\nrouter.get(\n  '/models/:id/export',\n  [\n    param('id').isMongoId().withMessage('模型ID格式无效'),\n    query('format').optional().isIn(['json', 'xml']).withMessage('导出格式无效')\n  ],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return responseFormatter.error(res, '输入验证失败', 400, errors.array());\n      }\n\n      const model = await DigitalTwinModel.findById(req.params.id);\n      if (!model) {\n        return responseFormatter.error(res, '数字孪生模型不存在', 404);\n      }\n\n      const { format = 'json' } = req.query;\n      const exportData = await model.exportConfiguration(format);\n\n      const contentType = format === 'xml' ? 'application/xml' : 'application/json';\n      const filename = `model-${model.name}-config.${format}`;\n\n      res.setHeader('Content-Type', contentType);\n      res.setHeader('Content-Disposition', `attachment; filename=${filename}`);\n      res.send(exportData);\n    } catch (error) {\n      console.error('导出模型配置错误:', error);\n      responseFormatter.error(res, '导出模型配置失败', 500);\n    }\n  }\n);\n\nmodule.exports = router;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/routes/energy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/routes/maintenance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/interfaces/http/validators/commonValidators.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 255.","line":132,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":132,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":141,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":141,"endColumn":48},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 4102444800000.","line":227,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":227,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":234,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":234,"endColumn":33},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":234,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":234,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":234,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":234,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":237,"column":60,"nodeType":"Literal","messageId":"noMagic","endLine":237,"endColumn":64},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":237,"column":67,"nodeType":"Literal","messageId":"noMagic","endLine":237,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 通用验证器\n * 提供常用的数据验证规则和自定义验证器\n */\n\nconst { body, param, query, validationResult } = require('express-validator');\nconst responseFormatter = require('../middleware/responseFormatter');\n\n// 常用正则表达式\nconst REGEX_PATTERNS = {\n  // 用户名：3-20位字母数字下划线\n  USERNAME: /^[a-zA-Z0-9_]{3,20}$/,\n  // 密码：至少8位，包含字母和数字\n  PASSWORD: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*#?&]{8,}$/,\n  // 邮箱\n  EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  // 手机号（中国）\n  PHONE: /^1[3-9]\\d{9}$/,\n  // IPv4地址\n  IPV4: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n  // MAC地址\n  MAC: /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/,\n  // 设备序列号\n  DEVICE_SERIAL: /^[A-Z0-9]{8,20}$/,\n  // 版本号\n  VERSION: /^\\d+\\.\\d+\\.\\d+$/\n};\n\n// 常用验证规则\nconst VALIDATION_RULES = {\n  // ID验证\n  id: param('id').isInt({ min: 1 }).withMessage('ID必须是正整数'),\n\n  // UUID验证\n  uuid: param('id').isUUID().withMessage('ID必须是有效的UUID'),\n\n  // 分页参数验证\n  pagination: [\n    query('page').optional().isInt({ min: 1 }).withMessage('页码必须是正整数').toInt(),\n    query('limit')\n      .optional()\n      .isInt({ min: 1, max: 100 })\n      .withMessage('每页数量必须在1-100之间')\n      .toInt(),\n    query('offset').optional().isInt({ min: 0 }).withMessage('偏移量必须是非负整数').toInt()\n  ],\n\n  // 排序参数验证\n  sorting: [\n    query('sortBy')\n      .optional()\n      .isString()\n      .isLength({ min: 1, max: 50 })\n      .withMessage('排序字段长度必须在1-50之间'),\n    query('sortOrder')\n      .optional()\n      .isIn(['asc', 'desc', 'ASC', 'DESC'])\n      .withMessage('排序方向必须是asc或desc')\n  ],\n\n  // 日期范围验证\n  dateRange: [\n    query('startDate').optional().isISO8601().withMessage('开始日期格式无效').toDate(),\n    query('endDate')\n      .optional()\n      .isISO8601()\n      .withMessage('结束日期格式无效')\n      .toDate()\n      .custom((value, { req }) => {\n        if (req.query.startDate && value < new Date(req.query.startDate)) {\n          throw new Error('结束日期不能早于开始日期');\n        }\n        return true;\n      })\n  ],\n\n  // 搜索参数验证\n  search: [\n    query('keyword')\n      .optional()\n      .isString()\n      .isLength({ min: 1, max: 100 })\n      .withMessage('搜索关键词长度必须在1-100之间')\n      .trim()\n      .escape(),\n    query('searchFields').optional().isString().withMessage('搜索字段必须是字符串')\n  ],\n\n  // 用户名验证\n  username: body('username')\n    .matches(REGEX_PATTERNS.USERNAME)\n    .withMessage('用户名必须是3-20位字母、数字或下划线'),\n\n  // 密码验证\n  password: body('password')\n    .matches(REGEX_PATTERNS.PASSWORD)\n    .withMessage('密码至少8位，必须包含字母和数字'),\n\n  // 邮箱验证\n  email: body('email').isEmail().normalizeEmail().withMessage('邮箱格式无效'),\n\n  // 手机号验证\n  phone: body('phone').optional().matches(REGEX_PATTERNS.PHONE).withMessage('手机号格式无效'),\n\n  // 角色验证\n  role: body('role')\n    .isIn(['admin', 'operator', 'user', 'guest'])\n    .withMessage('角色必须是admin、operator、user或guest之一'),\n\n  // 状态验证\n  status: body('status')\n    .isIn(['active', 'inactive', 'pending', 'suspended'])\n    .withMessage('状态必须是active、inactive、pending或suspended之一'),\n\n  // 布尔值验证\n  boolean: (field) => body(field).isBoolean().withMessage(`${field}必须是布尔值`).toBoolean(),\n\n  // 数字验证\n  number: (field, min = 0, max = Number.MAX_SAFE_INTEGER) =>\n    body(field)\n      .isNumeric()\n      .withMessage(`${field}必须是数字`)\n      .isFloat({ min, max })\n      .withMessage(`${field}必须在${min}-${max}之间`)\n      .toFloat(),\n\n  // 整数验证\n  integer: (field, min = 0, max = Number.MAX_SAFE_INTEGER) =>\n    body(field).isInt({ min, max }).withMessage(`${field}必须是${min}-${max}之间的整数`).toInt(),\n\n  // 字符串验证\n  string: (field, minLength = 1, maxLength = 255) =>\n    body(field)\n      .isString()\n      .withMessage(`${field}必须是字符串`)\n      .isLength({ min: minLength, max: maxLength })\n      .withMessage(`${field}长度必须在${minLength}-${maxLength}之间`)\n      .trim(),\n\n  // 数组验证\n  array: (field, minLength = 0, maxLength = 100) =>\n    body(field)\n      .isArray({ min: minLength, max: maxLength })\n      .withMessage(`${field}必须是包含${minLength}-${maxLength}个元素的数组`),\n\n  // JSON验证\n  json: (field) =>\n    body(field).custom((value) => {\n      try {\n        JSON.parse(typeof value === 'string' ? value : JSON.stringify(value));\n        return true;\n      } catch (error) {\n        throw new Error(`${field}必须是有效的JSON格式`);\n      }\n    })\n};\n\n// 自定义验证器\nconst CUSTOM_VALIDATORS = {\n  // 验证设备序列号\n  deviceSerial: body('serialNumber')\n    .matches(REGEX_PATTERNS.DEVICE_SERIAL)\n    .withMessage('设备序列号格式无效'),\n\n  // 验证IP地址\n  ipAddress: (field) =>\n    body(field).matches(REGEX_PATTERNS.IPV4).withMessage(`${field}必须是有效的IPv4地址`),\n\n  // 验证MAC地址\n  macAddress: (field) =>\n    body(field).matches(REGEX_PATTERNS.MAC).withMessage(`${field}必须是有效的MAC地址`),\n\n  // 验证版本号\n  version: (field) =>\n    body(field)\n      .matches(REGEX_PATTERNS.VERSION)\n      .withMessage(`${field}必须是有效的版本号格式（如1.0.0）`),\n\n  // 验证能耗值\n  energyValue: body('value').isFloat({ min: 0 }).withMessage('能耗值必须是非负数').toFloat(),\n\n  // 验证碳排放因子\n  carbonFactor: body('factor')\n    .isFloat({ min: 0, max: 10 })\n    .withMessage('碳排放因子必须在0-10之间')\n    .toFloat(),\n\n  // 验证温度值\n  temperature: (field) =>\n    body(field)\n      .isFloat({ min: -273.15, max: 1000 })\n      .withMessage(`${field}必须是有效的温度值（-273.15°C到1000°C）`)\n      .toFloat(),\n\n  // 验证湿度值\n  humidity: (field) =>\n    body(field)\n      .isFloat({ min: 0, max: 100 })\n      .withMessage(`${field}必须是0-100之间的湿度值`)\n      .toFloat(),\n\n  // 验证功率值\n  power: (field) =>\n    body(field).isFloat({ min: 0 }).withMessage(`${field}必须是非负的功率值`).toFloat(),\n\n  // 验证经纬度\n  latitude: (field) =>\n    body(field)\n      .isFloat({ min: -90, max: 90 })\n      .withMessage(`${field}必须是有效的纬度值（-90到90）`)\n      .toFloat(),\n\n  longitude: (field) =>\n    body(field)\n      .isFloat({ min: -180, max: 180 })\n      .withMessage(`${field}必须是有效的经度值（-180到180）`)\n      .toFloat(),\n\n  // 验证时间戳\n  timestamp: (field) =>\n    body(field).custom((value) => {\n      const timestamp = new Date(value).getTime();\n      if (isNaN(timestamp)) {\n        throw new Error(`${field}必须是有效的时间戳`);\n      }\n      // 检查时间戳是否在合理范围内（1970年到2100年）\n      if (timestamp < 0 || timestamp > 4102444800000) {\n        throw new Error(`${field}时间戳超出有效范围`);\n      }\n      return true;\n    }),\n\n  // 验证文件大小（字节）\n  fileSize: (field, maxSize = 10 * 1024 * 1024) =>\n    body(field)\n      .isInt({ min: 0, max: maxSize })\n      .withMessage(`${field}文件大小不能超过${Math.round(maxSize / 1024 / 1024)}MB`)\n      .toInt(),\n\n  // 验证颜色值（十六进制）\n  hexColor: (field) =>\n    body(field)\n      .matches(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)\n      .withMessage(`${field}必须是有效的十六进制颜色值`),\n\n  // 验证URL\n  url: (field) =>\n    body(field)\n      .isURL({\n        protocols: ['http', 'https'],\n        require_protocol: true\n      })\n      .withMessage(`${field}必须是有效的URL地址`),\n\n  // 验证设备类型\n  deviceType: body('type')\n    .isIn(['sensor', 'actuator', 'controller', 'gateway', 'meter', 'camera', 'other'])\n    .withMessage('设备类型必须是sensor、actuator、controller、gateway、meter、camera或other之一'),\n\n  // 验证能源类型\n  energyType: body('energyType')\n    .isIn(['electricity', 'gas', 'water', 'steam', 'coal', 'oil', 'solar', 'wind', 'other'])\n    .withMessage('能源类型无效'),\n\n  // 验证单位\n  unit: body('unit')\n    .isIn(['kWh', 'MWh', 'GWh', 'm³', 'L', 'kg', 't', 'J', 'kJ', 'MJ', 'GJ'])\n    .withMessage('单位无效'),\n\n  // 验证优先级\n  priority: body('priority')\n    .isIn(['low', 'medium', 'high', 'critical'])\n    .withMessage('优先级必须是low、medium、high或critical之一'),\n\n  // 验证维护类型\n  maintenanceType: body('type')\n    .isIn(['preventive', 'corrective', 'predictive', 'emergency'])\n    .withMessage('维护类型必须是preventive、corrective、predictive或emergency之一')\n};\n\n/**\n * 验证结果处理中间件\n * 检查验证结果，如果有错误则返回错误响应\n */\nfunction handleValidationErrors(req, res, next) {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    const formattedErrors = errors.array().map((error) => ({\n      field: error.param,\n      message: error.msg,\n      value: error.value,\n      location: error.location\n    }));\n\n    return responseFormatter.validationError(res, '数据验证失败', formattedErrors);\n  }\n\n  next();\n}\n\n/**\n * 创建验证链\n * @param {Array} validators - 验证器数组\n * @returns {Array} 包含验证器和错误处理的完整验证链\n */\nfunction createValidationChain(validators) {\n  return [...validators, handleValidationErrors];\n}\n\n/**\n * 条件验证\n * @param {Function} condition - 条件函数\n * @param {Array} validators - 当条件为真时应用的验证器\n * @returns {Function} 条件验证中间件\n */\nfunction conditionalValidation(condition, validators) {\n  const runNext = function(req, res, next, validationChain, index) {\n    if (index >= validationChain.length) {\n      return next();\n    }\n\n    const validator = validationChain[index];\n    validator(req, res, () => runNext(req, res, next, validationChain, index + 1));\n  };\n\n  return (req, res, next) => {\n    if (condition(req)) {\n      // 应用验证器\n      const validationChain = createValidationChain(validators);\n      runNext(req, res, next, validationChain, 0);\n    } else {\n      next();\n    }\n  };\n}\n\n/**\n * 批量验证\n * @param {Object} validationRules - 验证规则对象\n * @returns {Array} 验证器数组\n */\nfunction batchValidation(validationRules) {\n  const validators = [];\n\n  for (const [_field, rules] of Object.entries(validationRules)) {\n    if (Array.isArray(rules)) {\n      validators.push(...rules);\n    } else {\n      validators.push(rules);\n    }\n  }\n\n  return createValidationChain(validators);\n}\n\n/**\n * 自定义验证器工厂\n * @param {Function} validatorFn - 验证函数\n * @param {string} errorMessage - 错误消息\n * @returns {Function} 自定义验证器\n */\nfunction customValidator(validatorFn, errorMessage) {\n  return (field) => body(field).custom(validatorFn).withMessage(errorMessage);\n}\n\nmodule.exports = {\n  REGEX_PATTERNS,\n  VALIDATION_RULES,\n  CUSTOM_VALIDATORS,\n  handleValidationErrors,\n  createValidationChain,\n  conditionalValidation,\n  batchValidation,\n  customValidator\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/cache/CacheManager.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":100,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":100,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 300.","line":240,"column":10,"nodeType":"Literal","messageId":"noMagic","endLine":240,"endColumn":13},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60000.","line":284,"column":4,"nodeType":"Literal","messageId":"noMagic","endLine":284,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import logger from '../utils/logger.js';\n\n/**\n * 缓存管理器\n * 支持内存缓存和Redis缓存\n */\nclass CacheManager {\n  constructor() {\n    this.memoryCache = new Map();\n    this.redisClient = null;\n    this.defaultTTL = 3600; // 默认1小时\n    this.maxMemoryItems = 1000; // 内存缓存最大条目数\n\n    this.initializeRedis();\n  }\n\n  /**\n   * 初始化Redis连接\n   */\n  async initializeRedis() {\n    try {\n      // 尝试导入Redis客户端\n      const redisClient = await import('../../database/redisClient.js');\n      this.redisClient = redisClient.default;\n      logger.info('Redis缓存已启用');\n    } catch (error) {\n      logger.warn('Redis不可用，使用内存缓存', { error: error.message });\n    }\n  }\n\n  /**\n   * 获取缓存值\n   * @param {string} key - 缓存键\n   * @returns {Promise<any>} 缓存值\n   */\n  async get(key) {\n    try {\n      // 优先使用Redis\n      if (this.redisClient) {\n        const value = await this.redisClient.get(key);\n        if (value !== null) {\n          return JSON.parse(value);\n        }\n      }\n\n      // 回退到内存缓存\n      const memoryItem = this.memoryCache.get(key);\n      if (memoryItem) {\n        // 检查是否过期\n        if (Date.now() < memoryItem.expiry) {\n          return memoryItem.value;\n        }\n        this.memoryCache.delete(key);\n      }\n\n      return null;\n    } catch (error) {\n      logger.error('缓存获取失败', { key, error: error.message });\n      return null;\n    }\n  }\n\n  /**\n   * 设置缓存值\n   * @param {string} key - 缓存键\n   * @param {any} value - 缓存值\n   * @param {number} ttl - 过期时间（秒）\n   */\n  async set(key, value, ttl = this.defaultTTL) {\n    try {\n      const serializedValue = JSON.stringify(value);\n\n      // 使用Redis\n      if (this.redisClient) {\n        await this.redisClient.setex(key, ttl, serializedValue);\n      }\n\n      // 同时存储到内存缓存\n      this.setMemoryCache(key, value, ttl);\n\n      logger.debug('缓存设置成功', { key, ttl });\n    } catch (error) {\n      logger.error('缓存设置失败', { key, error: error.message });\n    }\n  }\n\n  /**\n   * 设置内存缓存\n   * @param {string} key - 缓存键\n   * @param {any} value - 缓存值\n   * @param {number} ttl - 过期时间（秒）\n   */\n  setMemoryCache(key, value, ttl) {\n    // 如果内存缓存已满，删除最旧的条目\n    if (this.memoryCache.size >= this.maxMemoryItems) {\n      const firstKey = this.memoryCache.keys().next().value;\n      this.memoryCache.delete(firstKey);\n    }\n\n    const expiry = Date.now() + ttl * 1000;\n    this.memoryCache.set(key, { value, expiry });\n  }\n\n  /**\n   * 删除缓存\n   * @param {string} key - 缓存键\n   */\n  async delete(key) {\n    try {\n      if (this.redisClient) {\n        await this.redisClient.del(key);\n      }\n      this.memoryCache.delete(key);\n      logger.debug('缓存删除成功', { key });\n    } catch (error) {\n      logger.error('缓存删除失败', { key, error: error.message });\n    }\n  }\n\n  /**\n   * 批量删除缓存（支持模式匹配）\n   * @param {string} pattern - 匹配模式\n   */\n  async invalidate(pattern) {\n    try {\n      if (this.redisClient) {\n        const keys = await this.redisClient.keys(pattern);\n        if (keys.length > 0) {\n          await this.redisClient.del(...keys);\n        }\n      }\n\n      // 清理内存缓存\n      const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n      for (const key of this.memoryCache.keys()) {\n        if (regex.test(key)) {\n          this.memoryCache.delete(key);\n        }\n      }\n\n      logger.debug('缓存批量删除成功', { pattern });\n    } catch (error) {\n      logger.error('缓存批量删除失败', { pattern, error: error.message });\n    }\n  }\n\n  /**\n   * 清空所有缓存\n   */\n  async clear() {\n    try {\n      if (this.redisClient) {\n        await this.redisClient.flushdb();\n      }\n      this.memoryCache.clear();\n      logger.info('所有缓存已清空');\n    } catch (error) {\n      logger.error('清空缓存失败', { error: error.message });\n    }\n  }\n\n  /**\n   * 获取缓存统计信息\n   */\n  async getStats() {\n    const stats = {\n      memoryCache: {\n        size: this.memoryCache.size,\n        maxSize: this.maxMemoryItems\n      },\n      redis: {\n        connected: !!this.redisClient\n      }\n    };\n\n    if (this.redisClient) {\n      try {\n        const info = await this.redisClient.info('memory');\n        stats.redis.memory = info;\n      } catch (error) {\n        logger.warn('获取Redis统计信息失败', { error: error.message });\n      }\n    }\n\n    return stats;\n  }\n\n  /**\n   * 缓存装饰器\n   * @param {string} keyPrefix - 缓存键前缀\n   * @param {number} ttl - 过期时间\n   * @returns {Function} 装饰器函数\n   */\n  cached(keyPrefix, ttl = this.defaultTTL) {\n    return (target, propertyName, descriptor) => {\n      const originalMethod = descriptor.value;\n\n      descriptor.value = async function (...args) {\n        const cacheKey = `${keyPrefix}:${JSON.stringify(args)}`;\n\n        // 尝试从缓存获取\n        const cachedResult = await this.get(cacheKey);\n        if (cachedResult !== null) {\n          return cachedResult;\n        }\n\n        // 执行原方法\n        const result = await originalMethod.apply(this, args);\n\n        // 存储到缓存\n        await this.set(cacheKey, result, ttl);\n\n        return result;\n      }.bind(this);\n\n      return descriptor;\n    };\n  }\n\n  /**\n   * 清理过期的内存缓存\n   */\n  cleanupExpiredMemoryCache() {\n    const now = Date.now();\n    for (const [key, item] of this.memoryCache.entries()) {\n      if (now >= item.expiry) {\n        this.memoryCache.delete(key);\n      }\n    }\n  }\n}\n\n/**\n * 缓存中间件工厂\n * @param {number} ttl - 缓存时间（秒）\n * @param {Function} keyGenerator - 缓存键生成函数\n * @returns {Function} Express中间件\n */\nconst createCacheMiddleware =\n  (ttl = 300, keyGenerator = null) =>\n    async (req, res, next) => {\n      try {\n      // 生成缓存键\n        const cacheKey = keyGenerator\n          ? keyGenerator(req)\n          : `api:${req.method}:${req.originalUrl}:${JSON.stringify(req.query)}`;\n\n        // 尝试从缓存获取\n        const cachedData = await cacheManager.get(cacheKey);\n        if (cachedData) {\n          return res.json({\n            success: true,\n            data: cachedData,\n            cached: true,\n            timestamp: new Date().toISOString()\n          });\n        }\n\n        // 重写res.json方法以缓存响应\n        const originalJson = res.json;\n        res.json = function (data) {\n        // 只缓存成功的响应\n          if (data.success !== false) {\n            cacheManager.set(cacheKey, data, ttl).catch((error) => {\n              logger.error('缓存响应失败', { cacheKey, error: error.message });\n            });\n          }\n          return originalJson.call(this, data);\n        };\n\n        next();\n      } catch (error) {\n        logger.error('缓存中间件错误', { error: error.message });\n        next();\n      }\n    };\n\n// 创建全局缓存管理器实例\nconst cacheManager = new CacheManager();\n\n// 定期清理过期的内存缓存\nsetInterval(() => {\n  cacheManager.cleanupExpiredMemoryCache();\n}, 60000); // 每分钟清理一次\n\nexport { CacheManager, createCacheMiddleware, cacheManager };\n\nexport default cacheManager;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/config/cache.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":10,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":10,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[321,364],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[513,544],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import redis from 'redis';\n\n// 创建Redis客户端\nconst redisClient = redis.createClient({\n  host: process.env.REDIS_HOST || 'localhost',\n  port: process.env.REDIS_PORT || 6379,\n  password: process.env.REDIS_PASSWORD || '',\n  retry_strategy: (options) => {\n    if (options.error && options.error.code === 'ECONNREFUSED') {\n      console.error('Redis连接被拒绝，请检查Redis服务是否运行');\n      return 5000; // 5秒后重试\n    }\n    return Math.min(options.attempt * 100, 3000); // 指数退避策略\n  }\n});\n\n// 错误处理\nredisClient.on('error', (err) => {\n  console.error('Redis错误:', err);\n});\n\n// 导出Redis客户端和常用方法\nexport default {\n  redisClient,\n  get: (key) => redisClient.get(key),\n  set: (key, value) => redisClient.set(key, value),\n  setAsync: (key, value) => redisClient.set(key, value),\n  del: (key) => redisClient.del(key),\n  expire: (key, ttl) => redisClient.expire(key, ttl),\n  expireAsync: (key, ttl) => redisClient.expire(key, ttl),\n  // 默认缓存时间：5分钟\n  DEFAULT_TTL: 300,\n  // 长时缓存时间：1小时\n  LONG_TTL: 3600,\n  // 短期缓存时间：30秒\n  SHORT_TTL: 30\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/config/index.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":315,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":315,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9792,9845],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 配置管理模块\n * 提供集中化的配置管理、验证和类型转换\n */\n\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// 加载环境变量\nconst envFile = process.env.NODE_ENV === 'production' ? '.env.prod' : '.env';\nconst envPath = path.resolve(__dirname, '../../../', envFile);\ndotenv.config({ path: envPath });\n\n/**\n * 配置验证和类型转换工具\n */\nclass ConfigValidator {\n  /**\n   * 获取字符串配置\n   */\n  static getString(key, defaultValue = null, required = false) {\n    const value = process.env[key];\n\n    if (!value) {\n      if (required) {\n        throw new Error(`必需的配置项 ${key} 未设置`);\n      }\n      return defaultValue;\n    }\n\n    return value;\n  }\n\n  /**\n   * 获取数字配置\n   */\n  static getNumber(key, defaultValue = null, required = false) {\n    const value = process.env[key];\n\n    if (!value) {\n      if (required) {\n        throw new Error(`必需的配置项 ${key} 未设置`);\n      }\n      return defaultValue;\n    }\n\n    const numValue = Number(value);\n    if (isNaN(numValue)) {\n      throw new Error(`配置项 ${key} 必须是有效的数字，当前值: ${value}`);\n    }\n\n    return numValue;\n  }\n\n  /**\n   * 获取布尔配置\n   */\n  static getBoolean(key, defaultValue = false, required = false) {\n    const value = process.env[key];\n\n    if (!value) {\n      if (required) {\n        throw new Error(`必需的配置项 ${key} 未设置`);\n      }\n      return defaultValue;\n    }\n\n    return value.toLowerCase() === 'true' || value === '1';\n  }\n\n  /**\n   * 获取数组配置（逗号分隔）\n   */\n  static getArray(key, defaultValue = [], required = false) {\n    const value = process.env[key];\n\n    if (!value) {\n      if (required) {\n        throw new Error(`必需的配置项 ${key} 未设置`);\n      }\n      return defaultValue;\n    }\n\n    return value\n      .split(',')\n      .map((item) => item.trim())\n      .filter((item) => item);\n  }\n\n  /**\n   * 验证枚举值\n   */\n  static getEnum(key, validValues, defaultValue = null, required = false) {\n    const value = this.getString(key, defaultValue, required);\n\n    if (value && !validValues.includes(value)) {\n      throw new Error(`配置项 ${key} 的值 ${value} 无效，有效值: ${validValues.join(', ')}`);\n    }\n\n    return value;\n  }\n\n  /**\n   * 验证URL格式\n   */\n  static getUrl(key, defaultValue = null, required = false) {\n    const value = this.getString(key, defaultValue, required);\n\n    if (value) {\n      try {\n        new URL(value);\n      } catch (error) {\n        throw new Error(`配置项 ${key} 必须是有效的URL，当前值: ${value}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * 验证文件路径\n   */\n  static getPath(key, defaultValue = null, required = false) {\n    const value = this.getString(key, defaultValue, required);\n\n    if (value && !path.isAbsolute(value)) {\n      // 如果是相对路径，转换为绝对路径（相对于项目根目录）\n      return path.resolve(__dirname, '../../../', value);\n    }\n\n    return value;\n  }\n}\n\n/**\n * 应用程序配置\n */\nconst config = {\n  // 应用程序基本配置\n  app: {\n    name: ConfigValidator.getString('APP_NAME', '零碳园区数字孪生能碳管理系统'),\n    version: ConfigValidator.getString('APP_VERSION', '1.0.0'),\n    env: ConfigValidator.getEnum('NODE_ENV', ['development', 'production', 'test'], 'development'),\n    port: ConfigValidator.getNumber('PORT', 1125),\n    host: ConfigValidator.getString('HOST', '0.0.0.0'),\n    timezone: ConfigValidator.getString('TZ', 'Asia/Shanghai')\n  },\n\n  // 数据库配置\n  database: {\n    path: ConfigValidator.getPath('DB_PATH', 'data/park.db', true),\n    connectionTimeout: ConfigValidator.getNumber('DB_CONNECTION_TIMEOUT', 30000),\n    queryTimeout: ConfigValidator.getNumber('DB_QUERY_TIMEOUT', 10000),\n    maxConnections: ConfigValidator.getNumber('DB_MAX_CONNECTIONS', 10),\n    enableWAL: ConfigValidator.getBoolean('DB_ENABLE_WAL', true),\n    enableForeignKeys: ConfigValidator.getBoolean('DB_ENABLE_FOREIGN_KEYS', true)\n  },\n\n  // JWT认证配置\n  jwt: {\n    secret: ConfigValidator.getString('JWT_SECRET', null, true),\n    accessTokenExpiry: ConfigValidator.getNumber('JWT_ACCESS_TOKEN_EXPIRY', 900000),\n    refreshTokenExpiry: ConfigValidator.getNumber('JWT_REFRESH_TOKEN_EXPIRY', 604800),\n    issuer: ConfigValidator.getString('JWT_ISSUER', 'zero-carbon-park'),\n    audience: ConfigValidator.getString('JWT_AUDIENCE', 'zero-carbon-park-users')\n  },\n\n  // MQTT配置\n  mqtt: {\n    brokerUrl: ConfigValidator.getUrl('MQTT_BROKER_URL', 'mqtt://localhost:1883', true),\n    clientId: ConfigValidator.getString('MQTT_CLIENT_ID', 'zero-carbon-park-server'),\n    username: ConfigValidator.getString('MQTT_USERNAME'),\n    password: ConfigValidator.getString('MQTT_PASSWORD'),\n    keepalive: ConfigValidator.getNumber('MQTT_KEEPALIVE', 60),\n    connectTimeout: ConfigValidator.getNumber('MQTT_CONNECT_TIMEOUT', 30000),\n    reconnectPeriod: ConfigValidator.getNumber('MQTT_RECONNECT_PERIOD', 1000),\n    topics: {\n      energyData: ConfigValidator.getString('MQTT_TOPIC_ENERGY', 'park/energy/+/data'),\n      carbonData: ConfigValidator.getString('MQTT_TOPIC_CARBON', 'park/carbon/+/data'),\n      batteryData: ConfigValidator.getString('MQTT_TOPIC_BATTERY', 'park/battery/+/data'),\n      alerts: ConfigValidator.getString('MQTT_TOPIC_ALERTS', 'park/alerts')\n    }\n  },\n\n  // Redis缓存配置\n  redis: {\n    enabled: ConfigValidator.getBoolean('REDIS_ENABLED', false),\n    host: ConfigValidator.getString('REDIS_HOST', 'localhost'),\n    port: ConfigValidator.getNumber('REDIS_PORT', 6379),\n    password: ConfigValidator.getString('REDIS_PASSWORD'),\n    db: ConfigValidator.getNumber('REDIS_DB', 0),\n    keyPrefix: ConfigValidator.getString('REDIS_KEY_PREFIX', 'zcp:'),\n    defaultTTL: ConfigValidator.getNumber('REDIS_DEFAULT_TTL', 3600),\n    maxRetriesPerRequest: ConfigValidator.getNumber('REDIS_MAX_RETRIES', 3),\n    retryDelayOnFailover: ConfigValidator.getNumber('REDIS_RETRY_DELAY', 100)\n  },\n\n  // 安全配置\n  security: {\n    passwordSaltRounds: ConfigValidator.getNumber('SECURITY_PASSWORD_SALT_ROUNDS', 10),\n    cors: {\n      enabled: ConfigValidator.getBoolean('SECURITY_CORS_ENABLED', true),\n      origin: ConfigValidator.getString('SECURITY_CORS_ORIGIN', '*'), // 生产环境应限制为特定域名\n      methods: ConfigValidator.getString('SECURITY_CORS_METHODS', 'GET,HEAD,PUT,PATCH,POST,DELETE'),\n      allowedHeaders: ConfigValidator.getString(\n        'SECURITY_CORS_ALLOWED_HEADERS',\n        'Content-Type,Authorization'\n      ),\n      exposedHeaders: ConfigValidator.getString('SECURITY_CORS_EXPOSED_HEADERS', ''),\n      credentials: ConfigValidator.getBoolean('SECURITY_CORS_CREDENTIALS', true),\n      maxAge: ConfigValidator.getNumber('SECURITY_CORS_MAX_AGE', 3600)\n    },\n    rateLimit: {\n      enabled: ConfigValidator.getBoolean('SECURITY_RATE_LIMIT_ENABLED', true),\n      windowMs: ConfigValidator.getNumber('SECURITY_RATE_LIMIT_WINDOW_MS', 15 * 60 * 1000), // 15 minutes\n      max: ConfigValidator.getNumber('SECURITY_RATE_LIMIT_MAX', 100), // limit each IP to 100 requests per windowMs\n      message: ConfigValidator.getString(\n        'SECURITY_RATE_LIMIT_MESSAGE',\n        'Too many requests from this IP, please try again after 15 minutes'\n      )\n    },\n    helmet: {\n      enabled: ConfigValidator.getBoolean('SECURITY_HELMET_ENABLED', true)\n    },\n    csrf: {\n      enabled: ConfigValidator.getBoolean('SECURITY_CSRF_ENABLED', false) // CSRF保护通常用于基于会话的认证，JWT通常不需要\n    }\n  },\n\n  // 日志配置\n  logging: {\n    level: 'debug', // 强制设置为debug级别以捕获SQL查询日志\n    enableConsole: ConfigValidator.getBoolean('LOG_ENABLE_CONSOLE', true),\n    enableFile: ConfigValidator.getBoolean('LOG_ENABLE_FILE', true),\n    logDir: ConfigValidator.getPath('LOG_DIR', 'logs'),\n    maxFileSize: ConfigValidator.getNumber('LOG_MAX_FILE_SIZE', 10485760), // 10MB\n    maxFiles: ConfigValidator.getNumber('LOG_MAX_FILES', 10)\n  },\n  // 监控配置\n  monitoring: {\n    enableMetrics: ConfigValidator.getBoolean('MONITORING_ENABLE_METRICS', true),\n    metricsPort: ConfigValidator.getNumber('MONITORING_METRICS_PORT', 9090),\n    enableHealthCheck: ConfigValidator.getBoolean('MONITORING_ENABLE_HEALTH_CHECK', true),\n    healthCheckInterval: ConfigValidator.getNumber('MONITORING_HEALTH_CHECK_INTERVAL', 30000),\n    enablePerformanceMonitoring: ConfigValidator.getBoolean('MONITORING_ENABLE_PERFORMANCE', true)\n  },\n\n  // 文件上传配置\n  upload: {\n    maxFileSize: ConfigValidator.getNumber('UPLOAD_MAX_FILE_SIZE', 10 * 1024 * 1024), // 10MB\n    allowedMimeTypes: ConfigValidator.getArray('UPLOAD_ALLOWED_MIME_TYPES', [\n      'image/jpeg',\n      'image/png',\n      'image/gif',\n      'application/pdf',\n      'text/csv'\n    ]),\n    uploadDir: ConfigValidator.getPath('UPLOAD_DIR', 'uploads'),\n    enableVirusScan: ConfigValidator.getBoolean('UPLOAD_ENABLE_VIRUS_SCAN', false)\n  },\n\n  // 外部服务配置\n  external: {\n    weatherApiKey: ConfigValidator.getString('WEATHER_API_KEY'),\n    weatherApiUrl: ConfigValidator.getUrl(\n      'WEATHER_API_URL',\n      'https://api.openweathermap.org/data/2.5'\n    ),\n    carbonFactorApiUrl: ConfigValidator.getUrl('CARBON_FACTOR_API_URL'),\n    enableExternalServices: ConfigValidator.getBoolean('ENABLE_EXTERNAL_SERVICES', false)\n  },\n\n  // 开发配置\n  development: {\n    enableMockData: ConfigValidator.getBoolean('DEV_ENABLE_MOCK_DATA', false),\n    enableDebugRoutes: ConfigValidator.getBoolean('DEV_ENABLE_DEBUG_ROUTES', false),\n    enableSqlLogging: ConfigValidator.getBoolean('DEV_ENABLE_SQL_LOGGING', false)\n  }\n};\n\n/**\n * 配置验证函数\n */\nexport function validateConfig() {\n  const errors = [];\n\n  // 验证JWT密钥长度\n  if (config.jwt.secret && config.jwt.secret.length < 32) {\n    errors.push('JWT_SECRET 长度必须至少32个字符');\n  }\n\n  // 验证端口范围\n  if (config.app.port < 1 || config.app.port > 65535) {\n    errors.push('PORT 必须在1-65535范围内');\n  }\n\n  // 验证日志目录\n  if (config.logging.enableFile && !config.logging.logDir) {\n    errors.push('启用文件日志时必须设置 LOG_DIR');\n  }\n\n  // 验证上传目录\n  if (!config.upload.uploadDir) {\n    errors.push('必须设置 UPLOAD_DIR');\n  }\n\n  if (errors.length > 0) {\n    throw new Error(`配置验证失败:\\n${errors.join('\\n')}`);\n  }\n\n  console.log(`[CONFIG] 配置验证通过，环境: ${config.app.env}`);\n}\n\n/**\n * 获取配置信息（用于调试）\n */\nexport function getConfigInfo() {\n  const safeConfig = JSON.parse(JSON.stringify(config));\n\n  // 隐藏敏感信息\n  if (safeConfig.jwt.secret) {\n    safeConfig.jwt.secret = '***';\n  }\n  if (safeConfig.mqtt.password) {\n    safeConfig.mqtt.password = '***';\n  }\n  if (safeConfig.redis.password) {\n    safeConfig.redis.password = '***';\n  }\n  if (safeConfig.external.weatherApiKey) {\n    safeConfig.external.weatherApiKey = '***';\n  }\n\n  return safeConfig;\n}\n\n/**\n * 检查是否为生产环境\n */\nexport function isProduction() {\n  return config.app.env === 'production';\n}\n\n/**\n * 检查是否为开发环境\n */\nexport function isDevelopment() {\n  return config.app.env === 'development';\n}\n\n/**\n * 检查是否为测试环境\n */\nexport function isTest() {\n  return config.app.env === 'test';\n}\n\n// 在模块加载时验证配置\nvalidateConfig();\n\nexport default config;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/constants/HttpStatusCodes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/constants/MathConstants.js","messages":[{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'TWENTY_FIVE'.","line":44,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":44,"endColumn":14},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'POINT_ZERO_THREE'.","line":108,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":108,"endColumn":19},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'EIGHT_HUNDRED'.","line":142,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":142,"endColumn":16},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'POINT_EIGHT_FIVE'.","line":154,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":154,"endColumn":19},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'THIRTY_SIX'.","line":155,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":155,"endColumn":13},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'NINE'.","line":156,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":156,"endColumn":7},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'POINT_EIGHT'.","line":159,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":159,"endColumn":14},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'POINT_SIX'.","line":160,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":160,"endColumn":12},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'EIGHT_HUNDRED'.","line":161,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":161,"endColumn":16},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'ONE_THOUSAND'.","line":162,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":162,"endColumn":15},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'EIGHTY'.","line":163,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":163,"endColumn":9},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'SIXTY'.","line":164,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":164,"endColumn":8},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'FORTY'.","line":165,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":165,"endColumn":8},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'TWENTY'.","line":166,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":166,"endColumn":9},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'SEVENTY'.","line":175,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":175,"endColumn":10},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'SEVENTY_FIVE'.","line":176,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":176,"endColumn":15},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'EIGHTY_FIVE'.","line":177,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":177,"endColumn":14},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'NINETY_TWO'.","line":179,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":179,"endColumn":13},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'NINETY_FIVE'.","line":180,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":180,"endColumn":14},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'NINETY_EIGHT'.","line":181,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":181,"endColumn":15},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'TWENTY_FOUR'.","line":184,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":184,"endColumn":14},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'THIRTY'.","line":185,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":185,"endColumn":9},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'SIXTY'.","line":186,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":186,"endColumn":8},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'NINETY'.","line":187,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":187,"endColumn":9},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'FIFTEEN'.","line":200,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":200,"endColumn":10},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'POINT_FOUR'.","line":206,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":206,"endColumn":13},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'POINT_SEVEN'.","line":207,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":207,"endColumn":14},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'POINT_NINE'.","line":208,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":208,"endColumn":13},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'POINT_NINE_FIVE'.","line":209,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":209,"endColumn":18},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'NINETY'.","line":210,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":210,"endColumn":9},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'SIXTEEN'.","line":212,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":212,"endColumn":10},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'TWENTY_FIVE'.","line":213,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":213,"endColumn":14},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'THIRTY_SIX'.","line":214,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":214,"endColumn":13},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'NINE'.","line":215,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":215,"endColumn":7},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'ONE_HUNDRED'.","line":216,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":216,"endColumn":14},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'ZERO_POINT_ZERO_FIVE'.","line":220,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":220,"endColumn":23},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'ONE'.","line":226,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":226,"endColumn":6},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'TWO'.","line":227,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":227,"endColumn":6},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'THREE'.","line":228,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":228,"endColumn":8},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'NINETY_FIVE'.","line":229,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":229,"endColumn":14},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":266,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":266,"endColumn":33},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":266,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":266,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":266,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":266,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":545,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":545,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":545,"column":22,"nodeType":"Literal","messageId":"noMagic","endLine":545,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":545,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":545,"endColumn":31},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":629,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":629,"endColumn":29},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":629,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":629,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":629,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":629,"endColumn":41},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":681,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":681,"endColumn":20},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":681,"column":23,"nodeType":"Literal","messageId":"noMagic","endLine":681,"endColumn":25},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":681,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":681,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":681,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":681,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":682,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":682,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":682,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":682,"endColumn":29}],"suppressedMessages":[],"errorCount":40,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数学和基础常量定义\n * 用于替换项目中的魔法数字，提高代码可维护性\n */\n\n// 基础数学常量\nexport const MATH_CONSTANTS = {\n  // 数学相关常量\n  PI: Math.PI,\n  E: Math.E,\n  GOLDEN_RATIO: 1.618033988749895,\n  DECIMAL_PLACES: 2, // 小数位数\n  \n  // 基础数值常量\n  ZERO: 0,\n  ONE: 1,\n  TWO: 2,\n  THREE: 3,\n  FOUR: 4,\n  FIVE: 5,\n  SIX: 6,\n  SEVEN: 7,\n  EIGHT: 8,\n  NINE: 9,\n  TEN: 10,\n  ELEVEN: 11,\n  TWELVE: 12,\n  THIRTEEN: 13,\n  FOURTEEN: 14,\n  FIFTEEN: 15,\n  SIXTEEN: 16,\n  SEVENTEEN: 17,\n  EIGHTEEN: 18,\n  NINETEEN: 19,\n  TWENTY: 20,\n  TWENTY_FIVE: 25,\n  POINT_ZERO_FOUR: 0.04,\n  POINT_ZERO_THREE: 0.03,\n  POINT_ZERO_SIX: 0.06,\n  TWENTY_ONE: 21,\n  TWENTY_TWO: 22,\n  TWENTY_THREE: 23,\n  TWENTY_FOUR: 24,\n  TWENTY_FIVE: 25,\n  THIRTY: 30,\n  THIRTY_ONE: 31,\n  THIRTY_TWO: 32,\n  THIRTY_THREE: 33,\n  THIRTY_FOUR: 34,\n  THIRTY_FIVE: 35,\n  THIRTY_SIX: 36,\n  FORTY: 40,\n  FIFTY: 50,\n  SIXTY: 60,\n  SIXTY_FIVE: 65,\n  SEVENTY: 70,\n  SEVENTY_TWO: 72,\n  SEVENTY_FIVE: 75,\n  SEVENTY_EIGHT: 78,\n  EIGHTY: 80,\n  EIGHTY_FIVE: 85,\n  NINETY: 90,\n  NINETY_TWO: 92,\n  NINETY_FIVE: 95,\n  NINETY_EIGHT: 98,\n  ONE_HUNDRED: 100,\n  EIGHT_HUNDRED: 800,\n  TWO_HUNDRED: 200,\n  THREE_HUNDRED: 300,\n  \n  // 时间相关基础数值\n  SECONDS_PER_MINUTE: 60,\n  MINUTES_PER_HOUR: 60,\n  HOURS_PER_DAY: 24,\n  DAYS_PER_YEAR: 365,\n  \n  // 时间转换（毫秒）\n  MILLISECONDS_PER_SECOND: 1000,\n  \n  // 存储和数据相关\n  BYTES_PER_KB: 1024,\n  \n  // 百分比相关\n  PERCENTAGE_BASE: 100,\n  \n  // 小数常量\n  ZERO_POINT_ZERO_ONE: 0.01,\n  ZERO_POINT_ZERO_FIVE: 0.05,\n  ZERO_POINT_ONE: 0.1,\n  ZERO_POINT_FIFTEEN: 0.15,\n  ZERO_POINT_TWO: 0.2,\n  ZERO_POINT_FIVE: 0.5,\n  ZERO_POINT_SIX: 0.6,\n  ZERO_POINT_EIGHT: 0.8,\n  POINT_EIGHT: 0.8,\n  ZERO_POINT_EIGHTY_FIVE: 0.85,\n  POINT_EIGHT_FIVE: 0.85,\n  POINT_EIGHT_EIGHT: 0.88,\n  POINT_NINE: 0.9,\n  POINT_SEVEN: 0.7,\n  POINT_SIX: 0.6,\n  POINT_SIX_FIVE: 0.65,\n  POINT_FIVE: 0.5,\n  POINT_TWO_FIVE: 0.25,\n  POINT_ONE_NINE: 0.19,\n  POINT_ZERO_EIGHT: 0.08,\n  POINT_ZERO_SEVEN: 0.07,\n  POINT_ZERO_THREE: 0.03,\n  POINT_FOUR: 0.4,\n  POINT_THREE: 0.3,\n  POINT_ONE: 0.1,\n  POINT_ONE_TWO: 1.2,\n  ONE_POINT_ZERO: 1.0,\n  ONE_POINT_FIVE: 1.5,\n  ZERO_POINT_NINE: 0.9,\n  ZERO_POINT_NINETY: 0.90,\n  ZERO_POINT_NINETY_FIVE: 0.95,\n  ZERO_POINT_NINETY_EIGHT: 0.98,\n  ZERO_POINT_NINETY_NINE: 0.99,\n  POINT_SEVEN_FIVE: 0.75,\n  POINT_NINE_FIVE: 0.95,\n  POINT_NINE_EIGHT: 0.98,\n  \n  // 百分比常量\n  FIVE_PERCENT: 0.05,\n  TEN_PERCENT: 0.1,\n  TWENTY_PERCENT: 0.2,\n  THIRTY_PERCENT: 0.3,\n  FIFTY_PERCENT: 0.5,\n  EIGHTY_PERCENT: 0.8,\n  NINETY_PERCENT: 0.9,\n  \n  // 分数常量\n  HALF: 0.5,\n  ONE_HALF: 0.5,\n  ONE_THIRD: 0.33,\n  ONE_QUARTER: 0.25,\n  \n  // 存储和数据相关\n  FOUR_HUNDRED: 400,\n  FIVE_HUNDRED: 500,\n  EIGHT_HUNDRED: 800,\n  ONE_THOUSAND: 1000,\n  FIFTEEN_HUNDRED: 1500,\n  TWO_THOUSAND: 2000,\n  THREE_THOUSAND: 3000,\n  TWO_THOUSAND_TWO_HUNDRED: 2200,\n  POINT_FIVE_SEVEN_ZERO_THREE: 0.5703,\n  POINT_TWO: 0.2,\n  FIFTEEN_POINT_FIVE: 15.5,\n  TWELVE_POINT_THREE: 12.3,\n  EIGHT_POINT_SEVEN: 8.7,\n  FIVE_POINT_TWO: 5.2,\n  POINT_EIGHT_FIVE: 0.85,\n  THIRTY_SIX: 36,\n  NINE: 9,\n  NEGATIVE_SIX: -6,\n  POINT_ZERO_FIVE: 0.05,\n  POINT_EIGHT: 0.8,\n  POINT_SIX: 0.6,\n  EIGHT_HUNDRED: 800,\n  ONE_THOUSAND: 1000,\n  EIGHTY: 80,\n  SIXTY: 60,\n  FORTY: 40,\n  TWENTY: 20,\n  THREE_THOUSAND_THREE_HUNDRED_SIX: 3306,\n  FIVE_THOUSAND: 5000,\n  TEN_THOUSAND: 10000,\n  FIFTEEN_THOUSAND: 15000,\n  TWENTY_THOUSAND: 20000,\n  THIRTY_THOUSAND: 30000,\n  ONE_MILLION: 1000000,\n  SIXTY_SEVEN: 67,\n  SEVENTY: 70,\n  SEVENTY_FIVE: 75,\n  EIGHTY_FIVE: 85,\n  EIGHTY_EIGHT: 88,\n  NINETY_TWO: 92,\n  NINETY_FIVE: 95,\n  NINETY_EIGHT: 98,\n  \n  // DataLineageService 相关常量\n  TWENTY_FOUR: 24,\n  THIRTY: 30,\n  SIXTY: 60,\n  NINETY: 90,\n  \n  // 倍数常量\n  ONE_POINT_TWO: 1.2,\n  \n  // 单位转换基数\n  UNIT_CONVERSION_BASE: 1000,\n  \n  // 密码和安全相关\n  MIN_PASSWORD_LENGTH: 8,\n  CRYPTO_RANDOM_BYTES: 16,\n  \n  // 能源管理相关常量\n  FIFTEEN: 15,\n  ONE_HUNDRED_TWENTY: 120,\n  ONE_HUNDRED_EIGHTY: 180,\n  EIGHT_THOUSAND_SEVEN_HUNDRED_SIXTY: 8760,\n  \n  // 维护管理相关常量\n  POINT_FOUR: 0.4,\n  POINT_SEVEN: 0.7,\n  POINT_NINE: 0.9,\n  POINT_NINE_FIVE: 0.95,\n  NINETY: 90,\n  EIGHT_THOUSAND: 8000,\n  SIXTEEN: 16,\n  TWENTY_FIVE: 25,\n  THIRTY_SIX: 36,\n  NINE: 9,\n  ONE_HUNDRED: 100,\n  \n  // NationalIndicatorDashboard 需要的常量\n  ONE_POINT_ONE: 1.1,\n  ZERO_POINT_ZERO_FIVE: 0.05,\n  NINE_HUNDRED: 900,\n  TWO_HUNDRED_FORTY: 240,\n  NINE_THOUSAND: 9000,\n  \n  // 数字常量\n  ONE: 1,\n  TWO: 2,\n  THREE: 3,\n  NINETY_FIVE: 95,\n  \n  // 网络端口常量\n  SMTP_SECURE_PORT: 465,\n  \n  // 颜色常量（十六进制）\n  DEFAULT_GRAY_COLOR: 0x808080\n};\n\n// 时间间隔常量（基于基础数学常量计算）\nexport const TIME_INTERVALS = {\n  ONE_SECOND_MS: 1000,\n  FIVE_SECONDS_MS: 5000,\n  TEN_SECONDS_MS: 10000,\n  THIRTY_SECONDS_MS: 30000,\n  ONE_MINUTE_MS: 60000,\n  FIVE_MINUTES_MS: MATH_CONSTANTS.FIVE * MATH_CONSTANTS.SECONDS_PER_MINUTE * MATH_CONSTANTS.MILLISECONDS_PER_SECOND,\n  TEN_MINUTES_MS: 600000,\n  FIFTEEN_MINUTES_MS: 900000,\n  THIRTY_MINUTES_MS: 1800000,\n  ONE_HOUR_MS: MATH_CONSTANTS.MINUTES_PER_HOUR * MATH_CONSTANTS.SECONDS_PER_MINUTE * MATH_CONSTANTS.MILLISECONDS_PER_SECOND,\n  TWO_HOURS_MS: 7200000,\n  SIX_HOURS_MS: 21600000,\n  TWELVE_HOURS_MS: 43200000,\n  ONE_DAY_MS: MATH_CONSTANTS.HOURS_PER_DAY * MATH_CONSTANTS.MINUTES_PER_HOUR * MATH_CONSTANTS.SECONDS_PER_MINUTE * MATH_CONSTANTS.MILLISECONDS_PER_SECOND,\n  ONE_WEEK_MS: 604800000,\n  ONE_MONTH_MS: 2592000000,\n  ONE_YEAR_MS: MATH_CONSTANTS.DAYS_PER_YEAR * MATH_CONSTANTS.HOURS_PER_DAY * MATH_CONSTANTS.MINUTES_PER_HOUR * MATH_CONSTANTS.SECONDS_PER_MINUTE * MATH_CONSTANTS.MILLISECONDS_PER_SECOND\n};\n\n// 能源管理相关常量\nexport const ENERGY_CONSTANTS = {\n  // 能源相关常量\n  RENEWABLE_THRESHOLD: 0.3,\n  EFFICIENCY_THRESHOLD: 0.8,\n  LOAD_BALANCE_THRESHOLD: 0.7,\n  OPTIMIZATION_IMPACT: 0.15,\n  DEFAULT_MONITORING_INTERVAL: 5 * 60 * 1000, // 5分钟\n  OPTIMIZATION_THRESHOLD: 0.1,\n  \n  // 效率阈值\n  EFFICIENCY_THRESHOLD_HIGH: 80,\n  EFFICIENCY_THRESHOLD_MEDIUM: 70,\n  EFFICIENCY_THRESHOLD_LOW: 50,\n  \n  // 可再生能源比例阈值\n  RENEWABLE_RATIO_THRESHOLD_HIGH: 50,\n  RENEWABLE_RATIO_THRESHOLD_LOW: 30,\n  \n  // 负载因子阈值\n  LOAD_FACTOR_THRESHOLD_HIGH: 60,\n  LOAD_FACTOR_THRESHOLD_LOW: 50,\n  \n  // 模拟数据范围\n  MOCK_PRODUCTION_MAX: 1000,\n  MOCK_CONSUMPTION_MAX: 800,\n  MOCK_RENEWABLE_BASE: 60,\n  MOCK_RENEWABLE_RANGE: 30,\n  MOCK_EFFICIENCY_BASE: 80,\n  MOCK_EFFICIENCY_RANGE: 15,\n  MOCK_COST_SAVINGS_MAX: 5000,\n  MOCK_HOURLY_PRODUCTION_MAX: 100,\n  MOCK_HOURLY_CONSUMPTION_MAX: 80,\n  MOCK_HOURLY_RENEWABLE_MAX: 60,\n  MOCK_DEVICE_CONTRIBUTION_MAX: 100,\n  MOCK_DEVICE_EFFICIENCY_BASE: 80,\n  MOCK_DEVICE_EFFICIENCY_RANGE: 20,\n  MOCK_ENERGY_SAVED_MAX: 50,\n  MOCK_COST_SAVED_MAX: 100,\n  MOCK_EFFICIENCY_IMPROVED_MAX: 5,\n  \n  // 时间范围限制\n  MAX_HOURLY_DATA_HOURS: 24,\n  \n  // 碳排放相关常量\n  ELECTRICITY_EMISSION_FACTOR: 0.5, // kg CO2e / kWh\n  NATURAL_GAS_EMISSION_FACTOR: 0.2, // kg CO2e / kWh\n  BASE_ENERGY_USAGE: 500, // kWh\n  RANDOM_ENERGY_RANGE: 500 // kWh\n};\n\n// 时间范围常量\nexport const PREVIOUS_TIME_RANGES = {\n  ONE_HOUR: '-2 hours',\n  SIX_HOURS: '-12 hours',\n  ONE_DAY: '-2 days',\n  SEVEN_DAYS: '-14 days',\n  THIRTY_DAYS: '-60 days',\n  NINETY_DAYS: '-180 days',\n  ONE_YEAR: '-2 years'\n};\n\n// 存储大小常量\nexport const STORAGE_CONSTANTS = {\n  ONE_MB: MATH_CONSTANTS.BYTES_PER_KB * MATH_CONSTANTS.BYTES_PER_KB,\n  FILE_SIZE_LIMIT: MATH_CONSTANTS.BYTES_PER_KB * MATH_CONSTANTS.BYTES_PER_KB // 1MB\n};\n\n// HTTP状态码常量\nexport const HTTP_STATUS_CODES = {\n  // 成功状态码\n  OK: 200,\n  CREATED: 201,\n  ACCEPTED: 202,\n  NO_CONTENT: 204,\n  \n  // 重定向状态码\n  MOVED_PERMANENTLY: 301,\n  FOUND: 302,\n  NOT_MODIFIED: 304,\n  \n  // 客户端错误状态码\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  METHOD_NOT_ALLOWED: 405,\n  CONFLICT: 409,\n  UNPROCESSABLE_ENTITY: 422,\n  TOO_MANY_REQUESTS: 429,\n  \n  // 服务器错误状态码\n  INTERNAL_SERVER_ERROR: 500,\n  NOT_IMPLEMENTED: 501,\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504\n};\n\n// 数据处理相关常量\nexport const DATA_PROCESSING_CONSTANTS = {\n  // 批处理大小\n  BATCH_SIZE_SMALL: 100,\n  BATCH_SIZE_MEDIUM: 500,\n  BATCH_SIZE_LARGE: 1000,\n  BATCH_SIZE_EXTRA_LARGE: 5000,\n  \n  // 分页相关\n  DEFAULT_PAGE_SIZE: 20,\n  MAX_PAGE_SIZE: 100,\n  MIN_PAGE_SIZE: 1,\n  \n  // 重试相关\n  MAX_RETRY_ATTEMPTS: 3,\n  RETRY_DELAY_MS: 1000,\n  EXPONENTIAL_BACKOFF_MULTIPLIER: 2,\n  \n  // 超时设置\n  DEFAULT_TIMEOUT_MS: 30000,\n  LONG_TIMEOUT_MS: 60000,\n  SHORT_TIMEOUT_MS: 5000,\n  \n  // 缓存相关\n  CACHE_TTL_SHORT: 300, // 5分钟\n  CACHE_TTL_MEDIUM: 1800, // 30分钟\n  CACHE_TTL_LONG: 3600, // 1小时\n  CACHE_TTL_EXTRA_LONG: 86400, // 24小时\n  \n  // 数据验证\n  MIN_STRING_LENGTH: 1,\n  MAX_STRING_LENGTH: 255,\n  MAX_TEXT_LENGTH: 65535,\n  \n  // 数值范围\n  MIN_POSITIVE_NUMBER: 0.0001,\n  MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER,\n  MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER\n};\n\n// 能源设备相关常量\nexport const DEVICE_CONSTANTS = {\n  // 设备状态\n  STATUS_ONLINE: 1,\n  STATUS_OFFLINE: 0,\n  STATUS_MAINTENANCE: 2,\n  STATUS_ERROR: 3,\n  \n  // 设备类型ID\n  TYPE_SOLAR_PANEL: 1,\n  TYPE_WIND_TURBINE: 2,\n  TYPE_BATTERY: 3,\n  TYPE_INVERTER: 4,\n  TYPE_METER: 5,\n  \n  // 设备优先级\n  PRIORITY_LOW: 1,\n  PRIORITY_MEDIUM: 2,\n  PRIORITY_HIGH: 3,\n  PRIORITY_CRITICAL: 4,\n  \n  // 维护间隔（天）\n  MAINTENANCE_INTERVAL_DAILY: 1,\n  MAINTENANCE_INTERVAL_WEEKLY: 7,\n  MAINTENANCE_INTERVAL_MONTHLY: 30,\n  MAINTENANCE_INTERVAL_QUARTERLY: 90,\n  MAINTENANCE_INTERVAL_YEARLY: 365,\n  \n  // 设备容量等级\n  CAPACITY_SMALL: 10, // kW\n  CAPACITY_MEDIUM: 100, // kW\n  CAPACITY_LARGE: 1000, // kW\n  CAPACITY_EXTRA_LARGE: 10000 // kW\n};\n\n// 算法和计算相关常量\nexport const ALGORITHM_CONSTANTS = {\n  // 机器学习相关\n  LEARNING_RATE: 0.01,\n  EPOCHS: 100,\n  BATCH_SIZE: 32,\n  VALIDATION_SPLIT: 0.2,\n  TEST_SPLIT: 0.1,\n  \n  // 优化算法参数\n  CONVERGENCE_THRESHOLD: 0.001,\n  MAX_ITERATIONS: 1000,\n  STEP_SIZE: 0.1,\n  \n  // 统计分析\n  CONFIDENCE_LEVEL: 0.95,\n  SIGNIFICANCE_LEVEL: 0.05,\n  Z_SCORE_THRESHOLD: 2.0,\n  \n  // 预测模型\n  FORECAST_HORIZON_HOURS: 24,\n  FORECAST_HORIZON_DAYS: 7,\n  FORECAST_HORIZON_MONTHS: 12,\n  \n  // 异常检测\n  ANOMALY_THRESHOLD: 3.0, // 标准差倍数\n  OUTLIER_PERCENTILE: 0.95,\n  \n  // 聚类分析\n  MIN_CLUSTER_SIZE: 3,\n  MAX_CLUSTER_SIZE: 10,\n  CLUSTER_DISTANCE_THRESHOLD: 0.5\n};\n\n// 安全和认证相关常量\nexport const SECURITY_CONSTANTS = {\n  // JWT相关\n  JWT_EXPIRY_HOURS: 24,\n  JWT_REFRESH_EXPIRY_DAYS: 7,\n  \n  // 密码策略\n  MIN_PASSWORD_LENGTH: 8,\n  MAX_PASSWORD_LENGTH: 128,\n  PASSWORD_COMPLEXITY_SCORE: 3,\n  \n  // 会话管理\n  SESSION_TIMEOUT_MINUTES: 30,\n  MAX_CONCURRENT_SESSIONS: 5,\n  \n  // 访问控制\n  MAX_LOGIN_ATTEMPTS: 5,\n  LOCKOUT_DURATION_MINUTES: 15,\n  \n  // 加密相关\n  SALT_ROUNDS: 12,\n  ENCRYPTION_KEY_LENGTH: 32,\n  IV_LENGTH: 16,\n  \n  // API限流\n  RATE_LIMIT_REQUESTS_PER_MINUTE: 60,\n  RATE_LIMIT_REQUESTS_PER_HOUR: 1000,\n  RATE_LIMIT_BURST_SIZE: 10\n};\n\n// 监控和告警相关常量\nexport const MONITORING_CONSTANTS = {\n  // 告警级别\n  ALERT_LEVEL_INFO: 1,\n  ALERT_LEVEL_WARNING: 2,\n  ALERT_LEVEL_ERROR: 3,\n  ALERT_LEVEL_CRITICAL: 4,\n  \n  // 监控间隔\n  MONITOR_INTERVAL_REALTIME: 1000, // 1秒\n  MONITOR_INTERVAL_FAST: 5000, // 5秒\n  MONITOR_INTERVAL_NORMAL: 30000, // 30秒\n  MONITOR_INTERVAL_SLOW: 300000, // 5分钟\n  \n  // 性能阈值\n  CPU_USAGE_WARNING: 70,\n  CPU_USAGE_CRITICAL: 90,\n  MEMORY_USAGE_WARNING: 80,\n  MEMORY_USAGE_CRITICAL: 95,\n  DISK_USAGE_WARNING: 85,\n  DISK_USAGE_CRITICAL: 95,\n  \n  // 响应时间阈值（毫秒）\n  RESPONSE_TIME_FAST: 100,\n  RESPONSE_TIME_NORMAL: 500,\n  RESPONSE_TIME_SLOW: 1000,\n  RESPONSE_TIME_CRITICAL: 5000,\n  \n  // 错误率阈值\n  ERROR_RATE_WARNING: 0.01, // 1%\n  ERROR_RATE_CRITICAL: 0.05, // 5%\n  \n  // 可用性阈值\n  AVAILABILITY_TARGET: 0.999, // 99.9%\n  AVAILABILITY_WARNING: 0.99, // 99%\n  AVAILABILITY_CRITICAL: 0.95, // 95%\n  \n  // 质量阈值（百分比）\n  QUALITY_THRESHOLD_LOW: 60,\n  QUALITY_THRESHOLD_MEDIUM: 75,\n  QUALITY_THRESHOLD_HIGH: 85,\n  QUALITY_THRESHOLD_VERY_HIGH: 90,\n  QUALITY_THRESHOLD_CRITICAL: 95\n};\n\n// 碳排放核算相关常量（符合国家标准）\nexport const CARBON_CONSTANTS = {\n  // 缓存超时时间\n  CACHE_TIMEOUT: 5 * 60 * 1000, // 5分钟\n  \n  // 国家标准排放因子（2024年版）\n  NATIONAL_EMISSION_FACTORS: {\n    // 全国电网平均排放因子 (kg CO2/kWh)\n    NATIONAL_GRID_ELECTRICITY: 0.5703,\n    \n    // 区域电网排放因子 (kg CO2/kWh)\n    NORTH_CHINA_GRID: 0.8843,\n    NORTHEAST_CHINA_GRID: 0.8825,\n    EAST_CHINA_GRID: 0.7035,\n    CENTRAL_CHINA_GRID: 0.8257,\n    NORTHWEST_CHINA_GRID: 0.8922,\n    SOUTH_CHINA_GRID: 0.5271,\n    \n    // 化石燃料排放因子\n    NATURAL_GAS: 2.1622, // kg CO2/m³\n    COAL: 2.4930, // kg CO2/kg\n    DIESEL: 3.0959, // kg CO2/L\n    GASOLINE: 2.9251, // kg CO2/L\n    HEAVY_OIL: 3.1705, // kg CO2/kg\n    LPG: 3.0012, // kg CO2/kg\n    \n    // 工业过程排放因子\n    CEMENT: 0.5273, // kg CO2/kg水泥\n    STEEL: 2.07, // kg CO2/kg钢铁\n    ALUMINUM: 11.46, // kg CO2/kg铝\n    CHEMICAL: 1.5, // kg CO2/kg化工产品（平均值）\n    PAPER: 0.9, // kg CO2/kg纸张\n    \n    // 可再生能源排放因子\n    SOLAR: 0.0,\n    WIND: 0.0,\n    HYDRO: 0.0,\n    NUCLEAR: 0.0\n  },\n  \n  // 国家核心指标目标值\n  NATIONAL_TARGETS: {\n    // 单位能耗碳排放目标值 (吨CO₂/吨标准煤)\n    CARBON_INTENSITY_TARGET_MIN: 0.2,\n    CARBON_INTENSITY_TARGET_MAX: 0.3,\n    \n    // 清洁能源消费占比目标值 (%)\n    CLEAN_ENERGY_RATIO_TARGET: 90,\n    \n    // 工业固废综合利用率目标值 (%)\n    SOLID_WASTE_UTILIZATION_TARGET: 95,\n    \n    // 余热/余冷/余压综合利用率目标值 (%)\n    WASTE_ENERGY_UTILIZATION_TARGET: 80,\n    \n    // 工业用水重复利用率目标值 (%)\n    WATER_REUSE_TARGET: 90\n  },\n  \n  // 能源折标煤系数\n  ENERGY_CONVERSION_FACTORS: {\n    // 电力（等价值计算）\n    ELECTRICITY_EQUIVALENT: 0.1229, // kgce/kWh\n    \n    // 化石燃料折标煤系数\n    NATURAL_GAS: 1.33, // kgce/m³\n    COAL: 0.7143, // kgce/kg\n    DIESEL: 1.4571, // kgce/kg\n    GASOLINE: 1.4714, // kgce/kg\n    HEAVY_OIL: 1.4286, // kgce/kg\n    LPG: 1.7143, // kgce/kg\n    \n    // 热力折标煤系数\n    HEAT: 0.03412 // kgce/MJ\n  },\n  \n  // 计算精度\n  CALCULATION_PRECISION: {\n    EMISSION_DECIMAL_PLACES: 4,\n    RATIO_DECIMAL_PLACES: 2,\n    ENERGY_DECIMAL_PLACES: 3\n  },\n  \n  // 数据质量阈值\n  DATA_QUALITY_THRESHOLDS: {\n    COMPLETENESS_MIN: 0.95, // 数据完整性最低要求95%\n    ACCURACY_MIN: 0.99, // 数据准确性最低要求99%\n    TIMELINESS_MAX_DELAY: 60 * 60 * 1000 // 数据时效性最大延迟1小时\n  },\n\n  // 数据质量服务相关常量\n  DATA_QUALITY_CONSTANTS: {\n    // 异常检测相关\n    Z_SCORE_SEVERITY_MULTIPLIER: 1.5,\n    TREND_DEVIATION_MULTIPLIER: 2,\n    PATTERN_THRESHOLD_MULTIPLIER: 2,\n    \n    // 时间相关（毫秒）\n    FUTURE_TIME_TOLERANCE_MS: 300000, // 5分钟未来时间容错\n    ONE_MINUTE_MS: 60000,\n    TWO_MINUTES_MS: 120000,\n    FIVE_MINUTES_MS: 300000,\n    SAMPLE_TIME_OFFSET_1MIN: 60000, // 1分钟\n    SAMPLE_TIME_OFFSET_2MIN: 120000, // 2分钟\n    \n    // 质量评分相关\n    QUALITY_SCORE_MULTIPLIER: 100,\n    DATA_FRESHNESS_SCORE: 0.95,\n    ANOMALY_CONFIDENCE_THRESHOLD: 0.9,\n    HIGH_QUALITY_SCORE: 0.95,\n     METRIC_CHANGE_THRESHOLD: 0.01,\n     QUALITY_TARGET_THRESHOLD: 0.9,\n    \n    // 数据处理相关\n    MOCK_TOTAL_RECORDS: 10000,\n    VARIANCE_THRESHOLD_MULTIPLIER: 1000,\n    NEGATIVE_VARIANCE_THRESHOLD: -1000,\n    SMALL_VARIANCE_THRESHOLD: 0.01,\n    MAX_HISTORY_RECORDS: 1000,\n    \n    // 样本数据\n    SAMPLE_PRODUCTION_VOLUME: 1000,\n     SAMPLE_INDICATOR_VALUE: 0.85,\n     SAMPLE_TARGET_VALUE: 0.90,\n     MILLION: 1000000,\n     HALF_MILLION: 500000,\n     BASE_36: 36,\n     RANDOM_ID_LENGTH: 9,\n     REPORT_ESTIMATE_APPLICATION: 10,\n     REPORT_ESTIMATE_ACCEPTANCE: 8,\n     REPORT_ESTIMATE_MONITORING: 5,\n     REPORT_ESTIMATE_DEFAULT: 5,\n     SCORE_GOOD: 80,\n     SCORE_WARNING: 60,\n     SCORE_CRITICAL: 40,\n     SAMPLE_ENTERPRISE_COUNT: 156,\n     SAMPLE_EMPLOYEE_COUNT: 12500,\n    \n    // 时间转换常量\n    HOURS_TO_MS: 24 * 60 * 60 * 1000,\n    MINUTES_TO_MS: 60 * 1000\n  }\n};\n\n// 导出所有常量的组合对象\nexport const ALL_CONSTANTS = {\n  ...MATH_CONSTANTS,\n  ...TIME_INTERVALS,\n  ...STORAGE_CONSTANTS,\n  ...PREVIOUS_TIME_RANGES,\n  ...ENERGY_CONSTANTS,\n  ...CARBON_CONSTANTS,\n  ...HTTP_STATUS_CODES,\n  ...DATA_PROCESSING_CONSTANTS,\n  ...DEVICE_CONSTANTS,\n  ...ALGORITHM_CONSTANTS,\n  ...SECURITY_CONSTANTS,\n  ...MONITORING_CONSTANTS\n};\n\nexport default ALL_CONSTANTS;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/database/QueryOptimizer.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":11,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":11,"endColumn":61},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":13,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 300000.","line":237,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":237,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":295,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":295,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":295,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":295,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":356,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":356,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":356,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":356,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":396,"column":66,"nodeType":"Literal","messageId":"noMagic","endLine":396,"endColumn":69},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":446,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":446,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 30000.","line":448,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":448,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 300000.","line":449,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":449,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { performance } from 'perf_hooks';\nimport logger from '../../interfaces/http/utils/logger.js';\n\n/**\n * 数据库查询优化器\n */\nexport class QueryOptimizer {\n  constructor(options = {}) {\n    this.options = {\n      enableQueryLogging: options.enableQueryLogging !== false,\n      slowQueryThreshold: options.slowQueryThreshold || 1000, // 1秒\n      enableQueryCache: options.enableQueryCache !== false,\n      cacheSize: options.cacheSize || 100,\n      enableExplainPlan: options.enableExplainPlan || false,\n      ...options\n    };\n\n    this.queryCache = new Map();\n    this.queryStats = new Map();\n    this.preparedStatements = new Map();\n  }\n\n  /**\n   * 执行优化的查询\n   */\n  async executeQuery(db, sql, params = [], options = {}) {\n    const startTime = performance.now();\n    const queryKey = this.generateQueryKey(sql, params);\n\n    try {\n      // 检查查询缓存\n      if (this.options.enableQueryCache && options.useCache !== false) {\n        const cached = this.queryCache.get(queryKey);\n        if (cached && !this.isCacheExpired(cached)) {\n          this.recordQueryStats(sql, performance.now() - startTime, true);\n          return cached.result;\n        }\n      }\n\n      // 执行查询\n      let result;\n      if (options.useTransaction) {\n        result = await this.executeInTransaction(db, sql, params);\n      } else if (options.usePreparedStatement) {\n        result = await this.executePreparedStatement(db, sql, params);\n      } else {\n        result = await this.executeDirectQuery(db, sql, params);\n      }\n\n      const executionTime = performance.now() - startTime;\n\n      // 记录查询统计\n      this.recordQueryStats(sql, executionTime, false);\n\n      // 缓存结果\n      if (this.options.enableQueryCache && options.useCache !== false && this.isCacheable(sql)) {\n        this.cacheResult(queryKey, result, options.cacheTTL);\n      }\n\n      // 记录慢查询\n      if (executionTime > this.options.slowQueryThreshold) {\n        this.logSlowQuery(sql, params, executionTime);\n      }\n\n      return result;\n    } catch (error) {\n      const executionTime = performance.now() - startTime;\n      this.recordQueryStats(sql, executionTime, false, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 直接执行查询\n   */\n  async executeDirectQuery(db, sql, params) {\n    if (params && params.length > 0) {\n      return new Promise((resolve, reject) => {\n        db.all(sql, params, (err, rows) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(rows);\n          }\n        });\n      });\n    }\n    return new Promise((resolve, reject) => {\n      db.all(sql, (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  /**\n   * 使用预处理语句执行查询\n   */\n  async executePreparedStatement(db, sql, params) {\n    const stmtKey = this.generateStatementKey(sql);\n\n    if (!this.preparedStatements.has(stmtKey)) {\n      const stmt = db.prepare(sql);\n      this.preparedStatements.set(stmtKey, stmt);\n    }\n\n    const stmt = this.preparedStatements.get(stmtKey);\n\n    return new Promise((resolve, reject) => {\n      stmt.all(params, (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  /**\n   * 在事务中执行查询\n   */\n  async executeInTransaction(db, sql, params) {\n    return new Promise((resolve, reject) => {\n      db.serialize(() => {\n        db.run('BEGIN TRANSACTION');\n\n        db.all(sql, params, (err, rows) => {\n          if (err) {\n            db.run('ROLLBACK', (rollbackErr) => {\n              if (rollbackErr) {\n                logger.error('事务回滚失败', { error: rollbackErr.message });\n              }\n              reject(err);\n            });\n          } else {\n            db.run('COMMIT', (commitErr) => {\n              if (commitErr) {\n                reject(commitErr);\n              } else {\n                resolve(rows);\n              }\n            });\n          }\n        });\n      });\n    });\n  }\n\n  /**\n   * 批量执行查询\n   */\n  async executeBatch(db, queries) {\n    const results = [];\n    const startTime = performance.now();\n\n    return new Promise((resolve, reject) => {\n      db.serialize(() => {\n        db.run('BEGIN TRANSACTION');\n\n        let completed = 0;\n        let hasError = false;\n\n        queries.forEach((query, index) => {\n          const { sql, params = [] } = query;\n\n          db.all(sql, params, (err, rows) => {\n            if (err && !hasError) {\n              hasError = true;\n              db.run('ROLLBACK', () => {\n                reject(err);\n              });\n              return;\n            }\n\n            if (!hasError) {\n              results[index] = rows;\n              completed++;\n\n              if (completed === queries.length) {\n                db.run('COMMIT', (commitErr) => {\n                  if (commitErr) {\n                    reject(commitErr);\n                  } else {\n                    const executionTime = performance.now() - startTime;\n                    logger.info('批量查询完成', {\n                      queryCount: queries.length,\n                      executionTime: `${executionTime.toFixed(2)}ms`\n                    });\n                    resolve(results);\n                  }\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  }\n\n  /**\n   * 生成查询缓存键\n   */\n  generateQueryKey(sql, params) {\n    const normalizedSql = sql.replace(/\\s+/g, ' ').trim().toLowerCase();\n    const paramsStr = JSON.stringify(params || []);\n    return `${normalizedSql}:${paramsStr}`;\n  }\n\n  /**\n   * 生成预处理语句键\n   */\n  generateStatementKey(sql) {\n    return sql.replace(/\\s+/g, ' ').trim().toLowerCase();\n  }\n\n  /**\n   * 判断查询是否可缓存\n   */\n  isCacheable(sql) {\n    const normalizedSql = sql.toLowerCase().trim();\n    // 只缓存SELECT查询，排除包含NOW()、RANDOM()等函数的查询\n    return (\n      normalizedSql.startsWith('select') &&\n      !normalizedSql.includes('now()') &&\n      !normalizedSql.includes('random()') &&\n      !normalizedSql.includes('current_timestamp')\n    );\n  }\n\n  /**\n   * 缓存查询结果\n   */\n  cacheResult(queryKey, result, ttl = 300000) {\n    // 默认5分钟\n    // 如果缓存已满，删除最旧的条目\n    if (this.queryCache.size >= this.options.cacheSize) {\n      const firstKey = this.queryCache.keys().next().value;\n      this.queryCache.delete(firstKey);\n    }\n\n    this.queryCache.set(queryKey, {\n      result: JSON.parse(JSON.stringify(result)), // 深拷贝\n      timestamp: Date.now(),\n      ttl\n    });\n  }\n\n  /**\n   * 检查缓存是否过期\n   */\n  isCacheExpired(cached) {\n    return Date.now() - cached.timestamp > cached.ttl;\n  }\n\n  /**\n   * 记录查询统计\n   */\n  recordQueryStats(sql, executionTime, fromCache, error = null) {\n    const queryType = this.getQueryType(sql);\n\n    if (!this.queryStats.has(queryType)) {\n      this.queryStats.set(queryType, {\n        count: 0,\n        totalTime: 0,\n        avgTime: 0,\n        minTime: Infinity,\n        maxTime: 0,\n        cacheHits: 0,\n        errors: 0\n      });\n    }\n\n    const stats = this.queryStats.get(queryType);\n    stats.count++;\n\n    if (fromCache) {\n      stats.cacheHits++;\n    } else {\n      stats.totalTime += executionTime;\n      stats.avgTime = stats.totalTime / (stats.count - stats.cacheHits);\n      stats.minTime = Math.min(stats.minTime, executionTime);\n      stats.maxTime = Math.max(stats.maxTime, executionTime);\n    }\n\n    if (error) {\n      stats.errors++;\n    }\n\n    if (this.options.enableQueryLogging) {\n      logger.debug('查询执行', {\n        sql: sql.substring(0, 100) + (sql.length > 100 ? '...' : ''),\n        executionTime: `${executionTime.toFixed(2)}ms`,\n        fromCache,\n        queryType\n      });\n    }\n  }\n\n  /**\n   * 获取查询类型\n   */\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 23 行)\n\n  getQueryType(sql) {\n    const normalizedSql = sql.toLowerCase().trim();\n    if (normalizedSql.startsWith('select')) {\n      return 'SELECT';\n    }\n    if (normalizedSql.startsWith('insert')) {\n      return 'INSERT';\n    }\n    if (normalizedSql.startsWith('update')) {\n      return 'UPDATE';\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (normalizedSql.startsWith('delete')) {\n      return 'DELETE';\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (normalizedSql.startsWith('create')) {\n      return 'CREATE';\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (normalizedSql.startsWith('drop')) {\n      return 'DROP';\n    }\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    // TODO: 考虑使用早期返回或策略模式来减少嵌套\n    if (normalizedSql.startsWith('alter')) {\n      return 'ALTER';\n    }\n    return 'OTHER';\n  }\n\n  /**\n   * 记录慢查询\n   */\n  logSlowQuery(sql, params, executionTime) {\n    logger.warn('慢查询检测', {\n      sql: sql.substring(0, 200) + (sql.length > 200 ? '...' : ''),\n      params: JSON.stringify(params),\n      executionTime: `${executionTime.toFixed(2)}ms`,\n      threshold: `${this.options.slowQueryThreshold}ms`\n    });\n  }\n\n  /**\n   * 获取查询统计信息\n   */\n  getQueryStats() {\n    const stats = {};\n    for (const [queryType, data] of this.queryStats.entries()) {\n      stats[queryType] = { ...data };\n    }\n    return {\n      queryStats: stats,\n      cacheStats: {\n        size: this.queryCache.size,\n        maxSize: this.options.cacheSize,\n        hitRate: this.calculateCacheHitRate()\n      },\n      preparedStatements: {\n        count: this.preparedStatements.size\n      }\n    };\n  }\n\n  /**\n   * 计算缓存命中率\n   */\n  calculateCacheHitRate() {\n    let totalQueries = 0;\n    let totalCacheHits = 0;\n\n    for (const stats of this.queryStats.values()) {\n      totalQueries += stats.count;\n      totalCacheHits += stats.cacheHits;\n    }\n\n    return totalQueries > 0 ? ((totalCacheHits / totalQueries) * 100).toFixed(2) : 0;\n  }\n\n  /**\n   * 清理缓存\n   */\n  clearCache() {\n    this.queryCache.clear();\n    logger.info('查询缓存已清理');\n  }\n\n  /**\n   * 清理预处理语句\n   */\n  clearPreparedStatements() {\n    for (const stmt of this.preparedStatements.values()) {\n      try {\n        stmt.finalize();\n      } catch (error) {\n        logger.error('清理预处理语句失败', { error: error.message });\n      }\n    }\n    this.preparedStatements.clear();\n    logger.info('预处理语句已清理');\n  }\n\n  /**\n   * 重置统计信息\n   */\n  resetStats() {\n    this.queryStats.clear();\n    logger.info('查询统计信息已重置');\n  }\n\n  /**\n   * 关闭优化器\n   */\n  close() {\n    this.clearCache();\n    this.clearPreparedStatements();\n    this.resetStats();\n  }\n}\n\n/**\n * 数据库连接池管理器\n */\nexport class ConnectionPoolManager {\n  constructor(options = {}) {\n    this.options = {\n      maxConnections: options.maxConnections || 10,\n      minConnections: options.minConnections || 2,\n      acquireTimeout: options.acquireTimeout || 30000,\n      idleTimeout: options.idleTimeout || 300000,\n      ...options\n    };\n\n    this.pool = [];\n    this.activeConnections = new Set();\n    this.waitingQueue = [];\n    this.stats = {\n      created: 0,\n      acquired: 0,\n      released: 0,\n      destroyed: 0,\n      timeouts: 0\n    };\n  }\n\n  /**\n   * 获取连接\n   */\n  async acquire() {\n    return new Promise((resolve, reject) => {\n      // 检查是否有可用连接\n      const availableConnection = this.pool.find((conn) => !conn.inUse);\n      if (availableConnection) {\n        availableConnection.inUse = true;\n        availableConnection.lastUsed = Date.now();\n        this.activeConnections.add(availableConnection);\n        this.stats.acquired++;\n        resolve(availableConnection.connection);\n        return;\n      }\n\n      // 如果可以创建新连接\n      if (this.pool.length < this.options.maxConnections) {\n        this.createConnection()\n          .then((connection) => {\n            this.stats.acquired++;\n            resolve(connection);\n          })\n          .catch(reject);\n        return;\n      }\n\n      // 加入等待队列\n      const timeout = setTimeout(() => {\n        const index = this.waitingQueue.findIndex((item) => item.resolve === resolve);\n        if (index !== -1) {\n          this.waitingQueue.splice(index, 1);\n          this.stats.timeouts++;\n          reject(new Error('获取数据库连接超时'));\n        }\n      }, this.options.acquireTimeout);\n\n      this.waitingQueue.push({ resolve, reject, timeout });\n    });\n  }\n\n  /**\n   * 释放连接\n   */\n  release(connection) {\n    const poolConnection = this.pool.find((conn) => conn.connection === connection);\n    if (poolConnection) {\n      poolConnection.inUse = false;\n      poolConnection.lastUsed = Date.now();\n      this.activeConnections.delete(poolConnection);\n      this.stats.released++;\n\n      // 处理等待队列\n      if (this.waitingQueue.length > 0) {\n        const { resolve, timeout } = this.waitingQueue.shift();\n        clearTimeout(timeout);\n        poolConnection.inUse = true;\n        poolConnection.lastUsed = Date.now();\n        this.activeConnections.add(poolConnection);\n        this.stats.acquired++;\n        resolve(connection);\n      }\n    }\n  }\n\n  /**\n   * 创建新连接\n   */\n  async createConnection() {\n    // 这里需要根据实际的数据库类型实现\n    // 示例使用SQLite\n    const sqlite3 = require('sqlite3').verbose();\n    const connection = new sqlite3.Database(':memory:');\n\n    const poolConnection = {\n      connection,\n      inUse: true,\n      created: Date.now(),\n      lastUsed: Date.now()\n    };\n\n    this.pool.push(poolConnection);\n    this.activeConnections.add(poolConnection);\n    this.stats.created++;\n\n    return connection;\n  }\n\n  /**\n   * 清理空闲连接\n   */\n  cleanupIdleConnections() {\n    const now = Date.now();\n    const connectionsToRemove = [];\n\n    for (const poolConnection of this.pool) {\n      if (\n        !poolConnection.inUse &&\n        now - poolConnection.lastUsed > this.options.idleTimeout &&\n        this.pool.length > this.options.minConnections\n      ) {\n        connectionsToRemove.push(poolConnection);\n      }\n    }\n\n    for (const poolConnection of connectionsToRemove) {\n      this.destroyConnection(poolConnection);\n    }\n  }\n\n  /**\n   * 销毁连接\n   */\n  destroyConnection(poolConnection) {\n    try {\n      poolConnection.connection.close();\n      const index = this.pool.indexOf(poolConnection);\n      if (index !== -1) {\n        this.pool.splice(index, 1);\n      }\n      this.activeConnections.delete(poolConnection);\n      this.stats.destroyed++;\n    } catch (error) {\n      logger.error('销毁数据库连接失败', { error: error.message });\n    }\n  }\n\n  /**\n   * 获取连接池统计信息\n   */\n  getStats() {\n    return {\n      ...this.stats,\n      totalConnections: this.pool.length,\n      activeConnections: this.activeConnections.size,\n      idleConnections: this.pool.length - this.activeConnections.size,\n      waitingRequests: this.waitingQueue.length,\n      maxConnections: this.options.maxConnections,\n      minConnections: this.options.minConnections\n    };\n  }\n\n  /**\n   * 关闭连接池\n   */\n  async close() {\n    // 清理等待队列\n    for (const { reject, timeout } of this.waitingQueue) {\n      clearTimeout(timeout);\n      reject(new Error('连接池正在关闭'));\n    }\n    this.waitingQueue = [];\n\n    // 关闭所有连接\n    for (const poolConnection of this.pool) {\n      this.destroyConnection(poolConnection);\n    }\n\n    logger.info('数据库连接池已关闭');\n  }\n}\n\n// 导出默认实例\nexport const defaultQueryOptimizer = new QueryOptimizer();\nexport const defaultConnectionPool = new ConnectionPoolManager();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/middleware/enhancedErrorHandler.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":25,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":25,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":43,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":43,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":51,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":51,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":59,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":59,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":67,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":67,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 409.","line":75,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":75,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":83,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":83,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 502.","line":90,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":90,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 429.","line":100,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":100,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":112,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":112,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":128,"column":69,"nodeType":"Literal","messageId":"noMagic","endLine":128,"endColumn":72},{"ruleId":"no-unused-vars","severity":2,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":194,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":194,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":215,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":215,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":222,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":222,"endColumn":52},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":243,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":243,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3.","line":261,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":261,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":261,"column":66,"nodeType":"Literal","messageId":"noMagic","endLine":261,"endColumn":70},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":282,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":282,"endColumn":55},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60000.","line":282,"column":67,"nodeType":"Literal","messageId":"noMagic","endLine":282,"endColumn":72},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":296,"column":63,"nodeType":"Literal","messageId":"noMagic","endLine":296,"endColumn":66}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 增强的错误处理中间件\n * 提供统一的错误响应格式和错误分类\n */\n\nimport { logger } from '../utils/logger.js';\n\n// 错误类型枚举\nexport const ErrorTypes = {\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n  AUTHORIZATION_ERROR: 'AUTHORIZATION_ERROR',\n  NOT_FOUND_ERROR: 'NOT_FOUND_ERROR',\n  CONFLICT_ERROR: 'CONFLICT_ERROR',\n  DATABASE_ERROR: 'DATABASE_ERROR',\n  EXTERNAL_SERVICE_ERROR: 'EXTERNAL_SERVICE_ERROR',\n  RATE_LIMIT_ERROR: 'RATE_LIMIT_ERROR',\n  INTERNAL_SERVER_ERROR: 'INTERNAL_SERVER_ERROR'\n};\n\n// 自定义错误类\nexport class AppError extends Error {\n  constructor(\n    message,\n    statusCode = 500,\n    errorType = ErrorTypes.INTERNAL_SERVER_ERROR,\n    details = null\n  ) {\n    super(message);\n    this.name = 'AppError';\n    this.statusCode = statusCode;\n    this.errorType = errorType;\n    this.details = details;\n    this.isOperational = true;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\n// 验证错误\nexport class ValidationError extends AppError {\n  constructor(message, details = null) {\n    super(message, 400, ErrorTypes.VALIDATION_ERROR, details);\n    this.name = 'ValidationError';\n  }\n}\n\n// 认证错误\nexport class AuthenticationError extends AppError {\n  constructor(message = '认证失败') {\n    super(message, 401, ErrorTypes.AUTHENTICATION_ERROR);\n    this.name = 'AuthenticationError';\n  }\n}\n\n// 授权错误\nexport class AuthorizationError extends AppError {\n  constructor(message = '权限不足') {\n    super(message, 403, ErrorTypes.AUTHORIZATION_ERROR);\n    this.name = 'AuthorizationError';\n  }\n}\n\n// 资源未找到错误\nexport class NotFoundError extends AppError {\n  constructor(resource = '资源') {\n    super(`${resource}未找到`, 404, ErrorTypes.NOT_FOUND_ERROR);\n    this.name = 'NotFoundError';\n  }\n}\n\n// 冲突错误\nexport class ConflictError extends AppError {\n  constructor(message = '资源冲突') {\n    super(message, 409, ErrorTypes.CONFLICT_ERROR);\n    this.name = 'ConflictError';\n  }\n}\n\n// 数据库错误\nexport class DatabaseError extends AppError {\n  constructor(message, originalError = null) {\n    super(message, 500, ErrorTypes.DATABASE_ERROR, originalError);\n    this.name = 'DatabaseError';\n  }\n}\n\n// 外部服务错误\nexport class ExternalServiceError extends AppError {\n  constructor(service, message, statusCode = 502) {\n    super(`${service}服务错误: ${message}`, statusCode, ErrorTypes.EXTERNAL_SERVICE_ERROR);\n    this.name = 'ExternalServiceError';\n    this.service = service;\n  }\n}\n\n// 限流错误\nexport class RateLimitError extends AppError {\n  constructor(message = '请求过于频繁，请稍后再试') {\n    super(message, 429, ErrorTypes.RATE_LIMIT_ERROR);\n    this.name = 'RateLimitError';\n  }\n}\n\n// 错误响应格式化\nfunction formatErrorResponse(error, req) {\n  const response = {\n    success: false,\n    error: {\n      type: error.errorType || ErrorTypes.INTERNAL_SERVER_ERROR,\n      message: error.message,\n      code: error.statusCode || 500\n    },\n    timestamp: new Date().toISOString(),\n    path: req.originalUrl,\n    method: req.method\n  };\n\n  // 开发环境下包含更多调试信息\n  if (process.env.NODE_ENV === 'development') {\n    response.error.stack = error.stack;\n    if (error.details) {\n      response.error.details = error.details;\n    }\n  }\n\n  // 生产环境下隐藏敏感信息\n  if (process.env.NODE_ENV === 'production' && error.statusCode === 500) {\n    response.error.message = '服务器内部错误';\n  }\n\n  return response;\n}\n\n// 数据库错误处理\nfunction handleDatabaseError(error) {\n  // SQLite错误处理\n  if (error.code === 'SQLITE_CONSTRAINT_UNIQUE') {\n    return new ConflictError('数据已存在，请检查唯一性约束');\n  }\n\n  if (error.code === 'SQLITE_CONSTRAINT_FOREIGNKEY') {\n    return new ValidationError('外键约束违反，请检查关联数据');\n  }\n\n  if (error.message && error.message.includes('no such column')) {\n    return new DatabaseError('数据库结构错误，请检查字段名称');\n  }\n\n  if (error.message && error.message.includes('no such table')) {\n    return new DatabaseError('数据表不存在，请检查数据库迁移');\n  }\n\n  // Knex.js错误处理\n  if (error.code === 'ER_DUP_ENTRY') {\n    return new ConflictError('数据重复，请检查唯一性约束');\n  }\n\n  if (error.code === 'ER_NO_REFERENCED_ROW_2') {\n    return new ValidationError('外键约束违反，关联数据不存在');\n  }\n\n  return new DatabaseError('数据库操作失败', error);\n}\n\n// JWT错误处理\nfunction handleJWTError(error) {\n  if (error.name === 'JsonWebTokenError') {\n    return new AuthenticationError('无效的访问令牌');\n  }\n\n  if (error.name === 'TokenExpiredError') {\n    return new AuthenticationError('访问令牌已过期');\n  }\n\n  if (error.name === 'NotBeforeError') {\n    return new AuthenticationError('访问令牌尚未生效');\n  }\n\n  return new AuthenticationError('令牌验证失败');\n}\n\n// 验证错误处理\nfunction handleValidationError(error) {\n  if (error.name === 'ValidationError' && error.details) {\n    const messages = error.details.map((detail) => detail.message);\n    return new ValidationError('数据验证失败', messages);\n  }\n\n  return new ValidationError(error.message);\n}\n\n// 主错误处理中间件\nexport function enhancedErrorHandler(error, req, res, next) {\n  let processedError = error;\n\n  // 如果不是自定义错误，进行错误转换\n  if (!error.isOperational) {\n    // 数据库错误\n    if (error.code && (error.code.startsWith('SQLITE_') || error.code.startsWith('ER_'))) {\n      processedError = handleDatabaseError(error);\n    }\n    // JWT错误\n    else if (error.name && error.name.includes('Token')) {\n      processedError = handleJWTError(error);\n    }\n    // 验证错误\n    else if (error.name === 'ValidationError') {\n      processedError = handleValidationError(error);\n    }\n    // 其他未知错误\n    else {\n      processedError = new AppError(\n        error.message || '服务器内部错误',\n        error.statusCode || 500,\n        ErrorTypes.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  // 记录错误日志\n  const logLevel = processedError.statusCode >= 500 ? 'error' : 'warn';\n  logger[logLevel]('请求处理错误', {\n    error: {\n      name: processedError.name,\n      message: processedError.message,\n      type: processedError.errorType,\n      statusCode: processedError.statusCode,\n      stack: processedError.stack\n    },\n    request: {\n      method: req.method,\n      url: req.originalUrl,\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      userId: req.user?.id,\n      body: req.method !== 'GET' ? req.body : undefined\n    }\n  });\n\n  // 发送错误响应\n  const errorResponse = formatErrorResponse(processedError, req);\n  res.status(processedError.statusCode || 500).json(errorResponse);\n}\n\n// 404错误处理中间件\nexport function notFoundHandler(req, res, next) {\n  const error = new NotFoundError(`路由 ${req.originalUrl}`);\n  next(error);\n}\n\n// 异步错误捕获包装器\nexport function asyncHandler(fn) {\n  return (req, res, next) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n}\n\n// 错误恢复策略\nexport class ErrorRecoveryStrategy {\n  static async retryOperation(operation, maxRetries = 3, delay = 1000) {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        if (attempt === maxRetries) {\n          throw error;\n        }\n\n        // 指数退避\n        const waitTime = delay * Math.pow(2, attempt - 1);\n        await new Promise((resolve) => setTimeout(resolve, waitTime));\n\n        logger.warn(`操作重试 ${attempt}/${maxRetries}`, {\n          error: error.message,\n          nextRetryIn: waitTime\n        });\n      }\n    }\n  }\n\n  static async circuitBreaker(operation, threshold = 5, timeout = 60000) {\n    // 简单的断路器实现\n    const key = operation.name || 'default';\n\n    if (!this.failures) {\n      this.failures = new Map();\n    }\n\n    const failures = this.failures.get(key) || { count: 0, lastFailure: 0 };\n\n    // 检查断路器状态\n    if (failures.count >= threshold) {\n      const timeSinceLastFailure = Date.now() - failures.lastFailure;\n      if (timeSinceLastFailure < timeout) {\n        throw new ExternalServiceError('服务', '服务暂时不可用，请稍后重试', 503);\n      } else {\n        // 重置计数器\n        failures.count = 0;\n      }\n    }\n\n    try {\n      const result = await operation();\n      // 成功时重置计数器\n      failures.count = 0;\n      this.failures.set(key, failures);\n      return result;\n    } catch (error) {\n      // 失败时增加计数器\n      failures.count++;\n      failures.lastFailure = Date.now();\n      this.failures.set(key, failures);\n      throw error;\n    }\n  }\n}\n\n// 健康检查错误处理\nexport function healthCheckErrorHandler(error) {\n  if (error.code === 'ECONNREFUSED') {\n    return {\n      status: 'unhealthy',\n      error: '数据库连接失败',\n      details: error.message\n    };\n  }\n\n  if (error.code === 'ETIMEDOUT') {\n    return {\n      status: 'unhealthy',\n      error: '服务响应超时',\n      details: error.message\n    };\n  }\n\n  return {\n    status: 'unhealthy',\n    error: '健康检查失败',\n    details: error.message\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/middleware/errorHandler.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":16,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":16,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":41,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":41,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":43,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":43,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":90,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":90,"endColumn":62},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 409.","line":106,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":106,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":112,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":112,"endColumn":39},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":116,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":116,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":122,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":122,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":134,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":134,"endColumn":39},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":138,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":138,"endColumn":39},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":141,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":141,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import logger from '../utils/logger.js';\nimport { AppError } from '../utils/AppError.js';\n\n/**\n * 统一错误处理中间件\n * @param {Error} err - 错误对象\n * @param {Object} req - 请求对象\n * @param {Object} res - 响应对象\n * @param {Function} next - 下一个中间件\n */\nconst errorHandler = (err, req, res, next) => {\n  let error = err;\n\n  // 如果不是 AppError 实例，转换为 AppError\n  if (!(error instanceof AppError)) {\n    const statusCode = error.statusCode || 500;\n    const message = error.message || '服务器内部错误';\n    error = new AppError(message, statusCode);\n  }\n\n  // 记录错误日志\n  const logData = {\n    error: {\n      message: error.message,\n      statusCode: error.statusCode,\n      errorCode: error.errorCode,\n      stack: error.stack\n    },\n    request: {\n      method: req.method,\n      url: req.originalUrl,\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      userId: req.user?.id,\n      body: req.method !== 'GET' ? req.body : undefined\n    },\n    timestamp: new Date().toISOString()\n  };\n\n  // 根据错误级别记录不同级别的日志\n  if (error.statusCode >= 500) {\n    logger.error('服务器错误', logData);\n  } else if (error.statusCode >= 400) {\n    logger.warn('客户端错误', logData);\n  } else {\n    logger.info('请求错误', logData);\n  }\n\n  // 构建响应数据\n  const responseData = {\n    success: false,\n    error: {\n      code: error.errorCode,\n      message: error.message,\n      details: error.details,\n      timestamp: error.timestamp\n    }\n  };\n\n  // 开发环境下包含堆栈信息\n  if (process.env.NODE_ENV === 'development') {\n    responseData.error.stack = error.stack;\n    responseData.error.request = {\n      method: req.method,\n      url: req.originalUrl\n    };\n  }\n\n  // 发送错误响应\n  res.status(error.statusCode).json(responseData);\n};\n\n/**\n * 异步错误包装器\n * 用于包装异步路由处理器，自动捕获异步错误\n * @param {Function} fn - 异步函数\n * @returns {Function} 包装后的函数\n */\nconst asyncHandler = (fn) => (req, res, next) => {\n  Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n/**\n * 404 错误处理中间件\n * @param {Object} req - 请求对象\n * @param {Object} res - 响应对象\n * @param {Function} next - 下一个中间件\n */\nconst notFoundHandler = (req, res, next) => {\n  const error = new AppError(`路由 ${req.originalUrl} 未找到`, 404, 'ROUTE_NOT_FOUND', {\n    method: req.method,\n    url: req.originalUrl\n  });\n  next(error);\n};\n\n/**\n * 数据库错误转换器\n * 将数据库特定错误转换为应用程序错误\n * @param {Error} err - 数据库错误\n * @returns {AppError} 应用程序错误\n */\nconst handleDatabaseError = (err) => {\n  // SQLite 错误处理\n  if (err.code === 'SQLITE_CONSTRAINT_UNIQUE') {\n    return new AppError('数据已存在', 409, 'DUPLICATE_ENTRY', {\n      field: err.message.match(/\\.(\\w+)/)?.[1]\n    });\n  }\n\n  if (err.code === 'SQLITE_CONSTRAINT_FOREIGNKEY') {\n    return new AppError('关联数据不存在', 400, 'FOREIGN_KEY_CONSTRAINT');\n  }\n\n  if (err.code === 'SQLITE_CONSTRAINT_NOTNULL') {\n    return new AppError('必填字段不能为空', 400, 'REQUIRED_FIELD_MISSING', {\n      field: err.message.match(/\\.(\\w+)/)?.[1]\n    });\n  }\n\n  // 通用数据库错误\n  return new AppError('数据库操作失败', 500, 'DATABASE_ERROR', {\n    originalError: err.message\n  });\n};\n\n/**\n * JWT 错误转换器\n * @param {Error} err - JWT 错误\n * @returns {AppError} 应用程序错误\n */\nconst handleJWTError = (err) => {\n  if (err.name === 'JsonWebTokenError') {\n    return new AppError('无效的访问令牌', 401, 'INVALID_TOKEN');\n  }\n\n  if (err.name === 'TokenExpiredError') {\n    return new AppError('访问令牌已过期', 401, 'TOKEN_EXPIRED');\n  }\n\n  return new AppError('令牌验证失败', 401, 'TOKEN_VERIFICATION_FAILED');\n};\n\nexport { errorHandler, asyncHandler, notFoundHandler, handleDatabaseError, handleJWTError };\n\nexport default errorHandler;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/middleware/performance.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":22,"column":61,"nodeType":"Literal","messageId":"noMagic","endLine":22,"endColumn":65},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":23,"column":65,"nodeType":"Literal","messageId":"noMagic","endLine":23,"endColumn":68},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":24,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":24,"endColumn":62},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5000.","line":69,"column":8,"nodeType":"Literal","messageId":"noMagic","endLine":69,"endColumn":12},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":120,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":120,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":121,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":121,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":121,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":121,"endColumn":57},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":121,"column":60,"nodeType":"Literal","messageId":"noMagic","endLine":121,"endColumn":64},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":122,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":122,"endColumn":52},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":122,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":122,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":122,"column":62,"nodeType":"Literal","messageId":"noMagic","endLine":122,"endColumn":66},{"ruleId":"prefer-destructuring","severity":2,"message":"Use array destructuring.","line":127,"column":11,"nodeType":"VariableDeclarator","messageId":"preferDestructuring","endLine":127,"endColumn":52},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":131,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":131,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":166,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":166,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":166,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":166,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":168,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":168,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":192,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":192,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.95.","line":212,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":212,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.99.","line":213,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":213,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.9.","line":323,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":323,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.9.","line":324,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":324,"endColumn":60},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 2000.","line":325,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":325,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":328,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":328,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 503.","line":328,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":328,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":335,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":335,"endColumn":49},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":336,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":336,"endColumn":43},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":336,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":336,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":336,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":336,"endColumn":57},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":337,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":337,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":337,"column":48,"nodeType":"Literal","messageId":"noMagic","endLine":337,"endColumn":52},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":337,"column":55,"nodeType":"Literal","messageId":"noMagic","endLine":337,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":341,"column":72,"nodeType":"Literal","messageId":"noMagic","endLine":341,"endColumn":75}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import os from 'os';\nimport process from 'process';\nimport { performance } from 'perf_hooks';\nimport logger from '../utils/logger.js';\n\n/**\n * 性能监控中间件\n */\nexport class PerformanceMonitor {\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 44 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 44 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 44 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 44 行)\n\n  constructor(options = {}) {\n    this.options = {\n      enableMetrics: options.enableMetrics !== false,\n      enableLogging: options.enableLogging !== false,\n      slowRequestThreshold: options.slowRequestThreshold || 1000, // 1秒\n      memoryWarningThreshold: options.memoryWarningThreshold || 0.8, // 80%\n      cpuWarningThreshold: options.cpuWarningThreshold || 0.8, // 80%\n      ...options\n    };\n\n    this.metrics = {\n      requests: {\n        total: 0,\n        success: 0,\n        error: 0,\n        slow: 0\n      },\n      responseTime: {\n        min: Infinity,\n        max: 0,\n        avg: 0,\n        p95: 0,\n        p99: 0\n      },\n      memory: {\n        used: 0,\n        free: 0,\n        total: 0,\n        percentage: 0\n      },\n      cpu: {\n        usage: 0,\n        loadAverage: [0, 0, 0]\n      },\n      errors: new Map(),\n      endpoints: new Map()\n    };\n\n    this.responseTimes = [];\n    this.maxResponseTimeHistory = 1000; // 保留最近1000个响应时间\n\n    // 暂时禁用系统监控，避免高资源使用率警告\n    // this.startSystemMonitoring();\n  }\n\n  /**\n   * 启动系统监控\n   */\n  startSystemMonitoring() {\n    setInterval(() => {\n      this.updateSystemMetrics();\n    }, 5000); // 每5秒更新一次\n  }\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 29 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 29 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 29 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 29 行)\n\n  /**\n   * 更新系统指标\n   */\n  updateSystemMetrics() {\n    // 内存使用情况\n    const memUsage = process.memoryUsage();\n    const totalMem = os.totalmem();\n    const freeMem = os.freemem();\n    const usedMem = totalMem - freeMem;\n\n    this.metrics.memory = {\n      used: usedMem,\n      free: freeMem,\n      total: totalMem,\n      percentage: usedMem / totalMem,\n      heap: {\n        used: memUsage.heapUsed,\n        total: memUsage.heapTotal,\n        external: memUsage.external,\n        rss: memUsage.rss\n      }\n    };\n\n    // CPU负载\n    this.metrics.cpu = {\n      loadAverage: os.loadavg(),\n      cpuCount: os.cpus().length\n    };\n\n    // 检查警告阈值\n    this.checkThresholds();\n  }\n\n  /**\n   * 检查性能阈值\n   */\n  checkThresholds() {\n    // 内存警告\n    if (this.metrics.memory.percentage > this.options.memoryWarningThreshold) {\n      logger.warn('内存使用率过高', {\n        usage: `${(this.metrics.memory.percentage * 100).toFixed(2)}%`,\n        used: `${(this.metrics.memory.used / 1024 / 1024 / 1024).toFixed(2)}GB`,\n        total: `${(this.metrics.memory.total / 1024 / 1024 / 1024).toFixed(2)}GB`\n      });\n    }\n\n    // CPU负载警告\n    const avgLoad = this.metrics.cpu.loadAverage[0];\n    const cpuUsage = avgLoad / this.metrics.cpu.cpuCount;\n    if (cpuUsage > this.options.cpuWarningThreshold) {\n      logger.warn('CPU负载过高', {\n        usage: `${(cpuUsage * 100).toFixed(2)}%`,\n        loadAverage: this.metrics.cpu.loadAverage,\n        cpuCount: this.metrics.cpu.cpuCount\n      });\n    }\n  }\n\n  /**\n   * 记录请求指标\n   */\n  recordRequest(req, res, responseTime) {\n    this.metrics.requests.total++;\n\n    // 记录响应时间\n    this.responseTimes.push(responseTime);\n    if (this.responseTimes.length > this.maxResponseTimeHistory) {\n      this.responseTimes.shift();\n    }\n\n    // 更新响应时间统计\n    this.updateResponseTimeStats();\n\n    // 记录慢请求\n    if (responseTime > this.options.slowRequestThreshold) {\n      this.metrics.requests.slow++;\n      logger.warn('慢请求检测', {\n        method: req.method,\n        path: req.path,\n        responseTime: `${responseTime}ms`,\n        userAgent: req.get('User-Agent'),\n        ip: req.ip\n      });\n    }\n\n    // 记录状态码\n    if (res.statusCode >= 200 && res.statusCode < 400) {\n      this.metrics.requests.success++;\n    } else if (res.statusCode >= 400) {\n      this.metrics.requests.error++;\n    }\n\n    // 记录端点统计\n    const endpoint = `${req.method} ${req.route?.path || req.path}`;\n    if (!this.metrics.endpoints.has(endpoint)) {\n      this.metrics.endpoints.set(endpoint, {\n        count: 0,\n        totalTime: 0,\n        avgTime: 0,\n        minTime: Infinity,\n        maxTime: 0,\n        errors: 0\n      });\n    }\n\n    const endpointStats = this.metrics.endpoints.get(endpoint);\n    endpointStats.count++;\n    endpointStats.totalTime += responseTime;\n    endpointStats.avgTime = endpointStats.totalTime / endpointStats.count;\n    endpointStats.minTime = Math.min(endpointStats.minTime, responseTime);\n    endpointStats.maxTime = Math.max(endpointStats.maxTime, responseTime);\n\n    if (res.statusCode >= 400) {\n      endpointStats.errors++;\n    }\n  }\n\n  /**\n   * 更新响应时间统计\n   */\n  updateResponseTimeStats() {\n    if (this.responseTimes.length === 0) {\n      return;\n    }\n\n    const sorted = [...this.responseTimes].sort((a, b) => a - b);\n    const len = sorted.length;\n\n    this.metrics.responseTime = {\n      min: sorted[0],\n      max: sorted[len - 1],\n      avg: sorted.reduce((sum, time) => sum + time, 0) / len,\n      p95: sorted[Math.floor(len * 0.95)],\n      p99: sorted[Math.floor(len * 0.99)]\n    };\n  }\n\n  /**\n   * 记录错误\n   */\n  recordError(error, req) {\n    const errorKey = `${error.name}: ${error.message}`;\n    const errorCount = this.metrics.errors.get(errorKey) || 0;\n    this.metrics.errors.set(errorKey, errorCount + 1);\n\n    logger.error('请求处理错误', {\n      error: error.message,\n      stack: error.stack,\n      method: req.method,\n      path: req.path,\n      ip: req.ip,\n      userAgent: req.get('User-Agent')\n    });\n  }\n\n  /**\n   * 获取性能指标\n   */\n  getMetrics() {\n    return {\n      ...this.metrics,\n      uptime: process.uptime(),\n      timestamp: new Date().toISOString(),\n      nodeVersion: process.version,\n      platform: os.platform(),\n      arch: os.arch()\n    };\n  }\n\n  /**\n   * 重置指标\n   */\n  resetMetrics() {\n    this.metrics.requests = {\n      total: 0,\n      success: 0,\n      error: 0,\n      slow: 0\n    };\n    this.metrics.errors.clear();\n    this.metrics.endpoints.clear();\n    this.responseTimes = [];\n  }\n\n  /**\n   * 性能监控中间件\n   */\n  middleware() {\n    return (req, res, next) => {\n      const startTime = performance.now();\n\n      // 记录请求开始时间\n      req.startTime = startTime;\n\n      // 监听响应结束事件\n      res.on('finish', () => {\n        const endTime = performance.now();\n        const responseTime = Math.round(endTime - startTime);\n\n        if (this.options.enableMetrics) {\n          this.recordRequest(req, res, responseTime);\n        }\n\n        if (this.options.enableLogging) {\n          logger.info('请求完成', {\n            method: req.method,\n            path: req.path,\n            statusCode: res.statusCode,\n            responseTime: `${responseTime}ms`,\n            ip: req.ip,\n            userAgent: req.get('User-Agent')\n          });\n        }\n      });\n\n      // 监听错误事件\n      res.on('error', (error) => {\n        if (this.options.enableMetrics) {\n          this.recordError(error, req);\n        }\n      });\n\n      next();\n    };\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 33 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 36 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 39 行)\n\n    // TODO: 考虑将此函数拆分为更小的函数 (当前 42 行)\n  }\n}\n\n/**\n * 健康检查中间件\n */\nexport const healthCheck = (monitor) => (req, res) => {\n  const metrics = monitor.getMetrics();\n\n  // 判断系统健康状态\n  const isHealthy =\n    metrics.memory.percentage < 0.9 && // 内存使用率小于90%\n    metrics.cpu.loadAverage[0] / metrics.cpu.cpuCount < 0.9 && // CPU负载小于90%\n    metrics.responseTime.avg < 2000; // 平均响应时间小于2秒\n\n  const status = isHealthy ? 'healthy' : 'unhealthy';\n  const statusCode = isHealthy ? 200 : 503;\n\n  res.status(statusCode).json({\n    status,\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    memory: {\n      usage: `${(metrics.memory.percentage * 100).toFixed(2)}%`,\n      used: `${(metrics.memory.used / 1024 / 1024 / 1024).toFixed(2)}GB`,\n      total: `${(metrics.memory.total / 1024 / 1024 / 1024).toFixed(2)}GB`\n    },\n    cpu: {\n      loadAverage: metrics.cpu.loadAverage,\n      usage: `${((metrics.cpu.loadAverage[0] / metrics.cpu.cpuCount) * 100).toFixed(2)}%`\n    },\n    requests: metrics.requests,\n    responseTime: {\n      avg: `${metrics.responseTime.avg.toFixed(2)}ms`,\n\n      // TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n      // TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n      // TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n      // TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n      p95: `${metrics.responseTime.p95}ms`,\n      p99: `${metrics.responseTime.p99}ms`\n    }\n  });\n};\n\n/**\n * 性能指标API中间件\n */\nexport const metricsEndpoint = (monitor) => (req, res) => {\n  const metrics = monitor.getMetrics();\n\n  // 转换端点统计为数组格式\n  const endpoints = Array.from(metrics.endpoints.entries()).map(([path, stats]) => ({\n    path,\n    ...stats\n  }));\n\n  // 转换错误统计为数组格式\n  const errors = Array.from(metrics.errors.entries()).map(([error, count]) => ({\n    error,\n    count\n  }));\n\n  res.json({\n    ...metrics,\n    endpoints,\n    errors\n  });\n};\n\n// 创建默认性能监控实例\nexport const defaultPerformanceMonitor = new PerformanceMonitor();\n\n// 导出中间件函数\nexport const performanceMiddleware = defaultPerformanceMonitor.middleware();\nexport const healthCheckEndpoint = healthCheck(defaultPerformanceMonitor);\nexport const metricsApiEndpoint = metricsEndpoint(defaultPerformanceMonitor);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/middleware/security.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 7.","line":100,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":100,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 16.","line":129,"column":81,"nodeType":"Literal","messageId":"noMagic","endLine":129,"endColumn":83},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 15.","line":230,"column":15,"nodeType":"Literal","messageId":"noMagic","endLine":230,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":230,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":230,"endColumn":22},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":230,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":230,"endColumn":29},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":264,"column":46,"nodeType":"Literal","messageId":"noMagic","endLine":264,"endColumn":50},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":264,"column":53,"nodeType":"Literal","messageId":"noMagic","endLine":264,"endColumn":57},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":265,"column":52,"nodeType":"Literal","messageId":"noMagic","endLine":265,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 8192.","line":266,"column":50,"nodeType":"Literal","messageId":"noMagic","endLine":266,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 36.","line":330,"column":76,"nodeType":"Literal","messageId":"noMagic","endLine":330,"endColumn":78},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9.","line":330,"column":90,"nodeType":"Literal","messageId":"noMagic","endLine":330,"endColumn":91}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import jwt from 'jsonwebtoken';\nimport rateLimit from 'express-rate-limit';\nimport {\n  AuthenticationError,\n  AuthorizationError,\n  ValidationError\n} from '../utils/AppError.js';\nimport logger from '../utils/logger.js';\n\n/**\n * JWT认证中间件增强版\n * 支持多种token来源、token刷新、黑名单检查\n */\nexport class JWTAuthenticator {\n  constructor(options = {}) {\n    this.secret = options.secret || process.env.JWT_SECRET || 'default-secret';\n    this.refreshSecret =\n      options.refreshSecret || process.env.JWT_REFRESH_SECRET || 'default-refresh-secret';\n    this.tokenExpiry = options.tokenExpiry || '15m';\n    this.refreshTokenExpiry = options.refreshTokenExpiry || '7d';\n    this.blacklistedTokens = new Set(); // 简单的内存黑名单，生产环境应使用Redis\n    this.algorithm = options.algorithm || 'HS256';\n  }\n\n  /**\n   * 生成访问令牌\n   */\n  generateAccessToken(payload) {\n    return jwt.sign(payload, this.secret, {\n      expiresIn: this.tokenExpiry,\n      algorithm: this.algorithm,\n      issuer: 'zero-carbon-system',\n      audience: 'zero-carbon-users'\n    });\n  }\n\n  /**\n   * 生成刷新令牌\n   */\n  generateRefreshToken(payload) {\n    return jwt.sign(payload, this.refreshSecret, {\n      expiresIn: this.refreshTokenExpiry,\n      algorithm: this.algorithm,\n      issuer: 'zero-carbon-system',\n      audience: 'zero-carbon-users'\n    });\n  }\n\n  /**\n   * 验证访问令牌\n   */\n  verifyAccessToken(token) {\n    try {\n      if (this.blacklistedTokens.has(token)) {\n        throw new AuthenticationError('令牌已被撤销');\n      }\n\n      return jwt.verify(token, this.secret, {\n        algorithms: [this.algorithm],\n        issuer: 'zero-carbon-system',\n        audience: 'zero-carbon-users'\n      });\n    } catch (error) {\n      if (error instanceof jwt.TokenExpiredError) {\n        throw new AuthenticationError('令牌已过期');\n      } else if (error instanceof jwt.JsonWebTokenError) {\n        throw new AuthenticationError('无效的令牌');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * 验证刷新令牌\n   */\n  verifyRefreshToken(token) {\n    try {\n      return jwt.verify(token, this.refreshSecret, {\n        algorithms: [this.algorithm],\n        issuer: 'zero-carbon-system',\n        audience: 'zero-carbon-users'\n      });\n    } catch (error) {\n      if (error instanceof jwt.TokenExpiredError) {\n        throw new AuthenticationError('刷新令牌已过期');\n      } else if (error instanceof jwt.JsonWebTokenError) {\n        throw new AuthenticationError('无效的刷新令牌');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * 从请求中提取令牌\n   */\n  extractToken(req) {\n    // 1. 从Authorization头提取\n    const authHeader = req.headers.authorization;\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      return authHeader.substring(7);\n    }\n\n    // 2. 从Cookie提取\n    if (req.cookies && req.cookies.accessToken) {\n      return req.cookies.accessToken;\n    }\n\n    // 3. 从查询参数提取（不推荐，仅用于特殊情况）\n    if (req.query.token) {\n      return req.query.token;\n    }\n\n    return null;\n  }\n\n  /**\n   * 撤销令牌（加入黑名单）\n   */\n  revokeToken(token) {\n    this.blacklistedTokens.add(token);\n    logger.info('令牌已撤销', { tokenHash: this.hashToken(token) });\n  }\n\n  /**\n   * 令牌哈希（用于日志记录，避免泄露完整令牌）\n   */\n  hashToken(token) {\n    const crypto = require('crypto');\n    return crypto.createHash('sha256').update(token).digest('hex').substring(0, 16);\n  }\n\n  /**\n   * 认证中间件\n   */\n  authenticate(_options = {}) {\n    return (req, res, next) => {\n      try {\n        const token = this.extractToken(req);\n\n        if (!token) {\n          throw new AuthenticationError('缺少认证令牌');\n        }\n\n        const decoded = this.verifyAccessToken(token);\n        req.user = decoded;\n        req.token = token;\n\n        // 记录认证成功日志\n        logger.info('用户认证成功', {\n          userId: decoded.id,\n          username: decoded.username,\n          role: decoded.role,\n          ip: req.ip,\n          userAgent: req.get('User-Agent')\n        });\n\n        next();\n      } catch (error) {\n        logger.warn('认证失败', {\n          error: error.message,\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          path: req.path\n        });\n        next(error);\n      }\n    };\n  }\n\n  /**\n   * 角色授权中间件\n   */\n  authorize(requiredRoles = []) {\n    return (req, res, next) => {\n      try {\n        if (!req.user) {\n          throw new AuthenticationError('用户未认证');\n        }\n\n        const userRole = req.user.role;\n        const hasPermission = Array.isArray(requiredRoles)\n          ? requiredRoles.includes(userRole)\n          : requiredRoles === userRole;\n\n        if (!hasPermission) {\n          throw new AuthorizationError('权限不足', {\n            requiredRoles,\n            userRole\n          });\n        }\n\n        next();\n      } catch (error) {\n        logger.warn('授权失败', {\n          error: error.message,\n          userId: req.user?.id,\n          userRole: req.user?.role,\n          requiredRoles,\n          path: req.path\n        });\n        next(error);\n      }\n    };\n  }\n}\n\n/**\n * 安全头中间件\n */\nexport const securityHeaders = () => (req, res, next) => {\n  // 设置安全响应头\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n  res.setHeader('X-Frame-Options', 'DENY');\n  res.setHeader('X-XSS-Protection', '1; mode=block');\n  res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');\n  res.setHeader('Permissions-Policy', 'geolocation=(), microphone=(), camera=()');\n\n  // 移除可能泄露服务器信息的头\n  res.removeHeader('X-Powered-By');\n  res.removeHeader('Server');\n\n  next();\n};\n\n/**\n * API速率限制中间件\n */\nexport const createRateLimiter = (options = {}) => {\n  const defaultOptions = {\n    windowMs: 15 * 60 * 1000, // 15分钟\n    max: 100, // 每个IP最多100个请求\n    message: {\n      error: {\n        code: 'RATE_LIMIT_EXCEEDED',\n        message: '请求过于频繁，请稍后再试'\n      }\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    skip: (req) =>\n      // 跳过健康检查和静态资源\n      req.path === '/health' || req.path.startsWith('/static/'),\n    keyGenerator: (req) =>\n      // 对认证用户使用用户ID，对匿名用户使用IP\n      req.user?.id || req.ip,\n    onLimitReached: (req, _res, _options) => {\n      logger.warn('速率限制触发', {\n        ip: req.ip,\n        userId: req.user?.id,\n        path: req.path,\n        method: req.method,\n        userAgent: req.get('User-Agent')\n      });\n    }\n  };\n\n  return rateLimit({ ...defaultOptions, ...options });\n};\n\n/**\n * 输入大小限制中间件\n */\nexport const inputSizeLimit = (options = {}) => {\n  const maxBodySize = options.maxBodySize || 1024 * 1024; // 1MB\n  const maxQueryLength = options.maxQueryLength || 1000;\n  const maxHeaderSize = options.maxHeaderSize || 8192;\n\n  return (req, res, next) => {\n    try {\n      // 检查请求体大小\n      const contentLength = parseInt(req.get('Content-Length') || '0');\n      if (contentLength > maxBodySize) {\n        throw new ValidationError('请求体过大', {\n          maxSize: maxBodySize,\n          actualSize: contentLength\n        });\n      }\n\n      // 检查查询字符串长度\n      const queryString = req.url.split('?')[1] || '';\n      if (queryString.length > maxQueryLength) {\n        throw new ValidationError('查询参数过长', {\n          maxLength: maxQueryLength,\n          actualLength: queryString.length\n        });\n      }\n\n      // 检查头部大小\n      const headerSize = JSON.stringify(req.headers).length;\n      if (headerSize > maxHeaderSize) {\n        throw new ValidationError('请求头过大', {\n          maxSize: maxHeaderSize,\n          actualSize: headerSize\n        });\n      }\n\n      next();\n    } catch (error) {\n      next(error);\n    }\n  };\n};\n\n/**\n * IP白名单中间件\n */\nexport const ipWhitelist =\n  (allowedIPs = []) =>\n    (req, res, next) => {\n      const clientIP = req.ip || req.connection.remoteAddress;\n\n      if (allowedIPs.length > 0 && !allowedIPs.includes(clientIP)) {\n        logger.warn('IP访问被拒绝', {\n          ip: clientIP,\n          path: req.path,\n          userAgent: req.get('User-Agent')\n        });\n\n        throw new AuthorizationError('访问被拒绝');\n      }\n\n      next();\n    };\n\n/**\n * 请求ID中间件（用于请求追踪）\n */\nexport const requestId = () => (req, res, next) => {\n  const requestId =\n    req.get('X-Request-ID') || `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  req.requestId = requestId;\n  res.setHeader('X-Request-ID', requestId);\n\n  next();\n};\n\n// 导出默认的JWT认证器实例\nexport const defaultJWTAuth = new JWTAuthenticator({\n  secret: process.env.JWT_SECRET,\n  refreshSecret: process.env.JWT_REFRESH_SECRET,\n  tokenExpiry: process.env.JWT_EXPIRY || '15m',\n  refreshTokenExpiry: process.env.JWT_REFRESH_EXPIRY || '7d'\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/middleware/validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/utils/AppError.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":6,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":6,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":40,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":40,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 401.","line":46,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":46,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 403.","line":52,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":52,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 404.","line":58,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":58,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 409.","line":64,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":64,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":70,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":70,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 502.","line":76,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":76,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 应用程序错误类\n * 提供统一的错误处理机制\n */\nclass AppError extends Error {\n  constructor(message, statusCode = 500, errorCode = 'INTERNAL_SERVER_ERROR', details = {}) {\n    super(message);\n    this.name = 'AppError';\n    this.statusCode = statusCode;\n    this.errorCode = errorCode;\n    this.details = details;\n    this.isOperational = true;\n    this.timestamp = new Date().toISOString();\n\n    // 捕获堆栈跟踪\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n  /**\n   * 转换为JSON格式\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      statusCode: this.statusCode,\n      errorCode: this.errorCode,\n      details: this.details,\n      timestamp: this.timestamp,\n      stack: process.env.NODE_ENV === 'development' ? this.stack : undefined\n    };\n  }\n}\n\n/**\n * 预定义的错误类型\n */\nclass ValidationError extends AppError {\n  constructor(message, details = {}) {\n    super(message, 400, 'VALIDATION_ERROR', details);\n  }\n}\n\nclass AuthenticationError extends AppError {\n  constructor(message = '认证失败') {\n    super(message, 401, 'AUTHENTICATION_ERROR');\n  }\n}\n\nclass AuthorizationError extends AppError {\n  constructor(message = '权限不足') {\n    super(message, 403, 'AUTHORIZATION_ERROR');\n  }\n}\n\nclass NotFoundError extends AppError {\n  constructor(message = '资源未找到') {\n    super(message, 404, 'NOT_FOUND');\n  }\n}\n\nclass ConflictError extends AppError {\n  constructor(message = '资源冲突') {\n    super(message, 409, 'CONFLICT');\n  }\n}\n\nclass DatabaseError extends AppError {\n  constructor(message = '数据库操作失败', details = {}) {\n    super(message, 500, 'DATABASE_ERROR', details);\n  }\n}\n\nclass ExternalServiceError extends AppError {\n  constructor(message = '外部服务错误', details = {}) {\n    super(message, 502, 'EXTERNAL_SERVICE_ERROR', details);\n  }\n}\n\nexport {\n  AppError,\n  ValidationError,\n  AuthenticationError,\n  AuthorizationError,\n  NotFoundError,\n  ConflictError,\n  DatabaseError,\n  ExternalServiceError\n};\n\nexport default AppError;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/utils/LogAggregator.js","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'fs' import is duplicated.","line":3,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":3,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":24,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":24,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":24,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":24,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1024.","line":24,"column":56,"nodeType":"Literal","messageId":"noMagic","endLine":24,"endColumn":60},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":25,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":25,"endColumn":39},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 24.","line":26,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":26,"endColumn":51},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":26,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":26,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":26,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":26,"endColumn":61},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":26,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":26,"endColumn":68},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":45,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":45,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1401,1428],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3730,3758],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3976,4000],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":234,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":234,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4913,4970],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.05.","line":247,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":247,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":250,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":250,"endColumn":18},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":250,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":250,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":250,"column":26,"nodeType":"Literal","messageId":"noMagic","endLine":250,"endColumn":30},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5000.","line":255,"column":91,"nodeType":"Literal","messageId":"noMagic","endLine":255,"endColumn":95},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":257,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":257,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":257,"column":22,"nodeType":"Literal","messageId":"noMagic","endLine":257,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.","line":265,"column":67,"nodeType":"Literal","messageId":"noMagic","endLine":265,"endColumn":68},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":265,"column":71,"nodeType":"Literal","messageId":"noMagic","endLine":265,"endColumn":73},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":265,"column":76,"nodeType":"Literal","messageId":"noMagic","endLine":265,"endColumn":80},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":266,"column":38,"nodeType":"Literal","messageId":"noMagic","endLine":266,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":269,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":269,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":269,"column":22,"nodeType":"Literal","messageId":"noMagic","endLine":269,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":269,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":269,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":302,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":302,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6555,6598],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":333,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":333,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7128,7170],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":353,"column":8,"nodeType":"Literal","messageId":"noMagic","endLine":353,"endColumn":10},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":353,"column":13,"nodeType":"Literal","messageId":"noMagic","endLine":353,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":381,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":381,"endColumn":41},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 60.","line":381,"column":44,"nodeType":"Literal","messageId":"noMagic","endLine":381,"endColumn":46},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1000.","line":381,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":381,"endColumn":53},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":413,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":413,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":452,"column":17,"nodeType":"Literal","messageId":"noMagic","endLine":452,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 10.","line":487,"column":19,"nodeType":"Literal","messageId":"noMagic","endLine":487,"endColumn":21},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 1.2.","line":525,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":525,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.8.","line":527,"column":49,"nodeType":"Literal","messageId":"noMagic","endLine":527,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":548,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":548,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12534,12568],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":559,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":559,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12775,12809],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 100.","line":567,"column":67,"nodeType":"Literal","messageId":"noMagic","endLine":567,"endColumn":70},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":664,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":664,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15108,15137],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":683,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":683,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15504,15530],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport { createWriteStream } from 'fs';\nimport EventEmitter from 'events';\n\n/**\n * 日志聚合器\n * 提供日志收集、分析、存储和查询功能\n */\nclass LogAggregator extends EventEmitter {\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 30 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 30 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 30 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 30 行)\n\n  constructor(options = {}) {\n    super();\n\n    this.options = {\n      logDir: options.logDir || './logs',\n      maxFileSize: options.maxFileSize || 100 * 1024 * 1024, // 100MB\n      maxFiles: options.maxFiles || 10,\n      rotateInterval: options.rotateInterval || 24 * 60 * 60 * 1000, // 24小时\n      enableAnalysis: options.enableAnalysis !== false,\n      enableAlerts: options.enableAlerts !== false,\n      ...options\n    };\n\n    this.logStreams = new Map();\n    this.logStats = {\n      totalLogs: 0,\n      errorCount: 0,\n      warningCount: 0,\n      infoCount: 0,\n      debugCount: 0,\n      lastLogTime: null,\n      startTime: new Date()\n    };\n\n    this.alertRules = new Map();\n    this.logBuffer = [];\n    this.bufferSize = options.bufferSize || 1000;\n\n    this.init();\n  }\n\n  /**\n   * 初始化日志聚合器\n   */\n  init() {\n    // 确保日志目录存在\n    this.ensureLogDir();\n\n    // 设置日志轮转\n    this.setupLogRotation();\n\n    // 设置默认告警规则\n    this.setupDefaultAlertRules();\n\n    // 启动分析任务\n    if (this.options.enableAnalysis) {\n      this.startAnalysisTask();\n    }\n\n    console.log('📊 日志聚合器已启动');\n  }\n\n  /**\n   * 确保日志目录存在\n   */\n  ensureLogDir() {\n    if (!fs.existsSync(this.options.logDir)) {\n      fs.mkdirSync(this.options.logDir, { recursive: true });\n    }\n  }\n\n  /**\n   * 记录日志\n   */\n  log(level, message, metadata = {}) {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      level: level.toUpperCase(),\n      message,\n      metadata,\n      requestId: metadata.requestId,\n      userId: metadata.userId,\n      ip: metadata.ip,\n      userAgent: metadata.userAgent,\n      duration: metadata.duration,\n      statusCode: metadata.statusCode,\n      error: metadata.error\n    };\n\n    // 更新统计信息\n    this.updateStats(logEntry);\n\n    // 添加到缓冲区\n    this.logBuffer.push(logEntry);\n\n    // 写入日志文件\n    this.writeToFile(logEntry);\n\n    // 检查告警规则\n    if (this.options.enableAlerts) {\n      this.checkAlertRules(logEntry);\n    }\n\n    // 触发事件\n    this.emit('log', logEntry);\n\n    // 如果缓冲区满了，清理旧日志\n    if (this.logBuffer.length > this.bufferSize) {\n      this.logBuffer = this.logBuffer.slice(-this.bufferSize);\n    }\n  }\n\n  /**\n   * 更新统计信息\n   */\n  updateStats(logEntry) {\n    this.logStats.totalLogs++;\n    this.logStats.lastLogTime = logEntry.timestamp;\n\n    switch (logEntry.level) {\n      case 'ERROR':\n        this.logStats.errorCount++;\n        break;\n      case 'WARN':\n        this.logStats.warningCount++;\n        break;\n      case 'INFO':\n        this.logStats.infoCount++;\n        break;\n      case 'DEBUG':\n        this.logStats.debugCount++;\n        break;\n    }\n  }\n\n  /**\n   * 写入日志文件\n   */\n  writeToFile(logEntry) {\n    const fileName = this.getLogFileName(logEntry.level);\n    const filePath = path.join(this.options.logDir, fileName);\n\n    if (!this.logStreams.has(fileName)) {\n      this.logStreams.set(fileName, createWriteStream(filePath, { flags: 'a' }));\n    }\n\n    const stream = this.logStreams.get(fileName);\n    const logLine = `${JSON.stringify(logEntry)}\\n`;\n\n    stream.write(logLine);\n  }\n\n  /**\n   * 获取日志文件名\n   */\n  getLogFileName(level) {\n    const [date] = new Date().toISOString().split('T');\n    return `${level.toLowerCase()}-${date}.log`;\n  }\n\n  /**\n   * 设置日志轮转\n   */\n  setupLogRotation() {\n    this.rotationTimer = setInterval(() => {\n      this.rotateLogFiles();\n    }, this.options.rotateInterval);\n  }\n\n  /**\n   * 轮转日志文件\n   */\n  rotateLogFiles() {\n    console.log('🔄 开始日志轮转...');\n\n    // 关闭当前流\n    for (const [_fileName, stream] of this.logStreams) {\n      stream.end();\n    }\n    this.logStreams.clear();\n\n    // 压缩旧日志文件\n    this.compressOldLogs();\n\n    // 清理过期日志\n    this.cleanupOldLogs();\n\n    console.log('✅ 日志轮转完成');\n  }\n\n  /**\n   * 压缩旧日志文件\n   */\n  compressOldLogs() {\n    // 这里可以添加日志压缩逻辑\n    // 例如使用 gzip 压缩\n  }\n\n  /**\n   * 清理过期日志\n   */\n  cleanupOldLogs() {\n    const files = fs.readdirSync(this.options.logDir);\n    const logFiles = files.filter((file) => file.endsWith('.log'));\n\n    if (logFiles.length > this.options.maxFiles) {\n      // 按修改时间排序\n      const sortedFiles = logFiles\n        .map((file) => ({\n          name: file,\n          path: path.join(this.options.logDir, file),\n          mtime: fs.statSync(path.join(this.options.logDir, file)).mtime\n        }))\n        .sort((a, b) => a.mtime - b.mtime);\n\n      // 删除最旧的文件\n      const filesToDelete = sortedFiles.slice(0, sortedFiles.length - this.options.maxFiles);\n\n      const deletedFiles = [];\n      for (const file of filesToDelete) {\n        fs.unlinkSync(file.path);\n        deletedFiles.push(file.name);\n      }\n\n      if (deletedFiles.length > 0) {\n        console.log(`🗑️  删除过期日志文件: ${deletedFiles.join(', ')}`);\n      }\n    }\n  }\n\n  /**\n   * 设置默认告警规则\n   */\n  setupDefaultAlertRules() {\n    // 错误率告警\n    this.addAlertRule('high_error_rate', {\n      condition: (stats) => {\n        const errorRate = stats.errorCount / stats.totalLogs;\n        return errorRate > 0.05; // 错误率超过5%\n      },\n      message: '错误率过高',\n      cooldown: 5 * 60 * 1000 // 5分钟冷却期\n    });\n\n    // 响应时间告警\n    this.addAlertRule('slow_response', {\n      condition: (logEntry) => logEntry.metadata.duration && logEntry.metadata.duration > 5000, // 响应时间超过5秒\n      message: '响应时间过长',\n      cooldown: 60 * 1000 // 1分钟冷却期\n    });\n\n    // 频繁错误告警\n    this.addAlertRule('frequent_errors', {\n      condition: () => {\n        const recentErrors = this.logBuffer\n          .filter((log) => log.level === 'ERROR')\n          .filter((log) => new Date() - new Date(log.timestamp) < 5 * 60 * 1000); // 5分钟内\n        return recentErrors.length > 10; // 5分钟内超过10个错误\n      },\n      message: '频繁出现错误',\n      cooldown: 10 * 60 * 1000 // 10分钟冷却期\n    });\n  }\n\n  /**\n   * 添加告警规则\n   */\n  addAlertRule(name, rule) {\n    this.alertRules.set(name, {\n      ...rule,\n      lastTriggered: 0\n    });\n  }\n\n  /**\n   * 检查告警规则\n   */\n  checkAlertRules(logEntry) {\n    const now = Date.now();\n\n    for (const [name, rule] of this.alertRules) {\n      // 检查冷却期\n      if (now - rule.lastTriggered < rule.cooldown) {\n        continue;\n      }\n\n      // 检查条件\n      let shouldAlert = false;\n\n      if (typeof rule.condition === 'function') {\n        try {\n          shouldAlert = rule.condition(logEntry, this.logStats, this.logBuffer);\n        } catch (error) {\n          console.error(`告警规则 ${name} 执行失败:`, error);\n        }\n      }\n\n      if (shouldAlert) {\n        this.triggerAlert(name, rule, logEntry);\n        rule.lastTriggered = now;\n      }\n    }\n  }\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n  // TODO: 考虑将此函数拆分为更小的函数 (当前 21 行)\n\n  /**\n   * 触发告警\n   */\n  triggerAlert(ruleName, rule, logEntry) {\n    const alert = {\n      ruleName,\n      message: rule.message,\n      timestamp: new Date().toISOString(),\n      logEntry,\n      stats: { ...this.logStats }\n    };\n\n    console.warn(`🚨 告警触发: ${alert.message}`);\n\n    // 触发告警事件\n    this.emit('alert', alert);\n\n    // 记录告警日志\n    this.log('warn', `告警触发: ${alert.message}`, {\n      alert: true,\n      ruleName,\n      originalLog: logEntry\n    });\n  }\n\n  /**\n   * 启动分析任务\n   */\n  startAnalysisTask() {\n    // 每分钟执行一次分析\n    this.analysisTimer = setInterval(() => {\n      this.performAnalysis();\n    }, 60 * 1000);\n  }\n\n  /**\n   * 执行日志分析\n   */\n  performAnalysis() {\n    const analysis = {\n      timestamp: new Date().toISOString(),\n      stats: { ...this.logStats },\n      trends: this.analyzeTrends(),\n      topErrors: this.getTopErrors(),\n      slowEndpoints: this.getSlowEndpoints(),\n      userActivity: this.analyzeUserActivity()\n    };\n\n    // 触发分析事件\n    this.emit('analysis', analysis);\n\n    // 保存分析结果\n    this.saveAnalysis(analysis);\n  }\n\n  /**\n   * 分析趋势\n   */\n  analyzeTrends() {\n    const now = new Date();\n    const oneHourAgo = new Date(now - 60 * 60 * 1000);\n\n    const recentLogs = this.logBuffer.filter((log) => new Date(log.timestamp) > oneHourAgo);\n\n    const hourlyStats = {\n      total: recentLogs.length,\n      errors: recentLogs.filter((log) => log.level === 'ERROR').length,\n      warnings: recentLogs.filter((log) => log.level === 'WARN').length,\n      avgResponseTime: this.calculateAverageResponseTime(recentLogs)\n    };\n\n    return {\n      hourly: hourlyStats,\n      errorRate: hourlyStats.errors / hourlyStats.total || 0,\n      trend: this.calculateTrend(recentLogs)\n    };\n  }\n\n  /**\n   * 获取最常见错误\n   */\n  getTopErrors() {\n    const errorLogs = this.logBuffer.filter((log) => log.level === 'ERROR');\n    const errorCounts = new Map();\n\n    for (const log of errorLogs) {\n      const errorKey = log.message || log.metadata.error?.message || 'Unknown Error';\n      errorCounts.set(errorKey, (errorCounts.get(errorKey) || 0) + 1);\n    }\n\n    return Array.from(errorCounts.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([error, count]) => ({ error, count }));\n  }\n\n  /**\n   * 获取慢端点\n   */\n  getSlowEndpoints() {\n    const logsWithDuration = this.logBuffer.filter(\n      (log) => log.metadata.duration && log.metadata.url\n    );\n\n    const endpointStats = new Map();\n\n    for (const log of logsWithDuration) {\n      const endpoint = `${log.metadata.method} ${log.metadata.url}`;\n\n      if (!endpointStats.has(endpoint)) {\n        endpointStats.set(endpoint, {\n          count: 0,\n          totalDuration: 0,\n          maxDuration: 0\n        });\n      }\n\n      const stats = endpointStats.get(endpoint);\n      stats.count++;\n      stats.totalDuration += log.metadata.duration;\n      stats.maxDuration = Math.max(stats.maxDuration, log.metadata.duration);\n    }\n\n    return Array.from(endpointStats.entries())\n      .map(([endpoint, stats]) => ({\n        endpoint,\n        avgDuration: stats.totalDuration / stats.count,\n        maxDuration: stats.maxDuration,\n        count: stats.count\n      }))\n      .sort((a, b) => b.avgDuration - a.avgDuration)\n      .slice(0, 10);\n  }\n\n  /**\n   * 分析用户活动\n   */\n  analyzeUserActivity() {\n    const userLogs = this.logBuffer.filter((log) => log.userId);\n    const userStats = new Map();\n\n    for (const log of userLogs) {\n      if (!userStats.has(log.userId)) {\n        userStats.set(log.userId, {\n          requests: 0,\n          errors: 0,\n          lastActivity: log.timestamp\n        });\n      }\n\n      const stats = userStats.get(log.userId);\n      stats.requests++;\n\n      if (log.level === 'ERROR') {\n        stats.errors++;\n      }\n\n      if (new Date(log.timestamp) > new Date(stats.lastActivity)) {\n        stats.lastActivity = log.timestamp;\n      }\n    }\n\n    return {\n      activeUsers: userStats.size,\n      topUsers: Array.from(userStats.entries())\n        .sort((a, b) => b[1].requests - a[1].requests)\n        .slice(0, 10)\n        .map(([userId, stats]) => ({ userId, ...stats }))\n    };\n  }\n\n  /**\n   * 计算平均响应时间\n   */\n  calculateAverageResponseTime(logs) {\n    const logsWithDuration = logs.filter((log) => log.metadata.duration);\n\n    if (logsWithDuration.length === 0) {\n      return 0;\n    }\n\n    const totalDuration = logsWithDuration.reduce((sum, log) => sum + log.metadata.duration, 0);\n\n    return totalDuration / logsWithDuration.length;\n  }\n\n  /**\n   * 计算趋势\n   */\n  calculateTrend(logs) {\n    if (logs.length < 2) {\n      return 'stable';\n    }\n\n    const midpoint = Math.floor(logs.length / 2);\n    const firstHalf = logs.slice(0, midpoint);\n    const secondHalf = logs.slice(midpoint);\n\n    const firstHalfErrors = firstHalf.filter((log) => log.level === 'ERROR').length;\n    const secondHalfErrors = secondHalf.filter((log) => log.level === 'ERROR').length;\n\n    const firstHalfRate = firstHalfErrors / firstHalf.length;\n    const secondHalfRate = secondHalfErrors / secondHalf.length;\n\n    if (secondHalfRate > firstHalfRate * 1.2) {\n      return 'increasing';\n    } else if (secondHalfRate < firstHalfRate * 0.8) {\n      return 'decreasing';\n    }\n    return 'stable';\n  }\n\n  /**\n   * 保存分析结果\n   */\n  async saveAnalysis(analysis) {\n    const fileName = `analysis-${new Date().toISOString().split('T')[0]}.json`;\n    const filePath = path.join(this.options.logDir, fileName);\n\n    let existingData = [];\n\n    try {\n      await fs.promises.access(filePath);\n      try {\n        const content = await fs.promises.readFile(filePath, 'utf8');\n        existingData = JSON.parse(content);\n      } catch (error) {\n        console.error('读取分析文件失败:', error);\n      }\n    } catch {\n      // 文件不存在，使用空数组\n    }\n\n    existingData.push(analysis);\n\n    try {\n      await fs.promises.writeFile(filePath, JSON.stringify(existingData, null, 2));\n    } catch (error) {\n      console.error('保存分析结果失败:', error);\n    }\n  }\n\n  /**\n   * 查询日志\n   */\n  async queryLogs(options = {}) {\n    const { level, startTime, endTime, userId, requestId, limit = 100, offset = 0 } = options;\n\n    let results = [...this.logBuffer];\n\n    // 应用过滤条件\n    if (level) {\n      results = results.filter((log) => log.level === level.toUpperCase());\n    }\n\n    if (startTime) {\n      results = results.filter((log) => new Date(log.timestamp) >= new Date(startTime));\n    }\n\n    if (endTime) {\n      results = results.filter((log) => new Date(log.timestamp) <= new Date(endTime));\n    }\n\n    if (userId) {\n      results = results.filter((log) => log.userId === userId);\n    }\n\n    if (requestId) {\n      results = results.filter((log) => log.requestId === requestId);\n    }\n\n    // 排序（最新的在前）\n    results.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n\n    // 分页\n    const total = results.length;\n    results = results.slice(offset, offset + limit);\n\n    return {\n      logs: results,\n      total,\n      offset,\n      limit,\n      hasMore: offset + limit < total\n    };\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats() {\n    return {\n      ...this.logStats,\n      uptime: Date.now() - this.logStats.startTime.getTime(),\n      bufferSize: this.logBuffer.length,\n      activeStreams: this.logStreams.size\n    };\n  }\n\n  /**\n   * 创建日志中间件\n   */\n  createMiddleware() {\n    return (req, res, next) => {\n      const startTime = Date.now();\n\n      // 记录请求开始\n      this.log('info', `${req.method} ${req.url}`, {\n        requestId: req.requestId,\n        userId: req.user?.id,\n        ip: req.ip,\n        userAgent: req.get('User-Agent'),\n        method: req.method,\n        url: req.url,\n        query: req.query,\n        body: req.method !== 'GET' ? req.body : undefined\n      });\n\n      // 监听响应结束\n      res.on('finish', () => {\n        const duration = Date.now() - startTime;\n\n        this.log('info', `${req.method} ${req.url} - ${res.statusCode}`, {\n          requestId: req.requestId,\n          userId: req.user?.id,\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          method: req.method,\n          url: req.url,\n          statusCode: res.statusCode,\n          duration,\n          responseSize: res.get('Content-Length')\n        });\n      });\n\n      next();\n    };\n  }\n\n  /**\n   * 关闭日志聚合器\n   */\n  close() {\n    console.log('🔄 关闭日志聚合器...');\n\n    // 清理定时器\n    if (this.rotationTimer) {\n      clearInterval(this.rotationTimer);\n      this.rotationTimer = null;\n    }\n    if (this.analysisTimer) {\n      clearInterval(this.analysisTimer);\n      this.analysisTimer = null;\n    }\n\n    // 关闭所有流\n    for (const [_fileName, stream] of this.logStreams) {\n      stream.end();\n    }\n\n    this.logStreams.clear();\n\n    console.log('✅ 日志聚合器已关闭');\n  }\n}\n\n// 创建默认实例\nconst defaultLogAggregator = new LogAggregator();\n\n// 便捷方法\nexport const logInfo = (message, metadata) => defaultLogAggregator.log('info', message, metadata);\nexport const logWarn = (message, metadata) => defaultLogAggregator.log('warn', message, metadata);\nexport const logError = (message, metadata) => defaultLogAggregator.log('error', message, metadata);\nexport const logDebug = (message, metadata) => defaultLogAggregator.log('debug', message, metadata);\n\nexport { LogAggregator };\nexport default defaultLogAggregator;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/utils/apiResponse.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 36.","line":357,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":357,"endColumn":56},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 9.","line":357,"column":68,"nodeType":"Literal","messageId":"noMagic","endLine":357,"endColumn":69},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 500.","line":373,"column":21,"nodeType":"Literal","messageId":"noMagic","endLine":373,"endColumn":24},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 400.","line":375,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":375,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * API响应标准化工具\n * 确保所有API响应格式的一致性\n */\n\nimport { logger } from './logger.js';\n\n// 响应状态码常量\nexport const HTTP_STATUS = {\n  // 成功响应\n  OK: 200,\n  CREATED: 201,\n  ACCEPTED: 202,\n  NO_CONTENT: 204,\n\n  // 重定向\n  MOVED_PERMANENTLY: 301,\n  FOUND: 302,\n  NOT_MODIFIED: 304,\n\n  // 客户端错误\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  METHOD_NOT_ALLOWED: 405,\n  CONFLICT: 409,\n  UNPROCESSABLE_ENTITY: 422,\n  TOO_MANY_REQUESTS: 429,\n\n  // 服务器错误\n  INTERNAL_SERVER_ERROR: 500,\n  NOT_IMPLEMENTED: 501,\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504\n};\n\n// 业务错误码常量\nexport const BUSINESS_CODES = {\n  SUCCESS: 'SUCCESS',\n\n  // 认证相关\n  AUTH_INVALID_CREDENTIALS: 'AUTH_INVALID_CREDENTIALS',\n  AUTH_TOKEN_EXPIRED: 'AUTH_TOKEN_EXPIRED',\n  AUTH_TOKEN_INVALID: 'AUTH_TOKEN_INVALID',\n  AUTH_INSUFFICIENT_PERMISSIONS: 'AUTH_INSUFFICIENT_PERMISSIONS',\n\n  // 验证相关\n  VALIDATION_FAILED: 'VALIDATION_FAILED',\n  VALIDATION_REQUIRED_FIELD: 'VALIDATION_REQUIRED_FIELD',\n  VALIDATION_INVALID_FORMAT: 'VALIDATION_INVALID_FORMAT',\n  VALIDATION_OUT_OF_RANGE: 'VALIDATION_OUT_OF_RANGE',\n\n  // 资源相关\n  RESOURCE_NOT_FOUND: 'RESOURCE_NOT_FOUND',\n  RESOURCE_ALREADY_EXISTS: 'RESOURCE_ALREADY_EXISTS',\n  RESOURCE_CONFLICT: 'RESOURCE_CONFLICT',\n  RESOURCE_LOCKED: 'RESOURCE_LOCKED',\n\n  // 业务逻辑相关\n  BUSINESS_RULE_VIOLATION: 'BUSINESS_RULE_VIOLATION',\n  OPERATION_NOT_ALLOWED: 'OPERATION_NOT_ALLOWED',\n  QUOTA_EXCEEDED: 'QUOTA_EXCEEDED',\n\n  // 系统相关\n  SYSTEM_ERROR: 'SYSTEM_ERROR',\n  DATABASE_ERROR: 'DATABASE_ERROR',\n  EXTERNAL_SERVICE_ERROR: 'EXTERNAL_SERVICE_ERROR',\n  RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED'\n};\n\n// 错误消息映射\nconst ERROR_MESSAGES = {\n  [BUSINESS_CODES.AUTH_INVALID_CREDENTIALS]: '用户名或密码错误',\n  [BUSINESS_CODES.AUTH_TOKEN_EXPIRED]: '访问令牌已过期',\n  [BUSINESS_CODES.AUTH_TOKEN_INVALID]: '无效的访问令牌',\n  [BUSINESS_CODES.AUTH_INSUFFICIENT_PERMISSIONS]: '权限不足',\n\n  [BUSINESS_CODES.VALIDATION_FAILED]: '数据验证失败',\n  [BUSINESS_CODES.VALIDATION_REQUIRED_FIELD]: '必填字段缺失',\n  [BUSINESS_CODES.VALIDATION_INVALID_FORMAT]: '数据格式无效',\n  [BUSINESS_CODES.VALIDATION_OUT_OF_RANGE]: '数据超出允许范围',\n\n  [BUSINESS_CODES.RESOURCE_NOT_FOUND]: '资源未找到',\n  [BUSINESS_CODES.RESOURCE_ALREADY_EXISTS]: '资源已存在',\n  [BUSINESS_CODES.RESOURCE_CONFLICT]: '资源冲突',\n  [BUSINESS_CODES.RESOURCE_LOCKED]: '资源被锁定',\n\n  [BUSINESS_CODES.BUSINESS_RULE_VIOLATION]: '违反业务规则',\n  [BUSINESS_CODES.OPERATION_NOT_ALLOWED]: '操作不被允许',\n  [BUSINESS_CODES.QUOTA_EXCEEDED]: '配额已超出',\n\n  [BUSINESS_CODES.SYSTEM_ERROR]: '系统内部错误',\n  [BUSINESS_CODES.DATABASE_ERROR]: '数据库操作失败',\n  [BUSINESS_CODES.EXTERNAL_SERVICE_ERROR]: '外部服务错误',\n  [BUSINESS_CODES.RATE_LIMIT_EXCEEDED]: '请求频率超出限制'\n};\n\n// 标准响应格式类\nexport class ApiResponse {\n  constructor() {\n    this.timestamp = new Date().toISOString();\n    this.requestId = null;\n    this.success = true;\n    this.code = BUSINESS_CODES.SUCCESS;\n    this.message = null;\n    this.data = null;\n    this.errors = null;\n    this.meta = null;\n  }\n\n  // 设置请求ID\n  setRequestId(requestId) {\n    this.requestId = requestId;\n    return this;\n  }\n\n  // 设置成功响应\n  setSuccess(data = null, message = null, meta = null) {\n    this.success = true;\n    this.code = BUSINESS_CODES.SUCCESS;\n    this.message = message;\n    this.data = data;\n    this.meta = meta;\n    return this;\n  }\n\n  // 设置错误响应\n  setError(code, message = null, errors = null, data = null) {\n    this.success = false;\n    this.code = code;\n    this.message = message || ERROR_MESSAGES[code] || '未知错误';\n    this.errors = errors;\n    this.data = data;\n    return this;\n  }\n\n  // 设置元数据\n  setMeta(meta) {\n    this.meta = { ...this.meta, ...meta };\n    return this;\n  }\n\n  // 添加分页信息\n  setPagination(page, limit, total, totalPages = null) {\n    const pagination = {\n      page: parseInt(page),\n      limit: parseInt(limit),\n      total: parseInt(total),\n      totalPages: totalPages || Math.ceil(total / limit),\n      hasNext: page < Math.ceil(total / limit),\n      hasPrev: page > 1\n    };\n\n    return this.setMeta({ pagination });\n  }\n\n  // 转换为JSON对象\n  toJSON() {\n    const response = {\n      success: this.success,\n      timestamp: this.timestamp,\n      code: this.code\n    };\n\n    if (this.requestId) {\n      response.requestId = this.requestId;\n    }\n\n    if (this.message) {\n      response.message = this.message;\n    }\n\n    if (this.data !== null) {\n      response.data = this.data;\n    }\n\n    if (this.errors) {\n      response.errors = this.errors;\n    }\n\n    if (this.meta) {\n      response.meta = this.meta;\n    }\n\n    return response;\n  }\n}\n\n// 响应构建器类\nexport class ResponseBuilder {\n  // 成功响应\n  static success(data = null, message = null, meta = null) {\n    return new ApiResponse().setSuccess(data, message, meta);\n  }\n\n  // 创建成功响应\n  static created(data = null, message = '创建成功', meta = null) {\n    return new ApiResponse().setSuccess(data, message, meta);\n  }\n\n  // 无内容响应\n  static noContent(message = '操作成功') {\n    return new ApiResponse().setSuccess(null, message);\n  }\n\n  // 分页响应\n  static paginated(data, page, limit, total, message = null) {\n    return new ApiResponse().setSuccess(data, message).setPagination(page, limit, total);\n  }\n\n  // 错误响应\n  static error(code, message = null, errors = null, data = null) {\n    return new ApiResponse().setError(code, message, errors, data);\n  }\n\n  // 验证错误\n  static validationError(errors, message = '数据验证失败') {\n    return new ApiResponse().setError(BUSINESS_CODES.VALIDATION_FAILED, message, errors);\n  }\n\n  // 认证错误\n  static unauthorized(message = '认证失败') {\n    return new ApiResponse().setError(BUSINESS_CODES.AUTH_TOKEN_INVALID, message);\n  }\n\n  // 权限错误\n  static forbidden(message = '权限不足') {\n    return new ApiResponse().setError(BUSINESS_CODES.AUTH_INSUFFICIENT_PERMISSIONS, message);\n  }\n\n  // 资源未找到\n  static notFound(resource = '资源', message = null) {\n    return new ApiResponse().setError(\n      BUSINESS_CODES.RESOURCE_NOT_FOUND,\n      message || `${resource}未找到`\n    );\n  }\n\n  // 资源冲突\n  static conflict(message = '资源冲突') {\n    return new ApiResponse().setError(BUSINESS_CODES.RESOURCE_CONFLICT, message);\n  }\n\n  // 系统错误\n  static systemError(message = '系统内部错误', errors = null) {\n    return new ApiResponse().setError(BUSINESS_CODES.SYSTEM_ERROR, message, errors);\n  }\n\n  // 限流错误\n  static rateLimitExceeded(message = '请求频率超出限制') {\n    return new ApiResponse().setError(BUSINESS_CODES.RATE_LIMIT_EXCEEDED, message);\n  }\n}\n\n// Express中间件：添加响应构建器到res对象\nexport function responseMiddleware(req, res, next) {\n  // 添加请求ID\n  const requestId =\n    req.headers['x-request-id'] || req.headers['x-correlation-id'] || generateRequestId();\n\n  req.requestId = requestId;\n\n  // 添加响应方法到res对象\n  res.apiSuccess = (data, message, meta) => {\n    const response = ResponseBuilder.success(data, message, meta).setRequestId(requestId);\n\n    logResponse(req, response, HTTP_STATUS.OK);\n    return res.status(HTTP_STATUS.OK).json(response.toJSON());\n  };\n\n  res.apiCreated = (data, message, meta) => {\n    const response = ResponseBuilder.created(data, message, meta).setRequestId(requestId);\n\n    logResponse(req, response, HTTP_STATUS.CREATED);\n    return res.status(HTTP_STATUS.CREATED).json(response.toJSON());\n  };\n\n  res.apiNoContent = (message) => {\n    const response = ResponseBuilder.noContent(message).setRequestId(requestId);\n\n    logResponse(req, response, HTTP_STATUS.NO_CONTENT);\n    return res.status(HTTP_STATUS.NO_CONTENT).json(response.toJSON());\n  };\n\n  res.apiPaginated = (data, page, limit, total, message) => {\n    const response = ResponseBuilder.paginated(data, page, limit, total, message).setRequestId(\n      requestId\n    );\n\n    logResponse(req, response, HTTP_STATUS.OK);\n    return res.status(HTTP_STATUS.OK).json(response.toJSON());\n  };\n\n  res.apiError = (code, message, errors, statusCode = HTTP_STATUS.BAD_REQUEST) => {\n    const response = ResponseBuilder.error(code, message, errors).setRequestId(requestId);\n\n    logResponse(req, response, statusCode);\n    return res.status(statusCode).json(response.toJSON());\n  };\n\n  res.apiValidationError = (errors, message) => {\n    const response = ResponseBuilder.validationError(errors, message).setRequestId(requestId);\n\n    logResponse(req, response, HTTP_STATUS.UNPROCESSABLE_ENTITY);\n    return res.status(HTTP_STATUS.UNPROCESSABLE_ENTITY).json(response.toJSON());\n  };\n\n  res.apiUnauthorized = (message) => {\n    const response = ResponseBuilder.unauthorized(message).setRequestId(requestId);\n\n    logResponse(req, response, HTTP_STATUS.UNAUTHORIZED);\n    return res.status(HTTP_STATUS.UNAUTHORIZED).json(response.toJSON());\n  };\n\n  res.apiForbidden = (message) => {\n    const response = ResponseBuilder.forbidden(message).setRequestId(requestId);\n\n    logResponse(req, response, HTTP_STATUS.FORBIDDEN);\n    return res.status(HTTP_STATUS.FORBIDDEN).json(response.toJSON());\n  };\n\n  res.apiNotFound = (resource, message) => {\n    const response = ResponseBuilder.notFound(resource, message).setRequestId(requestId);\n\n    logResponse(req, response, HTTP_STATUS.NOT_FOUND);\n    return res.status(HTTP_STATUS.NOT_FOUND).json(response.toJSON());\n  };\n\n  res.apiConflict = (message) => {\n    const response = ResponseBuilder.conflict(message).setRequestId(requestId);\n\n    logResponse(req, response, HTTP_STATUS.CONFLICT);\n    return res.status(HTTP_STATUS.CONFLICT).json(response.toJSON());\n  };\n\n  res.apiSystemError = (message, errors) => {\n    const response = ResponseBuilder.systemError(message, errors).setRequestId(requestId);\n\n    logResponse(req, response, HTTP_STATUS.INTERNAL_SERVER_ERROR);\n    return res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json(response.toJSON());\n  };\n\n  res.apiRateLimitExceeded = (message) => {\n    const response = ResponseBuilder.rateLimitExceeded(message).setRequestId(requestId);\n\n    logResponse(req, response, HTTP_STATUS.TOO_MANY_REQUESTS);\n    return res.status(HTTP_STATUS.TOO_MANY_REQUESTS).json(response.toJSON());\n  };\n\n  next();\n}\n\n// 生成请求ID\nfunction generateRequestId() {\n  return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n// 记录响应日志\nfunction logResponse(req, response, statusCode) {\n  const logData = {\n    requestId: req.requestId,\n    method: req.method,\n    url: req.originalUrl,\n    statusCode,\n    success: response.success,\n    code: response.code,\n    userId: req.user?.id,\n    ip: req.ip\n  };\n\n  if (statusCode >= 500) {\n    logger.error('API响应', logData);\n  } else if (statusCode >= 400) {\n    logger.warn('API响应', logData);\n  } else {\n    logger.info('API响应', logData);\n  }\n}\n\n// 响应验证器\nexport class ResponseValidator {\n  static validate(response) {\n    const errors = [];\n\n    // 检查必需字段\n    if (typeof response.success !== 'boolean') {\n      errors.push('success字段必须是布尔值');\n    }\n\n    if (!response.timestamp) {\n      errors.push('timestamp字段是必需的');\n    }\n\n    if (!response.code) {\n      errors.push('code字段是必需的');\n    }\n\n    // 检查时间戳格式\n    if (response.timestamp && !isValidISO8601(response.timestamp)) {\n      errors.push('timestamp必须是有效的ISO8601格式');\n    }\n\n    // 检查业务代码\n    if (response.code && !Object.values(BUSINESS_CODES).includes(response.code)) {\n      errors.push('无效的业务代码');\n    }\n\n    // 检查成功响应的数据一致性\n    if (response.success && response.code !== BUSINESS_CODES.SUCCESS) {\n      errors.push('成功响应的code必须是SUCCESS');\n    }\n\n    // 检查失败响应的数据一致性\n    if (!response.success && response.code === BUSINESS_CODES.SUCCESS) {\n      errors.push('失败响应的code不能是SUCCESS');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n}\n\n// 检查ISO8601时间格式\nfunction isValidISO8601(dateString) {\n  const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z?$/;\n  return iso8601Regex.test(dateString) && !isNaN(Date.parse(dateString));\n}\n\n// 响应转换器\nexport class ResponseTransformer {\n  // 转换数据库记录\n  static transformDatabaseRecord(record, fields = null) {\n    if (!record) {\n      return null;\n    }\n\n    const transformed = { ...record };\n\n    // 移除敏感字段\n    delete transformed.password_hash;\n    delete transformed.password;\n    delete transformed.secret;\n    delete transformed.token;\n\n    // 转换时间字段\n    ['created_at', 'updated_at', 'deleted_at', 'last_login', 'expires_at'].forEach((field) => {\n      if (transformed[field]) {\n        transformed[field] = new Date(transformed[field]).toISOString();\n      }\n    });\n\n    // 只返回指定字段\n    if (fields && Array.isArray(fields)) {\n      const filteredRecord = {};\n      fields.forEach((field) => {\n        if (Object.prototype.hasOwnProperty.call(transformed, field)) {\n          filteredRecord[field] = transformed[field];\n        }\n      });\n      return filteredRecord;\n    }\n\n    return transformed;\n  }\n\n  // 转换数据库记录列表\n  static transformDatabaseRecords(records, fields = null) {\n    if (!Array.isArray(records)) {\n      return [];\n    }\n\n    return records.map((record) => this.transformDatabaseRecord(record, fields));\n  }\n\n  // 转换错误对象\n  static transformError(error) {\n    if (error.isJoi) {\n      // Joi验证错误\n      return {\n        type: 'validation',\n        details: error.details.map((detail) => ({\n          field: detail.path.join('.'),\n          message: detail.message,\n          value: detail.context?.value\n        }))\n      };\n    }\n\n    if (error.code && error.code.startsWith('SQLITE_')) {\n      // SQLite错误\n      return {\n        type: 'database',\n        code: error.code,\n        message: '数据库操作失败'\n      };\n    }\n\n    // 通用错误\n    return {\n      type: 'general',\n      message: error.message || '未知错误'\n    };\n  }\n}\n\n// 导出常用函数\nexport {\n  HTTP_STATUS as HttpStatus,\n  BUSINESS_CODES as BusinessCodes,\n  ERROR_MESSAGES as ErrorMessages\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/utils/cache.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 200.","line":167,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":167,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 简单的内存缓存系统\n * 用于优化API响应时间\n */\n\nimport { MATH_CONSTANTS, TIME_INTERVALS } from '../constants/MathConstants.js';\nimport { defaultLogger } from './logger.js';\n\nconst logger = defaultLogger.child('Cache');\n\nclass MemoryCache {\n  constructor() {\n    this.cache = new Map();\n    this.ttlMap = new Map();\n    this.defaultTTL = TIME_INTERVALS.FIVE_MINUTES_MS; // 默认5分钟过期\n\n    // 定期清理过期缓存\n    setInterval(() => {\n      this.cleanup();\n    }, MATH_CONSTANTS.SECONDS_PER_MINUTE * MATH_CONSTANTS.MILLISECONDS_PER_SECOND); // 每分钟清理一次\n  }\n\n  /**\n   * 设置缓存\n   * @param {string} key - 缓存键\n   * @param {any} value - 缓存值\n   * @param {number} ttl - 过期时间（毫秒），默认使用defaultTTL\n   */\n  set(key, value, ttl = this.defaultTTL) {\n    const expiresAt = Date.now() + ttl;\n    this.cache.set(key, value);\n    this.ttlMap.set(key, expiresAt);\n  }\n\n  /**\n   * 获取缓存\n   * @param {string} key - 缓存键\n   * @returns {any|null} 缓存值或null\n   */\n  get(key) {\n    const expiresAt = this.ttlMap.get(key);\n\n    // 检查是否过期\n    if (!expiresAt || Date.now() > expiresAt) {\n      this.delete(key);\n      return null;\n    }\n\n    return this.cache.get(key);\n  }\n\n  /**\n   * 删除缓存\n   * @param {string} key - 缓存键\n   */\n  delete(key) {\n    this.cache.delete(key);\n    this.ttlMap.delete(key);\n  }\n\n  /**\n   * 清空所有缓存\n   */\n  clear() {\n    this.cache.clear();\n    this.ttlMap.clear();\n  }\n\n  /**\n   * 检查缓存是否存在且未过期\n   * @param {string} key - 缓存键\n   * @returns {boolean}\n   */\n  has(key) {\n    const expiresAt = this.ttlMap.get(key);\n    if (!expiresAt || Date.now() > expiresAt) {\n      this.delete(key);\n      return false;\n    }\n    return this.cache.has(key);\n  }\n\n  /**\n   * 获取缓存统计信息\n   * @returns {object} 统计信息\n   */\n  getStats() {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys())\n    };\n  }\n\n  /**\n   * 清理过期缓存\n   */\n  cleanup() {\n    const now = Date.now();\n    const expiredKeys = [];\n\n    for (const [key, expiresAt] of this.ttlMap.entries()) {\n      if (now > expiresAt) {\n        expiredKeys.push(key);\n      }\n    }\n\n    expiredKeys.forEach((key) => this.delete(key));\n\n    if (expiredKeys.length > 0) {\n      logger.info(`清理了 ${expiredKeys.length} 个过期缓存项`);\n    }\n  }\n\n  /**\n   * 生成缓存键\n   * @param {string} prefix - 前缀\n   * @param {object} params - 参数对象\n   * @returns {string} 缓存键\n   */\n  generateKey(prefix, params = {}) {\n    const sortedParams = Object.keys(params)\n      .sort()\n      .map((key) => `${key}:${params[key]}`)\n      .join('|');\n\n    return `${prefix}:${sortedParams}`;\n  }\n}\n\n// 创建全局缓存实例\nconst cache = new MemoryCache();\n\n/**\n * 缓存中间件工厂函数\n * @param {number} ttl - 缓存过期时间（毫秒）\n * @param {function} keyGenerator - 缓存键生成函数\n * @returns {function} Express中间件\n */\nexport function createCacheMiddleware(ttl = TIME_INTERVALS.FIVE_MINUTES_MS, keyGenerator = null) {\n  return (req, res, next) => {\n    // 只缓存GET请求\n    if (req.method !== 'GET') {\n      return next();\n    }\n\n    // 生成缓存键\n    const cacheKey = keyGenerator ? keyGenerator(req) : cache.generateKey(req.path, req.query);\n\n    // 尝试从缓存获取数据\n    const cachedData = cache.get(cacheKey);\n    if (cachedData) {\n      logger.debug(`缓存命中: ${cacheKey}`);\n      // 设置缓存命中头信息\n      res.setHeader('X-Cache-Hit', 'true');\n      res.setHeader('X-Cache-Key', cacheKey);\n      return res.json(cachedData);\n    }\n\n    // 设置缓存未命中头信息\n    res.setHeader('X-Cache-Hit', 'false');\n    res.setHeader('X-Cache-Key', cacheKey);\n\n    // 重写res.json方法以缓存响应\n    const originalJson = res.json;\n    res.json = function (data) {\n      // 只缓存成功的响应\n      if (res.statusCode === 200) {\n        cache.set(cacheKey, data, ttl);\n        logger.debug(`缓存存储: ${cacheKey}`);\n      }\n      return originalJson.call(this, data);\n    };\n\n    next();\n  };\n}\n\n/**\n * 清除特定前缀的缓存\n * @param {string} prefix - 缓存键前缀\n */\nexport function clearCacheByPrefix(prefix) {\n  const stats = cache.getStats();\n  const keysToDelete = stats.keys.filter((key) => key.startsWith(prefix));\n\n  keysToDelete.forEach((key) => cache.delete(key));\n\n  logger.info(`清除了 ${keysToDelete.length} 个前缀为 \"${prefix}\" 的缓存项`);\n}\n\n/**\n * 预热缓存函数\n * @param {string} key - 缓存键\n * @param {function} dataLoader - 数据加载函数\n * @param {number} ttl - 过期时间\n */\nexport async function warmupCache(key, dataLoader, ttl = TIME_INTERVALS.FIVE_MINUTES_MS) {\n  try {\n    const data = await dataLoader();\n    cache.set(key, data, ttl);\n    logger.info(`预热缓存: ${key}`);\n  } catch (error) {\n    logger.error(`预热缓存失败: ${key}`, { error: error.message, stack: error.stack });\n  }\n}\n\nexport { cache };\nexport default cache;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/utils/inputValidator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/utils/inputValidatorConstants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/utils/logger.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/utils/schemaValidator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/xunan/Documents/WebStormProjects/0C/src/shared/utils/testHelpers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]